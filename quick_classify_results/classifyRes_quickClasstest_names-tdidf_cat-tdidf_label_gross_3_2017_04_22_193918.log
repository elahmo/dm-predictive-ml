#########################################
###Starting all estimators for cl: quickClasstest_names-tdidf_cat-tdidf_label_gross_3
#########################################
####################################################################################
################# Runing the itteration 1  of pipeline precomp      ###############
####################################################################################
| preprocessor:dummy | transfomer: dummy | reducer: dummy
{}
Starting precomp pipline for {}
Finished precomp pipline for {}
Pre-computation of pre-processing models completed in 0:00:00.051580
####################################################################################
################# Running the iteration 2  of the GridSearchCV ####################
####################################################################################
***Starting [AdaBoostClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [AdaBoostClassifier] estimatorrun are
{'std_fit_time': array([ 0.02145254]), 'split2_train_score': array([ 0.72576177]), 'params': ({},), 'std_test_score': array([ 0.01962602]), 'mean_train_score': array([ 0.7224298]), 'std_train_score': array([ 0.00874594]), 'split1_test_score': array([ 0.69186047]), 'split1_train_score': array([ 0.73364745]), 'mean_fit_time': array([ 1.25258863]), 'split2_test_score': array([ 0.73876872]), 'mean_score_time': array([ 0.0371666]), 'split0_test_score': array([ 0.69019934]), 'split0_train_score': array([ 0.70953437]), 'split3_train_score': array([ 0.72077562]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.70822943]), 'split3_test_score': array([ 0.71214642]), 'std_score_time': array([ 0.00289266])}
GREP_ME***Best params of [AdaBoostClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [AdaBoostClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.708229426434
####################################################################################
################# Running the iteration 3  of the GridSearchCV ####################
####################################################################################
***Starting [BaggingClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.7s
[CV]  ................................................................
[CV] ................................................. , total=   1.6s
GREP_ME***Results of [BaggingClassifier] estimatorrun are
{'std_fit_time': array([ 0.15057849]), 'split2_train_score': array([ 0.98088643]), 'params': ({},), 'std_test_score': array([ 0.02019007]), 'mean_train_score': array([ 0.98233592]), 'std_train_score': array([ 0.00086027]), 'split1_test_score': array([ 0.72342193]), 'split1_train_score': array([ 0.98281596]), 'mean_fit_time': array([ 1.66331851]), 'split2_test_score': array([ 0.78036606]), 'mean_score_time': array([ 0.09980309]), 'split0_test_score': array([ 0.74833887]), 'split0_train_score': array([ 0.9825388]), 'split3_train_score': array([ 0.98310249]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.75041563]), 'split3_test_score': array([ 0.74958403]), 'std_score_time': array([ 0.00101235])}
GREP_ME***Best params of [BaggingClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [BaggingClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.750415627598
####################################################################################
################# Running the iteration 4  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreesClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
GREP_ME***Results of [ExtraTreesClassifier] estimatorrun are
{'std_fit_time': array([ 0.00316695]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.01874358]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.69933555]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 0.28939646]), 'split2_test_score': array([ 0.74292845]), 'mean_score_time': array([ 0.00916904]), 'split0_test_score': array([ 0.71096346]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.72339983]), 'split3_test_score': array([ 0.74043261]), 'std_score_time': array([ 0.00119066])}
GREP_ME***Best params of [ExtraTreesClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreesClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.723399833749
####################################################################################
################# Running the iteration 5  of the GridSearchCV ####################
####################################################################################
***Starting [GradientBoostingClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [GradientBoostingClassifier] estimatorrun are
{'std_fit_time': array([ 0.11390985]), 'split2_train_score': array([ 0.82797784]), 'params': ({},), 'std_test_score': array([ 0.01178074]), 'mean_train_score': array([ 0.83243324]), 'std_train_score': array([ 0.00376175]), 'split1_test_score': array([ 0.75083056]), 'split1_train_score': array([ 0.83786031]), 'mean_fit_time': array([ 19.12696064]), 'split2_test_score': array([ 0.77703827]), 'mean_score_time': array([ 0.01198989]), 'split0_test_score': array([ 0.7782392]), 'split0_train_score': array([ 0.83009978]), 'split3_train_score': array([ 0.83379501]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.77119701]), 'split3_test_score': array([ 0.77870216]), 'std_score_time': array([ 0.00101457])}
GREP_ME***Best params of [GradientBoostingClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [GradientBoostingClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.771197007481
####################################################################################
################# Running the iteration 6  of the GridSearchCV ####################
####################################################################################
***Starting [RandomForestClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
GREP_ME***Results of [RandomForestClassifier] estimatorrun are
{'std_fit_time': array([ 0.00749742]), 'split2_train_score': array([ 0.98531856]), 'params': ({},), 'std_test_score': array([ 0.01410015]), 'mean_train_score': array([ 0.98649239]), 'std_train_score': array([ 0.00119464]), 'split1_test_score': array([ 0.72757475]), 'split1_train_score': array([ 0.98669623]), 'mean_fit_time': array([ 0.19713289]), 'split2_test_score': array([ 0.75873544]), 'mean_score_time': array([ 0.0078004]), 'split0_test_score': array([ 0.73671096]), 'split0_train_score': array([ 0.9883592]), 'split3_train_score': array([ 0.98559557]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.74584372]), 'split3_test_score': array([ 0.76039933]), 'std_score_time': array([ 0.00028006])}
GREP_ME***Best params of [RandomForestClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RandomForestClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.745843724023
####################################################################################
################# Running the iteration 7  of the GridSearchCV ####################
####################################################################################
***Starting [PassiveAggressiveClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
GREP_ME***Results of [PassiveAggressiveClassifier] estimatorrun are
{'std_fit_time': array([ 0.00509178]), 'split2_train_score': array([ 0.47257618]), 'params': ({},), 'std_test_score': array([ 0.07152167]), 'mean_train_score': array([ 0.58181864]), 'std_train_score': array([ 0.06681408]), 'split1_test_score': array([ 0.65448505]), 'split1_train_score': array([ 0.6460643]), 'mean_fit_time': array([ 0.15679228]), 'split2_test_score': array([ 0.47420965]), 'mean_score_time': array([ 0.00255853]), 'split0_test_score': array([ 0.59136213]), 'split0_train_score': array([ 0.58453437]), 'split3_train_score': array([ 0.62409972]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.59102244]), 'split3_test_score': array([ 0.64392679]), 'std_score_time': array([ 0.00014747])}
GREP_ME***Best params of [PassiveAggressiveClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [PassiveAggressiveClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.59102244389
####################################################################################
################# Running the iteration 8  of the GridSearchCV ####################
####################################################################################
***Starting [LogisticRegression] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [LogisticRegression] estimatorrun are
{'std_fit_time': array([ 0.00471428]), 'split2_train_score': array([ 0.59861496]), 'params': ({},), 'std_test_score': array([ 0.00499253]), 'mean_train_score': array([ 0.60376929]), 'std_train_score': array([ 0.00359934]), 'split1_test_score': array([ 0.59800664]), 'split1_train_score': array([ 0.6075388]), 'mean_fit_time': array([ 0.12219846]), 'split2_test_score': array([ 0.60232945]), 'mean_score_time': array([ 0.00245196]), 'split0_test_score': array([ 0.61129568]), 'split0_train_score': array([ 0.60670732]), 'split3_train_score': array([ 0.60221607]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.60307564]), 'split3_test_score': array([ 0.60066556]), 'std_score_time': array([  8.55463296e-05])}
GREP_ME***Best params of [LogisticRegression] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LogisticRegression] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.603075644223
####################################################################################
################# Running the iteration 9  of the GridSearchCV ####################
####################################################################################
***Starting [RidgeClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [RidgeClassifier] estimatorrun are
{'std_fit_time': array([ 0.15431269]), 'split2_train_score': array([ 0.75152355]), 'params': ({},), 'std_test_score': array([ 0.01254227]), 'mean_train_score': array([ 0.75720471]), 'std_train_score': array([ 0.00421556]), 'split1_test_score': array([ 0.67607973]), 'split1_train_score': array([ 0.75526608]), 'mean_fit_time': array([ 1.18723792]), 'split2_test_score': array([ 0.70881864]), 'mean_score_time': array([ 0.00283903]), 'split0_test_score': array([ 0.68189369]), 'split0_train_score': array([ 0.76274945]), 'split3_train_score': array([ 0.75927978]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.68765586]), 'split3_test_score': array([ 0.68386023]), 'std_score_time': array([ 0.00137432])}
GREP_ME***Best params of [RidgeClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RidgeClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.687655860349
####################################################################################
################# Running the iteration 10  of the GridSearchCV ####################
####################################################################################
***Starting [SGDClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [SGDClassifier] estimatorrun are
{'std_fit_time': array([ 0.0031455]), 'split2_train_score': array([ 0.59972299]), 'params': ({},), 'std_test_score': array([  8.29182526e-05]), 'mean_train_score': array([ 0.59975063]), 'std_train_score': array([  2.76394101e-05]), 'split1_test_score': array([ 0.59966777]), 'split1_train_score': array([ 0.59977827]), 'mean_fit_time': array([ 0.12779433]), 'split2_test_score': array([ 0.59983361]), 'mean_score_time': array([ 0.00260311]), 'split0_test_score': array([ 0.59966777]), 'split0_train_score': array([ 0.59977827]), 'split3_train_score': array([ 0.59972299]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.59975062]), 'split3_test_score': array([ 0.59983361]), 'std_score_time': array([ 0.00012768])}
GREP_ME***Best params of [SGDClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SGDClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.599750623441
####################################################################################
################# Running the iteration 11  of the GridSearchCV ####################
####################################################################################
***Starting [GaussianNB] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [GaussianNB] estimatorrun are
{'std_fit_time': array([ 0.0073654]), 'split2_train_score': array([ 0.57839335]), 'params': ({},), 'std_test_score': array([ 0.01482156]), 'mean_train_score': array([ 0.59587083]), 'std_train_score': array([ 0.01451373]), 'split1_test_score': array([ 0.57059801]), 'split1_train_score': array([ 0.59866962]), 'mean_fit_time': array([ 0.10744524]), 'split2_test_score': array([ 0.59983361]), 'mean_score_time': array([ 0.01579177]), 'split0_test_score': array([ 0.59883721]), 'split0_train_score': array([ 0.5886918]), 'split3_train_score': array([ 0.61772853]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.59497091]), 'split3_test_score': array([ 0.61064892]), 'std_score_time': array([ 0.00076077])}
GREP_ME***Best params of [GaussianNB] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [GaussianNB] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.594970906068
####################################################################################
################# Running the iteration 12  of the GridSearchCV ####################
####################################################################################
***Starting [MultinomialNB] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [MultinomialNB] estimatorrun are
{'std_fit_time': array([ 0.00086685]), 'split2_train_score': array([ 0.44764543]), 'params': ({},), 'std_test_score': array([ 0.00731616]), 'mean_train_score': array([ 0.44319694]), 'std_train_score': array([ 0.00477524]), 'split1_test_score': array([ 0.45348837]), 'split1_train_score': array([ 0.43542129]), 'mean_fit_time': array([ 0.07996738]), 'split2_test_score': array([ 0.4359401]), 'mean_score_time': array([ 0.00233775]), 'split0_test_score': array([ 0.43770764]), 'split0_train_score': array([ 0.44650776]), 'split3_train_score': array([ 0.4432133]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.44389027]), 'split3_test_score': array([ 0.4484193]), 'std_score_time': array([ 0.00031449])}
GREP_ME***Best params of [MultinomialNB] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [MultinomialNB] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.443890274314
####################################################################################
################# Running the iteration 13  of the GridSearchCV ####################
####################################################################################
***Starting [KNeighborsClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [KNeighborsClassifier] estimatorrun are
{'std_fit_time': array([ 0.00322055]), 'split2_train_score': array([ 0.79445983]), 'params': ({},), 'std_test_score': array([ 0.01665386]), 'mean_train_score': array([ 0.80119237]), 'std_train_score': array([ 0.00441162]), 'split1_test_score': array([ 0.71096346]), 'split1_train_score': array([ 0.80681818]), 'mean_fit_time': array([ 0.13108701]), 'split2_test_score': array([ 0.7562396]), 'mean_score_time': array([ 0.22961056]), 'split0_test_score': array([ 0.72508306]), 'split0_train_score': array([ 0.80210643]), 'split3_train_score': array([ 0.80138504]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.72901081]), 'split3_test_score': array([ 0.72379368]), 'std_score_time': array([ 0.00537207])}
GREP_ME***Best params of [KNeighborsClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [KNeighborsClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.729010806318
####################################################################################
################# Running the iteration 14  of the GridSearchCV ####################
####################################################################################
***Starting [RadiusNeighborsClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
GREP_ME***Error caught for  [RadiusNeighborsClassifier] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/data_mining/quick_solver.py in <module>()
    548         './dataset/test_names-td_cat-tdidf.csv',
    549         './dataset/test_names-tdidf_cat-count.csv',
    550         './dataset/test_names-tdidf_cat-td.csv',
    551         './dataset/test_names-tdidf_cat-tdidf.csv'
    552     ]
--> 553     for file in files: simple_experiment(file)
    554 
    555 
    556 
    557 

...........................................................................
/home/user/data_mining/quick_solver.py in simple_experiment(file_path='./dataset/test_names-tdidf_cat-tdidf.csv')
    529             global itter_start
    530             itter_start = 0
    531             x_crr = dta_clean.drop('worldwide_gross', axis=1)
    532             y_crr = dta_clean.worldwide_gross.apply (lambda gross: cb (gross))
    533             dsc = desc + "_" + cb.__name__
--> 534             run_for_many(x_crr, y_crr, dsc, models_class, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns]
        y_crr = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        dsc = 'quickClasstest_names-tdidf_cat-tdidf_label_gross_3'
        models_class = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
    535             new_file.close()
    536     
    537     # reassign the org stdout for some reason
    538     sys.stdout = orig_stdout

...........................................................................
/home/user/data_mining/quick_solver.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns], y=0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64, cl_n='quickClasstest_names-tdidf_cat-tdidf_label_gross_3', models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...})
    397     errors = []
    398     errors_ind = []
    399     print("#########################################")
    400     print("###Starting all estimators for cl: " + str(cl_n))
    401     print("#########################################")
--> 402     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns]
        y = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        models = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
        errors = []
        errors_ind = []
        precomp_pipe = []
    403     print("#########################################")
    404     print("###Finished all estimators for cl: " + str(cl_n))
    405     print("#########################################")
    406 

...........................................................................
/home/user/data_mining/quick_solver.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns], y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70822942643391518}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.75041562759767244}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72339983374896089}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59497090606816294}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77119700748129671}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72901080631753945}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60307564422277637}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44389027431421446}, 'PassiveAggressiveClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59102244389027436}, 'RandomForestClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.74584372402327515}, ...}, errors=[], errors_ind=[], precomp_pipe=[])
    386     for filename in os.listdir("./tmp"):
    387         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    388         # for model in models:
    389         for model in models:
    390             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 391                             results, errors, errors_ind)
        results = {'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70822942643391518}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.75041562759767244}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72339983374896089}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59497090606816294}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77119700748129671}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72901080631753945}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60307564422277637}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44389027431421446}, 'PassiveAggressiveClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59102244389027436}, 'RandomForestClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.74584372402327515}, ...}
        errors = []
        errors_ind = []
    392 
    393 ## Function for trigrering gridserach and priting results
    394 def run_for_many(x, y, cl_n, models, models_cfg):
    395     results = {}

...........................................................................
/home/user/data_mining/quick_solver.py in run_grid_search(x=array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, model=RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), model_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70822942643391518}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.75041562759767244}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72339983374896089}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59497090606816294}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77119700748129671}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72901080631753945}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60307564422277637}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44389027431421446}, 'PassiveAggressiveClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59102244389027436}, 'RandomForestClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.74584372402327515}, ...}, errors=[], errors_ind=[])
    299     print("##param_grid##")
    300     print(param_grid)
    301     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    302     # run the estimator, except exceptions, sape errors
    303     try:
--> 304         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64
    305         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    306         print(estimator.cv_results_)
    307         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    308         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sat Apr 22 19:40:03 2017
PID: 24539                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1110, 1127, 1128, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1212, 1213, 1215]), 2, {}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1110, 1127, 1128, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1212, 1213, 1215]), 2, {})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), X=memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([1110, 1127, 1128, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1212, 1213, 1215]), verbose=2, parameters={}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    255                              " numeric value. (Hint: if using 'raise', please"
    256                              " make sure that it has been spelled correctly.)")
    257 
    258     else:
    259         fit_time = time.time() - start_time
--> 260         test_score = _score(estimator, X_test, y_test, scorer)
        test_score = undefined
        estimator = Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))])
        X_test = memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y_test = 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64
        scorer = <function _passthrough_scorer>
    261         score_time = time.time() - start_time - fit_time
    262         if return_train_score:
    263             train_score = _score(estimator, X_train, y_train, scorer)
    264 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _score(estimator=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), X_test=memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y_test=1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>)
    283 def _score(estimator, X_test, y_test, scorer):
    284     """Compute the score of an estimator on a given test set."""
    285     if y_test is None:
    286         score = scorer(estimator, X_test)
    287     else:
--> 288         score = scorer(estimator, X_test, y_test)
        score = undefined
        scorer = <function _passthrough_scorer>
        estimator = Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))])
        X_test = memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y_test = 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64
    289     if hasattr(score, 'item'):
    290         try:
    291             # e.g. unwrap memmapped scalars
    292             score = score.item()

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/scorer.py in _passthrough_scorer(estimator=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), *args=(memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64), **kwargs={})
    214     return scorer
    215 
    216 
    217 def _passthrough_scorer(estimator, *args, **kwargs):
    218     """Function that wraps estimator.score"""
--> 219     return estimator.score(*args, **kwargs)
        estimator.score = <function Pipeline.score>
        args = (memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64)
        kwargs = {}
    220 
    221 
    222 def check_scoring(estimator, scoring=None, allow_none=False):
    223     """Determine scorer from user options.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/metaestimators.py in <lambda>(*args=(memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64), **kwargs={})
     49                     break
     50             else:
     51                 attrgetter(self.delegate_names[-1])(obj)
     52 
     53         # lambda, but not partial, allows help() to work with update_wrapper
---> 54         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)
        args = (memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64)
        kwargs = {}
     55         # update the docstring of the returned function
     56         update_wrapper(out, self.fn)
     57         return out
     58 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in score(self=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), X=memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64)
    500         """
    501         Xt = X
    502         for name, transform in self.steps[:-1]:
    503             if transform is not None:
    504                 Xt = transform.transform(Xt)
--> 505         return self.steps[-1][-1].score(Xt, y)
        self.steps.score = undefined
        Xt = memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64
    506 
    507     @property
    508     def classes_(self):
    509         return self.steps[-1][-1].classes_

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/base.py in score(self=RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), X=memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64, sample_weight=None)
    344         score : float
    345             Mean accuracy of self.predict(X) wrt. y.
    346 
    347         """
    348         from .metrics import accuracy_score
--> 349         return accuracy_score(y, self.predict(X), sample_weight=sample_weight)
        accuracy_score = <function accuracy_score>
        y = 1554    2
1599    2
3793    1
2973    2
1219    ...  2
3165    2
Name: worldwide_gross, dtype: int64
        self.predict = <bound method RadiusNeighborsClassifier.predict ...p=2, radius=1.0,
             weights='uniform')>
        X = memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]])
        sample_weight = None
    350 
    351 
    352 ###############################################################################
    353 class RegressorMixin(object):

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/neighbors/classification.py in predict(self=RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), X=array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]]))
    358         elif outliers:
    359             raise ValueError('No neighbors found for test samples %r, '
    360                              'you can try using larger radius, '
    361                              'give a label for outliers, '
    362                              'or consider removing them from your dataset.'
--> 363                              % outliers)
        outliers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...]
    364 
    365         weights = _get_weights(neigh_dist, self.weights)
    366 
    367         y_pred = np.empty((n_samples, n_outputs), dtype=classes_[0].dtype)

ValueError: No neighbors found for test samplesyou can try using larger radius, give a label for outliers, or consider removing them from your dataset.
___________________________________________________________________________
####################################################################################
################# Running the iteration 15  of the GridSearchCV ####################
####################################################################################
***Starting [NearestCentroid] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [NearestCentroid] estimatorrun are
{'std_fit_time': array([ 0.00221409]), 'split2_train_score': array([ 0.62853186]), 'params': ({},), 'std_test_score': array([ 0.0058586]), 'mean_train_score': array([ 0.63251669]), 'std_train_score': array([ 0.00411307]), 'split1_test_score': array([ 0.62292359]), 'split1_train_score': array([ 0.63941242]), 'mean_fit_time': array([ 0.07216191]), 'split2_test_score': array([ 0.63810316]), 'mean_score_time': array([ 0.00352627]), 'split0_test_score': array([ 0.63621262]), 'split0_train_score': array([ 0.63109756]), 'split3_train_score': array([ 0.63102493]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.6325852]), 'split3_test_score': array([ 0.63311148]), 'std_score_time': array([ 0.000123])}
GREP_ME***Best params of [NearestCentroid] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [NearestCentroid] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.632585203658
####################################################################################
################# Running the iteration 16  of the GridSearchCV ####################
####################################################################################
***Starting [MLPClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.6s
[CV]  ................................................................
[CV] ................................................. , total=   1.6s
[CV]  ................................................................
[CV] ................................................. , total=   2.3s
GREP_ME***Results of [MLPClassifier] estimatorrun are
{'std_fit_time': array([ 0.36623067]), 'split2_train_score': array([ 0.61855956]), 'params': ({},), 'std_test_score': array([ 0.01186556]), 'mean_train_score': array([ 0.62801412]), 'std_train_score': array([ 0.00824451]), 'split1_test_score': array([ 0.63704319]), 'split1_train_score': array([ 0.63968958]), 'mean_fit_time': array([ 1.9305914]), 'split2_test_score': array([ 0.61480865]), 'mean_score_time': array([ 0.0149374]), 'split0_test_score': array([ 0.64534884]), 'split0_train_score': array([ 0.62222838]), 'split3_train_score': array([ 0.63157895]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.63009144]), 'split3_test_score': array([ 0.62312812]), 'std_score_time': array([ 0.00757778])}
GREP_ME***Best params of [MLPClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [MLPClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.630091438071
####################################################################################
################# Running the iteration 17  of the GridSearchCV ####################
####################################################################################
***Starting [SVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [SVC] estimatorrun are
{'std_fit_time': array([ 0.02986907]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.00130631]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.60631229]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 13.8592149]), 'split2_test_score': array([ 0.60898502]), 'mean_score_time': array([ 2.87341267]), 'split0_test_score': array([ 0.60797342]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.60827099]), 'split3_test_score': array([ 0.60981697]), 'std_score_time': array([ 0.00907954])}
GREP_ME***Best params of [SVC] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SVC] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.608270989194
####################################################################################
################# Running the iteration 18  of the GridSearchCV ####################
####################################################################################
***Starting [LinearSVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [LinearSVC] estimatorrun are
{'std_fit_time': array([ 0.05317464]), 'split2_train_score': array([ 0.70526316]), 'params': ({},), 'std_test_score': array([ 0.13867361]), 'mean_train_score': array([ 0.57090442]), 'std_train_score': array([ 0.13396796]), 'split1_test_score': array([ 0.57807309]), 'split1_train_score': array([ 0.57732816]), 'mean_fit_time': array([ 1.02113402]), 'split2_test_score': array([ 0.70715474]), 'mean_score_time': array([ 0.00258803]), 'split0_test_score': array([ 0.34800664]), 'split0_train_score': array([ 0.35254989]), 'split3_train_score': array([ 0.64847645]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.57418953]), 'split3_test_score': array([ 0.66389351]), 'std_score_time': array([  4.90621179e-05])}
GREP_ME***Best params of [LinearSVC] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearSVC] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.574189526185
####################################################################################
################# Running the iteration 19  of the GridSearchCV ####################
####################################################################################
***Starting [NuSVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
GREP_ME***Error caught for  [NuSVC] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/data_mining/quick_solver.py in <module>()
    548         './dataset/test_names-td_cat-tdidf.csv',
    549         './dataset/test_names-tdidf_cat-count.csv',
    550         './dataset/test_names-tdidf_cat-td.csv',
    551         './dataset/test_names-tdidf_cat-tdidf.csv'
    552     ]
--> 553     for file in files: simple_experiment(file)
    554 
    555 
    556 
    557 

...........................................................................
/home/user/data_mining/quick_solver.py in simple_experiment(file_path='./dataset/test_names-tdidf_cat-tdidf.csv')
    529             global itter_start
    530             itter_start = 0
    531             x_crr = dta_clean.drop('worldwide_gross', axis=1)
    532             y_crr = dta_clean.worldwide_gross.apply (lambda gross: cb (gross))
    533             dsc = desc + "_" + cb.__name__
--> 534             run_for_many(x_crr, y_crr, dsc, models_class, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns]
        y_crr = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        dsc = 'quickClasstest_names-tdidf_cat-tdidf_label_gross_3'
        models_class = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
    535             new_file.close()
    536     
    537     # reassign the org stdout for some reason
    538     sys.stdout = orig_stdout

...........................................................................
/home/user/data_mining/quick_solver.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns], y=0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64, cl_n='quickClasstest_names-tdidf_cat-tdidf_label_gross_3', models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...})
    397     errors = []
    398     errors_ind = []
    399     print("#########################################")
    400     print("###Starting all estimators for cl: " + str(cl_n))
    401     print("#########################################")
--> 402     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns]
        y = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        models = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
        errors = []
        errors_ind = []
        precomp_pipe = []
    403     print("#########################################")
    404     print("###Finished all estimators for cl: " + str(cl_n))
    405     print("#########################################")
    406 

...........................................................................
/home/user/data_mining/quick_solver.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l... 0.000000        0.0  

[4812 rows x 489 columns], y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70822942643391518}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.75041562759767244}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72339983374896089}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59497090606816294}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77119700748129671}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72901080631753945}, 'LinearSVC': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57418952618453867}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60307564422277637}, 'MLPClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.63009143807148793}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44389027431421446}, ...}, errors=[], errors_ind=[], precomp_pipe=[])
    386     for filename in os.listdir("./tmp"):
    387         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    388         # for model in models:
    389         for model in models:
    390             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 391                             results, errors, errors_ind)
        results = {'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70822942643391518}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.75041562759767244}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72339983374896089}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59497090606816294}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77119700748129671}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72901080631753945}, 'LinearSVC': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57418952618453867}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60307564422277637}, 'MLPClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.63009143807148793}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44389027431421446}, ...}
        errors = []
        errors_ind = []
    392 
    393 ## Function for trigrering gridserach and priting results
    394 def run_for_many(x, y, cl_n, models, models_cfg):
    395     results = {}

...........................................................................
/home/user/data_mining/quick_solver.py in run_grid_search(x=array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, model=NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), model_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70822942643391518}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.75041562759767244}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72339983374896089}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59497090606816294}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77119700748129671}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72901080631753945}, 'LinearSVC': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57418952618453867}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60307564422277637}, 'MLPClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.63009143807148793}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44389027431421446}, ...}, errors=[], errors_ind=[])
    299     print("##param_grid##")
    300     print(param_grid)
    301     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    302     # run the estimator, except exceptions, sape errors
    303     try:
--> 304         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64
    305         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    306         print(estimator.cv_results_)
    307         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    308         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[  3.77000000e+02,   8.60000000e+01,   7....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sat Apr 22 19:40:55 2017
PID: 24593                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1110, 1127, 1128, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1212, 1213, 1215]), 2, {}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1110, 1127, 1128, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1212, 1213, 1215]), 2, {})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), X=memmap([[  3.77000000e+02,   8.60000000e+01,   7...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=1554    2
1599    2
3793    1
2973    2
1219    ...  1
1985    2
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([1110, 1127, 1128, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1212, 1213, 1215]), verbose=2, parameters={}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    233 
    234     try:
    235         if y_train is None:
    236             estimator.fit(X_train, **fit_params)
    237         else:
--> 238             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(steps=[('...
   shrinking=True, tol=0.001, verbose=False))])>
        X_train = memmap([[   528.,    431.,    259., ...,      0.... 508.,    180., ...,      0.,      0.,      0.]])
        y_train = 350     3
340     3
319     3
12      3
306     ...  1
1985    2
Name: worldwide_gross, dtype: int64
        fit_params = {}
    239 
    240     except Exception as e:
    241         # Note fit time as time until error
    242         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in fit(self=Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), X=memmap([[   528.,    431.,    259., ...,      0.... 508.,    180., ...,      0.,      0.,      0.]]), y=350     3
340     3
319     3
12      3
306     ...  1
1985    2
Name: worldwide_gross, dtype: int64, **fit_params={})
    265         self : Pipeline
    266             This estimator
    267         """
    268         Xt, fit_params = self._fit(X, y, **fit_params)
    269         if self._final_estimator is not None:
--> 270             self._final_estimator.fit(Xt, y, **fit_params)
        self._final_estimator.fit = <bound method NuSVC.fit of NuSVC(cache_size=200,...ne,
   shrinking=True, tol=0.001, verbose=False)>
        Xt = memmap([[   528.,    431.,    259., ...,      0.... 508.,    180., ...,      0.,      0.,      0.]])
        y = 350     3
340     3
319     3
12      3
306     ...  1
1985    2
Name: worldwide_gross, dtype: int64
        fit_params = {}
    271         return self
    272 
    273     def fit_transform(self, X, y=None, **fit_params):
    274         """Fit the model and transform with the final estimator

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/svm/base.py in fit(self=NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), X=array([[   528.,    431.,    259., ...,      0.,... 508.,    180., ...,      0.,      0.,      0.]]), y=array([ 2.,  2.,  2., ...,  1.,  0.,  1.]), sample_weight=array([], dtype=float64))
    184         fit = self._sparse_fit if self._sparse else self._dense_fit
    185         if self.verbose:  # pragma: no cover
    186             print('[LibSVM]', end='')
    187 
    188         seed = rnd.randint(np.iinfo('i').max)
--> 189         fit(X, y, sample_weight, solver_type, kernel, random_seed=seed)
        fit = <bound method NuSVC._dense_fit of NuSVC(cache_si...ne,
   shrinking=True, tol=0.001, verbose=False)>
        X = array([[   528.,    431.,    259., ...,      0.,... 508.,    180., ...,      0.,      0.,      0.]])
        y = array([ 2.,  2.,  2., ...,  1.,  0.,  1.])
        sample_weight = array([], dtype=float64)
        solver_type = 1
        kernel = 'rbf'
        seed = 914481385
    190         # see comment on the other call to np.iinfo in this file
    191 
    192         self.shape_fit_ = X.shape
    193 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/svm/base.py in _dense_fit(self=NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), X=array([[   528.,    431.,    259., ...,      0.,... 508.,    180., ...,      0.,      0.,      0.]]), y=array([ 2.,  2.,  2., ...,  1.,  0.,  1.]), sample_weight=array([], dtype=float64), solver_type=1, kernel='rbf', random_seed=914481385)
    251                 class_weight=self.class_weight_, kernel=kernel, C=self.C,
    252                 nu=self.nu, probability=self.probability, degree=self.degree,
    253                 shrinking=self.shrinking, tol=self.tol,
    254                 cache_size=self.cache_size, coef0=self.coef0,
    255                 gamma=self._gamma, epsilon=self.epsilon,
--> 256                 max_iter=self.max_iter, random_seed=random_seed)
        self.max_iter = -1
        random_seed = 914481385
    257 
    258         self._warn_from_fit_status()
    259 
    260     def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/svm/libsvm.cpython-34m.so in sklearn.svm.libsvm.fit (sklearn/svm/libsvm.c:2501)()
    182 
    183 
    184 
    185 
    186 
--> 187 
    188 
    189 
    190 
    191 

ValueError: specified nu is infeasible
___________________________________________________________________________
####################################################################################
################# Running the iteration 20  of the GridSearchCV ####################
####################################################################################
***Starting [DecisionTreeClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
GREP_ME***Results of [DecisionTreeClassifier] estimatorrun are
{'std_fit_time': array([ 0.02983419]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.0078374]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.69684385]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 0.30867529]), 'split2_test_score': array([ 0.71131448]), 'mean_score_time': array([ 0.00314468]), 'split0_test_score': array([ 0.71511628]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.70552785]), 'split3_test_score': array([ 0.69883527]), 'std_score_time': array([  6.55675747e-05])}
GREP_ME***Best params of [DecisionTreeClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [DecisionTreeClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.705527847049
####################################################################################
################# Running the iteration 21  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreeClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [ExtraTreeClassifier] estimatorrun are
{'std_fit_time': array([ 0.0024925]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.00853838]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.63704319]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 0.09244806]), 'split2_test_score': array([ 0.65557404]), 'mean_score_time': array([ 0.00335133]), 'split0_test_score': array([ 0.65946844]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.65128845]), 'split3_test_score': array([ 0.6530782]), 'std_score_time': array([  8.62404031e-05])}
GREP_ME***Best params of [ExtraTreeClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreeClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.651288445553
#########################################
###Finished all estimators for cl: quickClasstest_names-tdidf_cat-tdidf_label_gross_3
#########################################
#########################################
#######Printing results for cl: quickClasstest_names-tdidf_cat-tdidf_label_gross_3
#########################################
{'NearestCentroid': {'score': 0.63258520365752291, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'DecisionTreeClassifier': {'score': 0.70552784704904403, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'BaggingClassifier': {'score': 0.75041562759767244, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'SGDClassifier': {'score': 0.59975062344139651, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'GaussianNB': {'score': 0.59497090606816294, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'SVC': {'score': 0.6082709891936825, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'RandomForestClassifier': {'score': 0.74584372402327515, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'PassiveAggressiveClassifier': {'score': 0.59102244389027436, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'ExtraTreeClassifier': {'score': 0.65128844555278476, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'MultinomialNB': {'score': 0.44389027431421446, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LogisticRegression': {'score': 0.60307564422277637, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'AdaBoostClassifier': {'score': 0.70822942643391518, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'GradientBoostingClassifier': {'score': 0.77119700748129671, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LinearSVC': {'score': 0.57418952618453867, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'ExtraTreesClassifier': {'score': 0.72339983374896089, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'MLPClassifier': {'score': 0.63009143807148793, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'KNeighborsClassifier': {'score': 0.72901080631753945, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'RidgeClassifier': {'score': 0.68765586034912718, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}}
priting simply sorted numbers, grep them to find the best cfg or cl: quickClasstest_names-tdidf_cat-tdidf_label_gross_3
[0.44389027431421446, 0.57418952618453867, 0.59102244389027436, 0.59497090606816294, 0.59975062344139651, 0.60307564422277637, 0.6082709891936825, 0.63009143807148793, 0.63258520365752291, 0.65128844555278476, 0.68765586034912718, 0.70552784704904403, 0.70822942643391518, 0.72339983374896089, 0.72901080631753945, 0.74584372402327515, 0.75041562759767244, 0.77119700748129671]
