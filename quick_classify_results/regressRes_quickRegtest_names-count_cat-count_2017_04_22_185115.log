#########################################
###Starting all estimators for cl: quickRegtest_names-count_cat-count
#########################################
####################################################################################
################# Runing the itteration 1  of pipeline precomp      ###############
####################################################################################
| preprocessor:dummy | transfomer: dummy | reducer: dummy
{}
Starting precomp pipline for {}
Finished precomp pipline for {}
Pre-computation of pre-processing models completed in 0:00:00.065633
####################################################################################
################# Running the iteration 2  of the GridSearchCV ####################
####################################################################################
***Starting [AdaBoostRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   3.1s
GREP_ME***Results of [AdaBoostRegressor] estimatorrun are
{'std_fit_time': array([ 0.90378577]), 'split2_train_score': array([-0.53845006]), 'params': ({},), 'std_test_score': array([ 0.50723162]), 'mean_train_score': array([-0.03957475]), 'std_train_score': array([ 0.45594875]), 'split1_test_score': array([ 0.4334158]), 'split1_train_score': array([ 0.50511574]), 'mean_fit_time': array([ 2.35318738]), 'split2_test_score': array([-0.63199198]), 'mean_score_time': array([ 0.02006584]), 'split0_test_score': array([-0.70523187]), 'split0_train_score': array([-0.43993646]), 'split3_train_score': array([ 0.31497178]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.16685388]), 'split3_test_score': array([ 0.23639254]), 'std_score_time': array([ 0.00867402])}
GREP_ME***Best params of [AdaBoostRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [AdaBoostRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.166853877215
####################################################################################
################# Running the iteration 3  of the GridSearchCV ####################
####################################################################################
***Starting [BaggingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.8s
GREP_ME***Results of [BaggingRegressor] estimatorrun are
{'std_fit_time': array([ 0.24522976]), 'split2_train_score': array([ 0.92258687]), 'params': ({},), 'std_test_score': array([ 0.02153721]), 'mean_train_score': array([ 0.91983743]), 'std_train_score': array([ 0.00295769]), 'split1_test_score': array([ 0.59504042]), 'split1_train_score': array([ 0.91742824]), 'mean_fit_time': array([ 1.86793166]), 'split2_test_score': array([ 0.54065226]), 'mean_score_time': array([ 0.10320461]), 'split0_test_score': array([ 0.57356313]), 'split0_train_score': array([ 0.91638323]), 'split3_train_score': array([ 0.92295137]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.57518779]), 'split3_test_score': array([ 0.59149535]), 'std_score_time': array([ 0.00182556])}
GREP_ME***Best params of [BaggingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [BaggingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.575187790967
####################################################################################
################# Running the iteration 4  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreesRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   3.6s
[CV]  ................................................................
[CV] ................................................. , total=   4.1s
[CV]  ................................................................
[CV] ................................................. , total=   4.9s
GREP_ME***Results of [ExtraTreesRegressor] estimatorrun are
{'std_fit_time': array([ 0.5882224]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.04015158]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.57028295]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 4.39944339]), 'split2_test_score': array([ 0.50601246]), 'mean_score_time': array([ 0.00953239]), 'split0_test_score': array([ 0.52207756]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.55152394]), 'split3_test_score': array([ 0.6077228]), 'std_score_time': array([ 0.00059457])}
GREP_ME***Best params of [ExtraTreesRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreesRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.551523942786
####################################################################################
################# Running the iteration 5  of the GridSearchCV ####################
####################################################################################
***Starting [GradientBoostingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=  10.6s
[CV]  ................................................................
[CV] ................................................. , total=  10.8s
[CV]  ................................................................
[CV] ................................................. , total=  11.3s
GREP_ME***Results of [GradientBoostingRegressor] estimatorrun are
{'std_fit_time': array([ 0.99881753]), 'split2_train_score': array([ 0.79146137]), 'params': ({},), 'std_test_score': array([ 0.0147871]), 'mean_train_score': array([ 0.7813848]), 'std_train_score': array([ 0.01017858]), 'split1_test_score': array([ 0.5767078]), 'split1_train_score': array([ 0.78608561]), 'mean_fit_time': array([ 11.46799141]), 'split2_test_score': array([ 0.56114185]), 'mean_score_time': array([ 0.00627565]), 'split0_test_score': array([ 0.59916261]), 'split0_train_score': array([ 0.78352485]), 'split3_train_score': array([ 0.76446737]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.57554077]), 'split3_test_score': array([ 0.56515081]), 'std_score_time': array([ 0.00051161])}
GREP_ME***Best params of [GradientBoostingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [GradientBoostingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.575540766738
####################################################################################
################# Running the iteration 6  of the GridSearchCV ####################
####################################################################################
***Starting [RandomForestRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.9s
[CV]  ................................................................
[CV] ................................................. , total=   1.9s
GREP_ME***Results of [RandomForestRegressor] estimatorrun are
{'std_fit_time': array([ 0.29006204]), 'split2_train_score': array([ 0.9301547]), 'params': ({},), 'std_test_score': array([ 0.02338024]), 'mean_train_score': array([ 0.92655466]), 'std_train_score': array([ 0.00451011]), 'split1_test_score': array([ 0.57275994]), 'split1_train_score': array([ 0.92869486]), 'mean_fit_time': array([ 2.07062864]), 'split2_test_score': array([ 0.52447433]), 'mean_score_time': array([ 0.00739902]), 'split0_test_score': array([ 0.57090153]), 'split0_train_score': array([ 0.92855015]), 'split3_train_score': array([ 0.91881891]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.56362665]), 'split3_test_score': array([ 0.58637081]), 'std_score_time': array([ 0.0001144])}
GREP_ME***Best params of [RandomForestRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RandomForestRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.563626654739
####################################################################################
################# Running the iteration 7  of the GridSearchCV ####################
####################################################################################
***Starting [ElasticNet] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   6.8s
[CV]  ................................................................
[CV] ................................................. , total=   7.0s
[CV]  ................................................................
[CV] ................................................. , total=   7.1s
GREP_ME***Results of [ElasticNet] estimatorrun are
{'std_fit_time': array([ 0.18202701]), 'split2_train_score': array([ 0.57401188]), 'params': ({},), 'std_test_score': array([ 0.02116546]), 'mean_train_score': array([ 0.56936894]), 'std_train_score': array([ 0.00656336]), 'split1_test_score': array([ 0.59314716]), 'split1_train_score': array([ 0.56002794]), 'mean_fit_time': array([ 7.00036603]), 'split2_test_score': array([ 0.55006468]), 'mean_score_time': array([ 0.01383024]), 'split0_test_score': array([ 0.53787512]), 'split0_train_score': array([ 0.57683966]), 'split3_train_score': array([ 0.56659627]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.56332521]), 'split3_test_score': array([ 0.57221389]), 'std_score_time': array([ 0.00542426])}
GREP_ME***Best params of [ElasticNet] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ElasticNet] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.563325212068
####################################################################################
################# Running the iteration 8  of the GridSearchCV ####################
####################################################################################
***Starting [HuberRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
GREP_ME***Results of [HuberRegressor] estimatorrun are
{'std_fit_time': array([ 0.11434726]), 'split2_train_score': array([ 0.49062944]), 'params': ({},), 'std_test_score': array([ 0.02630598]), 'mean_train_score': array([ 0.48673497]), 'std_train_score': array([ 0.0114179]), 'split1_test_score': array([ 0.51852107]), 'split1_train_score': array([ 0.46726427]), 'mean_fit_time': array([ 0.47012001]), 'split2_test_score': array([ 0.44915289]), 'mean_score_time': array([ 0.0034101]), 'split0_test_score': array([ 0.47524615]), 'split0_train_score': array([ 0.4962391]), 'split3_train_score': array([ 0.49280705]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.48607928]), 'split3_test_score': array([ 0.50139702]), 'std_score_time': array([ 0.00134951])}
GREP_ME***Best params of [HuberRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [HuberRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.486079281372
####################################################################################
################# Running the iteration 9  of the GridSearchCV ####################
####################################################################################
***Starting [Lasso] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   6.2s
[CV]  ................................................................
[CV] ................................................. , total=   6.9s
[CV]  ................................................................
[CV] ................................................. , total=   7.1s
GREP_ME***Results of [Lasso] estimatorrun are
{'std_fit_time': array([ 0.73769182]), 'split2_train_score': array([ 0.67120626]), 'params': ({},), 'std_test_score': array([ 0.02733603]), 'mean_train_score': array([ 0.6716759]), 'std_train_score': array([ 0.00443584]), 'split1_test_score': array([ 0.51404256]), 'split1_train_score': array([ 0.66550965]), 'mean_fit_time': array([ 7.07988948]), 'split2_test_score': array([ 0.50381815]), 'mean_score_time': array([ 0.00796729]), 'split0_test_score': array([ 0.46864739]), 'split0_train_score': array([ 0.67803079]), 'split3_train_score': array([ 0.67195691]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.5079357]), 'split3_test_score': array([ 0.54523469]), 'std_score_time': array([ 0.00600349])}
GREP_ME***Best params of [Lasso] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [Lasso] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.507935700696
####################################################################################
################# Running the iteration 10  of the GridSearchCV ####################
####################################################################################
***Starting [LassoLars] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   2.8s
[CV]  ................................................................
[CV] ................................................. , total=   3.2s
[CV]  ................................................................
[CV] ................................................. , total=   3.3s
GREP_ME***Results of [LassoLars] estimatorrun are
{'std_fit_time': array([ 0.30567654]), 'split2_train_score': array([ 0.66895172]), 'params': ({},), 'std_test_score': array([ 0.02589483]), 'mean_train_score': array([ 0.66933503]), 'std_train_score': array([ 0.0039735]), 'split1_test_score': array([ 0.525356]), 'split1_train_score': array([ 0.6645666]), 'mean_fit_time': array([ 3.21641415]), 'split2_test_score': array([ 0.51302]), 'mean_score_time': array([ 0.005364]), 'split0_test_score': array([ 0.47999413]), 'split0_train_score': array([ 0.67558511]), 'split3_train_score': array([ 0.66823671]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.51760515]), 'split3_test_score': array([ 0.55205048]), 'std_score_time': array([ 0.00227332])}
GREP_ME***Best params of [LassoLars] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LassoLars] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.517605151037
####################################################################################
################# Running the iteration 11  of the GridSearchCV ####################
####################################################################################
***Starting [LinearRegression] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.0s
GREP_ME***Results of [LinearRegression] estimatorrun are
{'std_fit_time': array([ 0.09223808]), 'split2_train_score': array([ 0.67122188]), 'params': ({},), 'std_test_score': array([ 0.02719648]), 'mean_train_score': array([ 0.67170937]), 'std_train_score': array([ 0.00444586]), 'split1_test_score': array([ 0.51382622]), 'split1_train_score': array([ 0.66551083]), 'mean_fit_time': array([ 0.92620027]), 'split2_test_score': array([ 0.50434466]), 'mean_score_time': array([ 0.00511593]), 'split0_test_score': array([ 0.46856639]), 'split0_train_score': array([ 0.67805669]), 'split3_train_score': array([ 0.67204807]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.5078914]), 'split3_test_score': array([ 0.54482832]), 'std_score_time': array([ 0.0022224])}
GREP_ME***Best params of [LinearRegression] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearRegression] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.507891398674
####################################################################################
################# Running the iteration 12  of the GridSearchCV ####################
####################################################################################
***Starting [PassiveAggressiveRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [PassiveAggressiveRegressor] estimatorrun are
{'std_fit_time': array([ 0.03667925]), 'split2_train_score': array([ 0.5000513]), 'params': ({},), 'std_test_score': array([ 7.4892565]), 'mean_train_score': array([-6.00134765]), 'std_train_score': array([ 6.50416173]), 'split1_test_score': array([-15.73679049]), 'split1_train_score': array([-12.04401384]), 'mean_fit_time': array([ 0.16555452]), 'split2_test_score': array([ 0.45898484]), 'mean_score_time': array([ 0.01333016]), 'split0_test_score': array([-13.01480279]), 'split0_train_score': array([-12.95117749]), 'split3_train_score': array([ 0.48974944]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-6.9486424]), 'split3_test_score': array([ 0.49803886]), 'std_score_time': array([ 0.00412697])}
GREP_ME***Best params of [PassiveAggressiveRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [PassiveAggressiveRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-6.94864239608
####################################################################################
################# Running the iteration 13  of the GridSearchCV ####################
####################################################################################
***Starting [Ridge] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.1s
[CV]  ................................................................
[CV] ................................................. , total=   1.1s
[CV]  ................................................................
[CV] ................................................. , total=   1.1s
GREP_ME***Results of [Ridge] estimatorrun are
{'std_fit_time': array([ 0.04339877]), 'split2_train_score': array([ 0.66966218]), 'params': ({},), 'std_test_score': array([ 0.0224511]), 'mean_train_score': array([ 0.67010232]), 'std_train_score': array([ 0.00451738]), 'split1_test_score': array([ 0.54589473]), 'split1_train_score': array([ 0.66366698]), 'mean_fit_time': array([ 1.07974499]), 'split2_test_score': array([ 0.52853352]), 'mean_score_time': array([ 0.00901896]), 'split0_test_score': array([ 0.49869199]), 'split0_train_score': array([ 0.67640218]), 'split3_train_score': array([ 0.67067793]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.53291838]), 'split3_test_score': array([ 0.55855329]), 'std_score_time': array([ 0.00224114])}
GREP_ME***Best params of [Ridge] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [Ridge] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.532918381517
####################################################################################
################# Running the iteration 14  of the GridSearchCV ####################
####################################################################################
***Starting [SGDRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
GREP_ME***Results of [SGDRegressor] estimatorrun are
{'std_fit_time': array([ 0.03891035]), 'split2_train_score': array([ -3.65064521e+31]), 'params': ({},), 'std_test_score': array([  1.18715249e+32]), 'mean_train_score': array([ -8.81870680e+31]), 'std_train_score': array([  1.30309872e+32]), 'split1_test_score': array([ -3.12251486e+30]), 'split1_train_score': array([ -2.46308691e+30]), 'mean_fit_time': array([ 0.15761423]), 'split2_test_score': array([ -3.17023692e+31]), 'mean_score_time': array([ 0.01482064]), 'split0_test_score': array([ -1.21583539e+30]), 'split0_train_score': array([ -1.22441803e+30]), 'split3_train_score': array([ -3.12554315e+32]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ -8.01983407e+31]), 'split3_test_score': array([ -2.84752643e+32]), 'std_score_time': array([ 0.00614486])}
GREP_ME***Best params of [SGDRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SGDRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-8.01983407344e+31
####################################################################################
################# Running the iteration 15  of the GridSearchCV ####################
####################################################################################
***Starting [OrthogonalMatchingPursuit] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
GREP_ME***Results of [OrthogonalMatchingPursuit] estimatorrun are
{'std_fit_time': array([ 0.05940712]), 'split2_train_score': array([ 0.63319152]), 'params': ({},), 'std_test_score': array([ 0.0172269]), 'mean_train_score': array([ 0.63188461]), 'std_train_score': array([ 0.0063487]), 'split1_test_score': array([ 0.55679599]), 'split1_train_score': array([ 0.62151473]), 'mean_fit_time': array([ 0.31416309]), 'split2_test_score': array([ 0.54112908]), 'mean_score_time': array([ 0.00544584]), 'split0_test_score': array([ 0.51802052]), 'split0_train_score': array([ 0.638752]), 'split3_train_score': array([ 0.63408018]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.54460718]), 'split3_test_score': array([ 0.56248312]), 'std_score_time': array([ 0.00255542])}
GREP_ME***Best params of [OrthogonalMatchingPursuit] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [OrthogonalMatchingPursuit] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.544607176657
####################################################################################
################# Running the iteration 16  of the GridSearchCV ####################
####################################################################################
***Starting [RANSACRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=  23.5s
[CV]  ................................................................
[CV] ................................................. , total=  24.1s
[CV]  ................................................................
[CV] ................................................. , total=  24.9s
GREP_ME***Results of [RANSACRegressor] estimatorrun are
{'std_fit_time': array([ 0.65474852]), 'split2_train_score': array([-0.10451789]), 'params': ({},), 'std_test_score': array([ 0.18318733]), 'mean_train_score': array([ 0.03754554]), 'std_train_score': array([ 0.13187164]), 'split1_test_score': array([-0.19720206]), 'split1_train_score': array([ 0.00697196]), 'mean_fit_time': array([ 24.43478328]), 'split2_test_score': array([-0.24303956]), 'mean_score_time': array([ 0.00349152]), 'split0_test_score': array([-0.21166843]), 'split0_train_score': array([-0.00563883]), 'split3_train_score': array([ 0.25336692]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.11197361]), 'split3_test_score': array([ 0.20401558]), 'std_score_time': array([ 0.0014497])}
GREP_ME***Best params of [RANSACRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RANSACRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.11197361361
####################################################################################
################# Running the iteration 17  of the GridSearchCV ####################
####################################################################################
***Starting [KNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
GREP_ME***Results of [KNeighborsRegressor] estimatorrun are
{'std_fit_time': array([ 0.04041298]), 'split2_train_score': array([ 0.65661863]), 'params': ({},), 'std_test_score': array([ 0.01464695]), 'mean_train_score': array([ 0.6596717]), 'std_train_score': array([ 0.00608746]), 'split1_test_score': array([ 0.48922254]), 'split1_train_score': array([ 0.65671558]), 'mean_fit_time': array([ 0.19166982]), 'split2_test_score': array([ 0.50003684]), 'mean_score_time': array([ 0.27546692]), 'split0_test_score': array([ 0.4630763]), 'split0_train_score': array([ 0.67016341]), 'split3_train_score': array([ 0.65518919]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.48747733]), 'split3_test_score': array([ 0.49757365]), 'std_score_time': array([ 0.04948974])}
GREP_ME***Best params of [KNeighborsRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [KNeighborsRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.487477331783
####################################################################################
################# Running the iteration 18  of the GridSearchCV ####################
####################################################################################
***Starting [RadiusNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
GREP_ME***Error caught for  [RadiusNeighborsRegressor] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/data_mining/quick_solver.py in <module>()
    548         './dataset/test_names-td_cat-tdidf.csv',
    549         './dataset/test_names-tdidf_cat-count.csv',
    550         './dataset/test_names-tdidf_cat-td.csv',
    551         './dataset/test_names-tdidf_cat-tdidf.csv'
    552     ]
--> 553     for file in files: simple_experiment(file)
    554 
    555 
    556 
    557 

...........................................................................
/home/user/data_mining/quick_solver.py in simple_experiment(file_path='./dataset/test_names-count_cat-count.csv')
    505             new_file = open(trg, "w")
    506             sys.stdout = new_file
    507             # set the itterator run to start from
    508             global itter_start
    509             itter_start = 0
--> 510             run_for_many(x_crr, y_crr, dsc, models_reg, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns]
        y_crr = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        dsc = 'quickRegtest_names-count_cat-count'
        models_reg = [AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
    511             new_file.close()
    512             
    513     
    514     desc = "quickClass" + file_path.replace('.','').replace('/','').replace('dataset','').replace('csv','')

...........................................................................
/home/user/data_mining/quick_solver.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns], y=0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64, cl_n='quickRegtest_names-count_cat-count', models=[AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...})
    397     errors = []
    398     errors_ind = []
    399     print("#########################################")
    400     print("###Starting all estimators for cl: " + str(cl_n))
    401     print("#########################################")
--> 402     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns]
        y = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        models = [AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
        errors = []
        errors_ind = []
        precomp_pipe = []
    403     print("#########################################")
    404     print("###Finished all estimators for cl: " + str(cl_n))
    405     print("#########################################")
    406 

...........................................................................
/home/user/data_mining/quick_solver.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns], y=3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64, models=[AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, results={'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -0.16685387721548009}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57518779096712969}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56332521206814479}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55152394278562078}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57554076673809429}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48607928137186296}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.4874773317830659}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50793570069624272}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.51760515103653992}, 'LinearRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50789139867366762}, ...}, errors=[], errors_ind=[], precomp_pipe=[])
    386     for filename in os.listdir("./tmp"):
    387         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    388         # for model in models:
    389         for model in models:
    390             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 391                             results, errors, errors_ind)
        results = {'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -0.16685387721548009}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57518779096712969}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56332521206814479}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55152394278562078}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57554076673809429}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48607928137186296}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.4874773317830659}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50793570069624272}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.51760515103653992}, 'LinearRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50789139867366762}, ...}
        errors = []
        errors_ind = []
    392 
    393 ## Function for trigrering gridserach and priting results
    394 def run_for_many(x, y, cl_n, models, models_cfg):
    395     results = {}

...........................................................................
/home/user/data_mining/quick_solver.py in run_grid_search(x=array([[  4.27000000e+02,   3.00000000e+02,   1....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64, model=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), model_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -0.16685387721548009}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57518779096712969}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56332521206814479}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55152394278562078}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57554076673809429}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48607928137186296}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.4874773317830659}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50793570069624272}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.51760515103653992}, 'LinearRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50789139867366762}, ...}, errors=[], errors_ind=[])
    299     print("##param_grid##")
    300     print(param_grid)
    301     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    302     # run the estimator, except exceptions, sape errors
    303     try:
--> 304         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[  4.27000000e+02,   3.00000000e+02,   1....000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64
    305         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    306         print(estimator.cv_results_)
    307         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    308         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[  4.27000000e+02,   3.00000000e+02,   1....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[  4.27000000e+02,   3.00000000e+02,   1....000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[  4.27000000e+02,   3.00000000e+02,   1....000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sat Apr 22 18:53:13 2017
PID: 18195                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[  4.27000000e+02,   3.00000000e+02,   1...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[  4.27000000e+02,   3.00000000e+02,   1...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[  4.27000000e+02,   3.00000000e+02,   1...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=3988        973613
3527       5438911
3296      ...     13881317
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([1203, 1204, 1205, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1200, 1201, 1202]), verbose=2, parameters={}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    255                              " numeric value. (Hint: if using 'raise', please"
    256                              " make sure that it has been spelled correctly.)")
    257 
    258     else:
    259         fit_time = time.time() - start_time
--> 260         test_score = _score(estimator, X_test, y_test, scorer)
        test_score = undefined
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]])
        y_test = 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64
        scorer = <function _passthrough_scorer>
    261         score_time = time.time() - start_time - fit_time
    262         if return_train_score:
    263             train_score = _score(estimator, X_train, y_train, scorer)
    264 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X_test=memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]]), y_test=3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>)
    283 def _score(estimator, X_test, y_test, scorer):
    284     """Compute the score of an estimator on a given test set."""
    285     if y_test is None:
    286         score = scorer(estimator, X_test)
    287     else:
--> 288         score = scorer(estimator, X_test, y_test)
        score = undefined
        scorer = <function _passthrough_scorer>
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]])
        y_test = 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64
    289     if hasattr(score, 'item'):
    290         try:
    291             # e.g. unwrap memmapped scalars
    292             score = score.item()

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/scorer.py in _passthrough_scorer(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), *args=(memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]]), 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64), **kwargs={})
    214     return scorer
    215 
    216 
    217 def _passthrough_scorer(estimator, *args, **kwargs):
    218     """Function that wraps estimator.score"""
--> 219     return estimator.score(*args, **kwargs)
        estimator.score = <function Pipeline.score>
        args = (memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]]), 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64)
        kwargs = {}
    220 
    221 
    222 def check_scoring(estimator, scoring=None, allow_none=False):
    223     """Determine scorer from user options.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/metaestimators.py in <lambda>(*args=(memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]]), 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64), **kwargs={})
     49                     break
     50             else:
     51                 attrgetter(self.delegate_names[-1])(obj)
     52 
     53         # lambda, but not partial, allows help() to work with update_wrapper
---> 54         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)
        args = (memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]]), 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64)
        kwargs = {}
     55         # update the docstring of the returned function
     56         update_wrapper(out, self.fn)
     57         return out
     58 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in score(self=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]]), y=3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64)
    500         """
    501         Xt = X
    502         for name, transform in self.steps[:-1]:
    503             if transform is not None:
    504                 Xt = transform.transform(Xt)
--> 505         return self.steps[-1][-1].score(Xt, y)
        self.steps.score = undefined
        Xt = memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]])
        y = 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64
    506 
    507     @property
    508     def classes_(self):
    509         return self.steps[-1][-1].classes_

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/base.py in score(self=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), X=memmap([[   427.,    300.,    162., ...,      0.... 655.,    510., ...,      0.,      0.,      0.]]), y=3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64, sample_weight=None)
    382             R^2 of self.predict(X) wrt. y.
    383         """
    384 
    385         from .metrics import r2_score
    386         return r2_score(y, self.predict(X), sample_weight=sample_weight,
--> 387                         multioutput='variance_weighted')
    388 
    389 
    390 ###############################################################################
    391 class ClusterMixin(object):

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in r2_score(y_true=3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64, y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), sample_weight=None, multioutput='variance_weighted')
    450     >>> y_pred = [3,2,1]
    451     >>> r2_score(y_true, y_pred)
    452     -3.0
    453     """
    454     y_type, y_true, y_pred, multioutput = _check_reg_targets(
--> 455         y_true, y_pred, multioutput)
        y_true = 3988        973613
3527       5438911
3296      ...            0
Name: worldwide_gross, dtype: int64
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
        multioutput = 'variance_weighted'
    456 
    457     if sample_weight is not None:
    458         sample_weight = column_or_1d(sample_weight)
    459         weight = sample_weight[:, np.newaxis]

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in _check_reg_targets(y_true=array([  973613,  5438911,  8864699, ..., 92111551,  8692898,        0]), y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), multioutput='variance_weighted')
     71         correct keyword.
     72 
     73     """
     74     check_consistent_length(y_true, y_pred)
     75     y_true = check_array(y_true, ensure_2d=False)
---> 76     y_pred = check_array(y_pred, ensure_2d=False)
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
     77 
     78     if y_true.ndim == 1:
     79         y_true = y_true.reshape((-1, 1))
     80 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in check_array(array=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), accept_sparse=None, dtype=None, order=None, copy=False, force_all_finite=True, ensure_2d=False, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=False, estimator=None)
    402             array = array.astype(np.float64)
    403         if not allow_nd and array.ndim >= 3:
    404             raise ValueError("Found array with dim %d. %s expected <= 2."
    405                              % (array.ndim, estimator_name))
    406         if force_all_finite:
--> 407             _assert_all_finite(array)
        array = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
    408 
    409     shape_repr = _shape_repr(array.shape)
    410     if ensure_min_samples > 0:
    411         n_samples = _num_samples(array)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in _assert_all_finite(X=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]))
     53     # everything is finite; fall back to O(n) space np.isfinite to prevent
     54     # false positives from overflow in sum method.
     55     if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())
     56             and not np.isfinite(X).all()):
     57         raise ValueError("Input contains NaN, infinity"
---> 58                          " or a value too large for %r." % X.dtype)
        X.dtype = dtype('float64')
     59 
     60 
     61 def assert_all_finite(X):
     62     """Throw a ValueError if X contains NaN or infinity.

ValueError: Input contains NaN, infinity or a value too large for dtype('float64').
___________________________________________________________________________
####################################################################################
################# Running the iteration 19  of the GridSearchCV ####################
####################################################################################
***Starting [MLPRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   4.5s
GREP_ME***Results of [MLPRegressor] estimatorrun are
{'std_fit_time': array([ 0.37503684]), 'split2_train_score': array([ 0.55618276]), 'params': ({},), 'std_test_score': array([ 0.02257205]), 'mean_train_score': array([ 0.54977599]), 'std_train_score': array([ 0.00715585]), 'split1_test_score': array([ 0.58210231]), 'split1_train_score': array([ 0.53937662]), 'mean_fit_time': array([ 5.03296471]), 'split2_test_score': array([ 0.52877182]), 'mean_score_time': array([ 0.01611185]), 'split0_test_score': array([ 0.52682872]), 'split0_train_score': array([ 0.55665392]), 'split3_train_score': array([ 0.54689065]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.54832126]), 'split3_test_score': array([ 0.55558218]), 'std_score_time': array([ 0.00684524])}
GREP_ME***Best params of [MLPRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [MLPRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.548321258522
####################################################################################
################# Running the iteration 20  of the GridSearchCV ####################
####################################################################################
***Starting [SVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=  13.7s
[CV]  ................................................................
[CV] ................................................. , total=  13.9s
GREP_ME***Results of [SVR] estimatorrun are
{'std_fit_time': array([ 0.48339561]), 'split2_train_score': array([-0.13116128]), 'params': ({},), 'std_test_score': array([ 0.02436937]), 'mean_train_score': array([-0.13189521]), 'std_train_score': array([ 0.00699321]), 'split1_test_score': array([-0.17317847]), 'split1_train_score': array([-0.12218011]), 'mean_fit_time': array([ 10.89125377]), 'split2_test_score': array([-0.13181321]), 'mean_score_time': array([ 3.62520242]), 'split0_test_score': array([-0.12079378]), 'split0_train_score': array([-0.13231828]), 'split3_train_score': array([-0.14192115]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.13351268]), 'split3_test_score': array([-0.10826527]), 'std_score_time': array([ 0.31588329])}
GREP_ME***Best params of [SVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.133512683661
####################################################################################
################# Running the iteration 21  of the GridSearchCV ####################
####################################################################################
***Starting [LinearSVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.6s
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
GREP_ME***Results of [LinearSVR] estimatorrun are
{'std_fit_time': array([ 0.09605937]), 'split2_train_score': array([ 0.29032231]), 'params': ({},), 'std_test_score': array([ 0.2103472]), 'mean_train_score': array([ 0.08734043]), 'std_train_score': array([ 0.20310945]), 'split1_test_score': array([-0.14989249]), 'split1_train_score': array([-0.09824031]), 'mean_fit_time': array([ 0.57839334]), 'split2_test_score': array([ 0.25089262]), 'mean_score_time': array([ 0.0100686]), 'split0_test_score': array([-0.12464543]), 'split0_train_score': array([-0.13257156]), 'split3_train_score': array([ 0.2898513]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.07181495]), 'split3_test_score': array([ 0.3109051]), 'std_score_time': array([ 0.00418571])}
GREP_ME***Best params of [LinearSVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearSVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.0718149498602
####################################################################################
################# Running the iteration 22  of the GridSearchCV ####################
####################################################################################
***Starting [NuSVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   8.3s
[CV]  ................................................................
[CV] ................................................. , total=   8.4s
[CV]  ................................................................
[CV] ................................................. , total=   8.7s
GREP_ME***Results of [NuSVR] estimatorrun are
{'std_fit_time': array([ 0.24935424]), 'split2_train_score': array([-0.05222584]), 'params': ({},), 'std_test_score': array([ 0.01721626]), 'mean_train_score': array([-0.05253557]), 'std_train_score': array([ 0.00159126]), 'split1_test_score': array([-0.0825925]), 'split1_train_score': array([-0.05061494]), 'mean_fit_time': array([ 6.8700763]), 'split2_test_score': array([-0.05275429]), 'mean_score_time': array([ 1.77896595]), 'split0_test_score': array([-0.04214021]), 'split0_train_score': array([-0.05226216]), 'split3_train_score': array([-0.05503935]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.05411415]), 'split3_test_score': array([-0.03896959]), 'std_score_time': array([ 0.10760209])}
GREP_ME***Best params of [NuSVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [NuSVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.0541141499109
####################################################################################
################# Running the iteration 23  of the GridSearchCV ####################
####################################################################################
***Starting [DecisionTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
GREP_ME***Results of [DecisionTreeRegressor] estimatorrun are
{'std_fit_time': array([ 0.03790894]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.04960505]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.30924982]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 0.46646208]), 'split2_test_score': array([ 0.34088108]), 'mean_score_time': array([ 0.00283158]), 'split0_test_score': array([ 0.30480027]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.34580068]), 'split3_test_score': array([ 0.42827155]), 'std_score_time': array([ 0.00016385])}
GREP_ME***Best params of [DecisionTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [DecisionTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.345800679174
####################################################################################
################# Running the iteration 24  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [ExtraTreeRegressor] estimatorrun are
{'std_fit_time': array([ 0.07416482]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.06980284]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.43585346]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 0.51951027]), 'split2_test_score': array([ 0.3025584]), 'mean_score_time': array([ 0.00302994]), 'split0_test_score': array([ 0.26934882]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.3540823]), 'split3_test_score': array([ 0.40856851]), 'std_score_time': array([ 0.00028299])}
GREP_ME***Best params of [ExtraTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.354082298861
#########################################
###Finished all estimators for cl: quickRegtest_names-count_cat-count
#########################################
#########################################
#######Printing results for cl: quickRegtest_names-count_cat-count
#########################################
{'ElasticNet': {'score': 0.56332521206814479, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'RandomForestRegressor': {'score': 0.5636266547391855, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'RANSACRegressor': {'score': -0.11197361360991354, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'OrthogonalMatchingPursuit': {'score': 0.54460717665685532, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'DecisionTreeRegressor': {'score': 0.34580067917428559, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'Lasso': {'score': 0.50793570069624272, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'KNeighborsRegressor': {'score': 0.4874773317830659, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LinearSVR': {'score': 0.071814949860224103, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'SGDRegressor': {'score': -8.0198340734418342e+31, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'GradientBoostingRegressor': {'score': 0.57554076673809429, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'BaggingRegressor': {'score': 0.57518779096712969, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'ExtraTreesRegressor': {'score': 0.55152394278562078, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'ExtraTreeRegressor': {'score': 0.35408229886129183, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'PassiveAggressiveRegressor': {'score': -6.9486423960803139, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'SVR': {'score': -0.13351268366114272, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'Ridge': {'score': 0.53291838151733739, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'MLPRegressor': {'score': 0.5483212585221352, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'AdaBoostRegressor': {'score': -0.16685387721548009, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LassoLars': {'score': 0.51760515103653992, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LinearRegression': {'score': 0.50789139867366762, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'HuberRegressor': {'score': 0.48607928137186296, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'NuSVR': {'score': -0.054114149910903069, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}}
priting simply sorted numbers, grep them to find the best cfg or cl: quickRegtest_names-count_cat-count
[-8.0198340734418342e+31, -6.9486423960803139, -0.16685387721548009, -0.13351268366114272, -0.11197361360991354, -0.054114149910903069, 0.071814949860224103, 0.34580067917428559, 0.35408229886129183, 0.48607928137186296, 0.4874773317830659, 0.50789139867366762, 0.50793570069624272, 0.51760515103653992, 0.53291838151733739, 0.54460717665685532, 0.5483212585221352, 0.55152394278562078, 0.56332521206814479, 0.5636266547391855, 0.57518779096712969, 0.57554076673809429]
