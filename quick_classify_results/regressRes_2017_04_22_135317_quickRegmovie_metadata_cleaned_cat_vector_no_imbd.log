#########################################
###Starting all estimators for cl: quickRegmovie_metadata_cleaned_cat_vector_no_imbd
#########################################
####################################################################################
################# Runing the itteration 1  of pipeline precomp      ###############
####################################################################################
| preprocessor:dummy | transfomer: dummy | reducer: dummy
{}
Starting precomp pipline for {}
Finished precomp pipline for {}
Pre-computation of pre-processing models completed in 0:00:00.028992
####################################################################################
################# Running the iteration 2  of the GridSearchCV ####################
####################################################################################
***Starting [AdaBoostRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [AdaBoostRegressor] estimatorrun are
{'std_train_score': array([ 0.16897507]), 'mean_test_score': array([ 0.2477351]), 'split1_train_score': array([ 0.14710035]), 'params': ({},), 'mean_score_time': array([ 0.00710028]), 'std_test_score': array([ 0.14558245]), 'std_score_time': array([ 0.00234296]), 'mean_fit_time': array([ 0.30864298]), 'split1_test_score': array([ 0.219953]), 'split3_test_score': array([ 0.02095625]), 'std_fit_time': array([ 0.09998662]), 'split0_test_score': array([ 0.3843927]), 'mean_train_score': array([ 0.37284235]), 'split2_train_score': array([ 0.51132563]), 'split0_train_score': array([ 0.55836283]), 'split3_train_score': array([ 0.27458058]), 'split2_test_score': array([ 0.36563847]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [AdaBoostRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [AdaBoostRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.247735104365
####################################################################################
################# Running the iteration 3  of the GridSearchCV ####################
####################################################################################
***Starting [BaggingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
GREP_ME***Results of [BaggingRegressor] estimatorrun are
{'std_train_score': array([ 0.0023779]), 'mean_test_score': array([ 0.54921139]), 'split1_train_score': array([ 0.92245212]), 'params': ({},), 'mean_score_time': array([ 0.01078808]), 'std_test_score': array([ 0.02048341]), 'std_score_time': array([ 0.00075654]), 'mean_fit_time': array([ 0.42081183]), 'split1_test_score': array([ 0.54741998]), 'split3_test_score': array([ 0.58299477]), 'std_fit_time': array([ 0.00813209]), 'split0_test_score': array([ 0.52989793]), 'mean_train_score': array([ 0.9214168]), 'split2_train_score': array([ 0.9237183]), 'split0_train_score': array([ 0.91743736]), 'split3_train_score': array([ 0.92205943]), 'split2_test_score': array([ 0.53653289]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [BaggingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [BaggingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.549211394115
####################################################################################
################# Running the iteration 4  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreesRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
GREP_ME***Results of [ExtraTreesRegressor] estimatorrun are
{'std_train_score': array([ 0.]), 'mean_test_score': array([ 0.55400292]), 'split1_train_score': array([ 1.]), 'params': ({},), 'mean_score_time': array([ 0.00563216]), 'std_test_score': array([ 0.02154977]), 'std_score_time': array([  6.79089192e-05]), 'mean_fit_time': array([ 0.36481774]), 'split1_test_score': array([ 0.55927954]), 'split3_test_score': array([ 0.58654342]), 'std_fit_time': array([ 0.01164101]), 'split0_test_score': array([ 0.52981345]), 'mean_train_score': array([ 1.]), 'split2_train_score': array([ 1.]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'split2_test_score': array([ 0.54037529]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [ExtraTreesRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreesRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.55400292463
####################################################################################
################# Running the iteration 5  of the GridSearchCV ####################
####################################################################################
***Starting [GradientBoostingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.0s
[CV]  ................................................................
[CV] ................................................. , total=   1.0s
GREP_ME***Results of [GradientBoostingRegressor] estimatorrun are
{'std_train_score': array([ 0.00933181]), 'mean_test_score': array([ 0.57302892]), 'split1_train_score': array([ 0.73237295]), 'params': ({},), 'mean_score_time': array([ 0.00383896]), 'std_test_score': array([ 0.0206843]), 'std_score_time': array([  7.23071657e-05]), 'mean_fit_time': array([ 0.96613002]), 'split1_test_score': array([ 0.56632387]), 'split3_test_score': array([ 0.59161578]), 'std_fit_time': array([ 0.00931424]), 'split0_test_score': array([ 0.54208459]), 'mean_train_score': array([ 0.74692807]), 'split2_train_score': array([ 0.74775988]), 'split0_train_score': array([ 0.75835169]), 'split3_train_score': array([ 0.74922777]), 'split2_test_score': array([ 0.59209144]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [GradientBoostingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [GradientBoostingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.573028918598
####################################################################################
################# Running the iteration 6  of the GridSearchCV ####################
####################################################################################
***Starting [RandomForestRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [RandomForestRegressor] estimatorrun are
{'std_train_score': array([ 0.00580091]), 'mean_test_score': array([ 0.53595138]), 'split1_train_score': array([ 0.91322225]), 'params': ({},), 'mean_score_time': array([ 0.00507104]), 'std_test_score': array([ 0.02161517]), 'std_score_time': array([  3.01189294e-05]), 'mean_fit_time': array([ 0.38453871]), 'split1_test_score': array([ 0.54823892]), 'split3_test_score': array([ 0.5551799]), 'std_fit_time': array([ 0.00256336]), 'split0_test_score': array([ 0.4995595]), 'mean_train_score': array([ 0.91729775]), 'split2_train_score': array([ 0.92420836]), 'split0_train_score': array([ 0.91012618]), 'split3_train_score': array([ 0.9216342]), 'split2_test_score': array([ 0.5408272]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [RandomForestRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RandomForestRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.535951378922
####################################################################################
################# Running the iteration 7  of the GridSearchCV ####################
####################################################################################
***Starting [ElasticNet] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.3s
GREP_ME***Results of [ElasticNet] estimatorrun are
{'std_train_score': array([ 0.00591908]), 'mean_test_score': array([ 0.55954692]), 'split1_train_score': array([ 0.5659824]), 'params': ({},), 'mean_score_time': array([ 0.01146603]), 'std_test_score': array([ 0.02113096]), 'std_score_time': array([ 0.00708872]), 'mean_fit_time': array([ 1.41561115]), 'split1_test_score': array([ 0.563394]), 'split3_test_score': array([ 0.59084788]), 'std_fit_time': array([ 0.09389035]), 'split0_test_score': array([ 0.53265011]), 'mean_train_score': array([ 0.56855827]), 'split2_train_score': array([ 0.57133591]), 'split0_train_score': array([ 0.57638744]), 'split3_train_score': array([ 0.56052735]), 'split2_test_score': array([ 0.55129571]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [ElasticNet] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ElasticNet] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.559546924434
####################################################################################
################# Running the iteration 8  of the GridSearchCV ####################
####################################################################################
***Starting [HuberRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
GREP_ME***Results of [HuberRegressor] estimatorrun are
{'std_train_score': array([ 0.00530885]), 'mean_test_score': array([ 0.48966844]), 'split1_train_score': array([ 0.49043316]), 'params': ({},), 'mean_score_time': array([ 0.00229561]), 'std_test_score': array([ 0.02775404]), 'std_score_time': array([ 0.00052689]), 'mean_fit_time': array([ 0.18756509]), 'split1_test_score': array([ 0.45089426]), 'split3_test_score': array([ 0.52640403]), 'std_fit_time': array([ 0.06051677]), 'split0_test_score': array([ 0.48005461]), 'mean_train_score': array([ 0.48755365]), 'split2_train_score': array([ 0.48642575]), 'split0_train_score': array([ 0.49380658]), 'split3_train_score': array([ 0.47954912]), 'split2_test_score': array([ 0.50132086]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [HuberRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [HuberRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.489668439662
####################################################################################
################# Running the iteration 9  of the GridSearchCV ####################
####################################################################################
***Starting [Lars] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
GREP_ME***Results of [Lars] estimatorrun are
{'std_train_score': array([  2.45081168e+10]), 'mean_test_score': array([ -4.07146693e+35]), 'split1_train_score': array([ 0.5792169]), 'params': ({},), 'mean_score_time': array([ 0.01369768]), 'std_test_score': array([  7.03430990e+35]), 'std_score_time': array([ 0.00796503]), 'mean_fit_time': array([ 0.16305757]), 'split1_test_score': array([ -3.56512728e+20]), 'split3_test_score': array([ -8.04447637e+32]), 'std_fit_time': array([ 0.02640807]), 'split0_test_score': array([ -2.25822373e+33]), 'mean_train_score': array([ -1.41614727e+10]), 'split2_train_score': array([ -5.66107743e+10]), 'split0_train_score': array([-20676260.64718987]), 'split3_train_score': array([-14440276.63769015]), 'split2_test_score': array([ -1.62552410e+36]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [Lars] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [Lars] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-4.07146692935e+35
####################################################################################
################# Running the iteration 10  of the GridSearchCV ####################
####################################################################################
***Starting [Lasso] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.6s
[CV]  ................................................................
[CV] ................................................. , total=   1.6s
[CV]  ................................................................
[CV] ................................................. , total=   1.7s
[CV]  ................................................................
[CV] ................................................. , total=   1.6s
GREP_ME***Results of [Lasso] estimatorrun are
{'std_train_score': array([ 0.00561313]), 'mean_test_score': array([ 0.56325628]), 'split1_train_score': array([ 0.5800642]), 'params': ({},), 'mean_score_time': array([ 0.01287615]), 'std_test_score': array([ 0.02185941]), 'std_score_time': array([ 0.00469811]), 'mean_fit_time': array([ 1.5961048]), 'split1_test_score': array([ 0.56599881]), 'split3_test_score': array([ 0.59612932]), 'std_fit_time': array([ 0.03846886]), 'split0_test_score': array([ 0.53572884]), 'mean_train_score': array([ 0.57994488]), 'split2_train_score': array([ 0.58325237]), 'split0_train_score': array([ 0.58562076]), 'split3_train_score': array([ 0.57084217]), 'split2_test_score': array([ 0.55516816]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [Lasso] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [Lasso] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.563256284694
####################################################################################
################# Running the iteration 11  of the GridSearchCV ####################
####################################################################################
***Starting [LassoLars] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
GREP_ME***Results of [LassoLars] estimatorrun are
{'std_train_score': array([ 0.00543603]), 'mean_test_score': array([ 0.56282384]), 'split1_train_score': array([ 0.57865192]), 'params': ({},), 'mean_score_time': array([ 0.00211406]), 'std_test_score': array([ 0.02144642]), 'std_score_time': array([ 0.00020476]), 'mean_fit_time': array([ 0.15798789]), 'split1_test_score': array([ 0.56498286]), 'split3_test_score': array([ 0.59620577]), 'std_fit_time': array([ 0.03410386]), 'split0_test_score': array([ 0.53837497]), 'mean_train_score': array([ 0.57857632]), 'split2_train_score': array([ 0.58171695]), 'split0_train_score': array([ 0.58415014]), 'split3_train_score': array([ 0.56978628]), 'split2_test_score': array([ 0.55173175]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [LassoLars] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LassoLars] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.562823838053
####################################################################################
################# Running the iteration 12  of the GridSearchCV ####################
####################################################################################
***Starting [LinearRegression] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [LinearRegression] estimatorrun are
{'std_train_score': array([ 0.00561447]), 'mean_test_score': array([ 0.56305046]), 'split1_train_score': array([ 0.58006448]), 'params': ({},), 'mean_score_time': array([ 0.00276613]), 'std_test_score': array([ 0.02218856]), 'std_score_time': array([ 0.00076348]), 'mean_fit_time': array([ 0.11299014]), 'split1_test_score': array([ 0.5658568]), 'split3_test_score': array([ 0.59644721]), 'std_fit_time': array([ 0.01317046]), 'split0_test_score': array([ 0.53518215]), 'mean_train_score': array([ 0.57994979]), 'split2_train_score': array([ 0.58325618]), 'split0_train_score': array([ 0.58563155]), 'split3_train_score': array([ 0.57084697]), 'split2_test_score': array([ 0.55471569]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [LinearRegression] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearRegression] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.563050463485
####################################################################################
################# Running the iteration 13  of the GridSearchCV ####################
####################################################################################
***Starting [PassiveAggressiveRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.0s
[CV]  ................................................................
[CV] ................................................. , total=   0.0s
[CV]  ................................................................
[CV] ................................................. , total=   0.0s
GREP_ME***Results of [PassiveAggressiveRegressor] estimatorrun are
{'std_train_score': array([ 0.20094825]), 'mean_test_score': array([ 0.31078838]), 'split1_train_score': array([ 0.12060633]), 'params': ({},), 'mean_score_time': array([ 0.01284736]), 'std_test_score': array([ 0.19809348]), 'std_score_time': array([ 0.00259847]), 'mean_fit_time': array([ 0.03351885]), 'split1_test_score': array([ 0.11365165]), 'split3_test_score': array([ 0.53319908]), 'std_fit_time': array([ 0.00052293]), 'split0_test_score': array([ 0.11333351]), 'mean_train_score': array([ 0.32002831]), 'split2_train_score': array([ 0.52829583]), 'split0_train_score': array([ 0.11769497]), 'split3_train_score': array([ 0.5135161]), 'split2_test_score': array([ 0.48296929]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [PassiveAggressiveRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [PassiveAggressiveRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.310788384671
####################################################################################
################# Running the iteration 14  of the GridSearchCV ####################
####################################################################################
***Starting [Ridge] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
GREP_ME***Results of [Ridge] estimatorrun are
{'std_train_score': array([ 0.00570738]), 'mean_test_score': array([ 0.56359508]), 'split1_train_score': array([ 0.57859902]), 'params': ({},), 'mean_score_time': array([ 0.00453436]), 'std_test_score': array([ 0.02220956]), 'std_score_time': array([ 0.00332466]), 'mean_fit_time': array([ 0.39164251]), 'split1_test_score': array([ 0.56597585]), 'split3_test_score': array([ 0.59734817]), 'std_fit_time': array([ 0.02946481]), 'split0_test_score': array([ 0.53616621]), 'mean_train_score': array([ 0.57888259]), 'split2_train_score': array([ 0.58203573]), 'split0_train_score': array([ 0.58506873]), 'split3_train_score': array([ 0.56982689]), 'split2_test_score': array([ 0.55489009]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [Ridge] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [Ridge] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.563595079608
####################################################################################
################# Running the iteration 15  of the GridSearchCV ####################
####################################################################################
***Starting [SGDRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.0s
[CV]  ................................................................
[CV] ................................................. , total=   0.0s
[CV]  ................................................................
[CV] ................................................. , total=   0.0s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [SGDRegressor] estimatorrun are
{'std_train_score': array([  1.64685330e+32]), 'mean_test_score': array([ -1.12844070e+32]), 'split1_train_score': array([ -4.12860426e+32]), 'params': ({},), 'mean_score_time': array([ 0.01107699]), 'std_test_score': array([  1.07510983e+32]), 'std_score_time': array([ 0.00326721]), 'mean_fit_time': array([ 0.04083323]), 'split1_test_score': array([ -2.63648608e+32]), 'split3_test_score': array([ -7.73982500e+30]), 'std_fit_time': array([ 0.01009212]), 'split0_test_score': array([ -1.44913546e+31]), 'mean_train_score': array([ -1.41839949e+32]), 'split2_train_score': array([ -1.35286254e+32]), 'split0_train_score': array([ -1.26596692e+31]), 'split3_train_score': array([ -6.55344830e+30]), 'split2_test_score': array([ -1.65496494e+32]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [SGDRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SGDRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-1.12844070483e+32
####################################################################################
################# Running the iteration 16  of the GridSearchCV ####################
####################################################################################
***Starting [OrthogonalMatchingPursuit] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [OrthogonalMatchingPursuit] estimatorrun are
{'std_train_score': array([ 0.00535215]), 'mean_test_score': array([ 0.55960927]), 'split1_train_score': array([ 0.57253357]), 'params': ({},), 'mean_score_time': array([ 0.00939846]), 'std_test_score': array([ 0.0222518]), 'std_score_time': array([ 0.00156046]), 'mean_fit_time': array([ 0.05379158]), 'split1_test_score': array([ 0.56118716]), 'split3_test_score': array([ 0.59400246]), 'std_fit_time': array([ 0.00284784]), 'split0_test_score': array([ 0.53301469]), 'mean_train_score': array([ 0.57308355]), 'split2_train_score': array([ 0.57676888]), 'split0_train_score': array([ 0.57843623]), 'split3_train_score': array([ 0.56459551]), 'split2_test_score': array([ 0.55023278]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [OrthogonalMatchingPursuit] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [OrthogonalMatchingPursuit] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.55960927221
####################################################################################
################# Running the iteration 17  of the GridSearchCV ####################
####################################################################################
***Starting [RANSACRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.5s
[CV]  ................................................................
[CV] ................................................. , total=   1.7s
[CV]  ................................................................
[CV] ................................................. , total=   1.7s
GREP_ME***Results of [RANSACRegressor] estimatorrun are
{'std_train_score': array([ 0.02657547]), 'mean_test_score': array([ 0.46836523]), 'split1_train_score': array([ 0.43436196]), 'params': ({},), 'mean_score_time': array([ 0.0026865]), 'std_test_score': array([ 0.06445065]), 'std_score_time': array([ 0.00031593]), 'mean_fit_time': array([ 1.67683077]), 'split1_test_score': array([ 0.37377077]), 'split3_test_score': array([ 0.55519726]), 'std_fit_time': array([ 0.09631089]), 'split0_test_score': array([ 0.46526426]), 'mean_train_score': array([ 0.47424395]), 'split2_train_score': array([ 0.46753151]), 'split0_train_score': array([ 0.49033453]), 'split3_train_score': array([ 0.5047478]), 'split2_test_score': array([ 0.47922861]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [RANSACRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RANSACRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.46836522745
####################################################################################
################# Running the iteration 18  of the GridSearchCV ####################
####################################################################################
***Starting [KNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [KNeighborsRegressor] estimatorrun are
{'std_train_score': array([ 0.00686338]), 'mean_test_score': array([ 0.48455146]), 'split1_train_score': array([ 0.65922803]), 'params': ({},), 'mean_score_time': array([ 0.06468618]), 'std_test_score': array([ 0.03254512]), 'std_score_time': array([ 0.00038109]), 'mean_fit_time': array([ 0.03762305]), 'split1_test_score': array([ 0.50965621]), 'split3_test_score': array([ 0.52287908]), 'std_fit_time': array([ 0.0008305]), 'split0_test_score': array([ 0.44490902]), 'mean_train_score': array([ 0.65919336]), 'split2_train_score': array([ 0.66306251]), 'split0_train_score': array([ 0.66634728]), 'split3_train_score': array([ 0.64813561]), 'split2_test_score': array([ 0.46076152]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [KNeighborsRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [KNeighborsRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.484551459153
####################################################################################
################# Running the iteration 19  of the GridSearchCV ####################
####################################################################################
***Starting [RadiusNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
[CV]  ................................................................
GREP_ME***Error caught for  [RadiusNeighborsRegressor] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/data_mining/quick_solver.py in <module>()
    545         "./dataset/movie_metadata_cleaned_no_vector_num_only.csv",
    546         "./dataset/movie_metadata_cleaned_cat-name_vector_no_imbd.csv",
    547         "./dataset/movie_metadata_cleaned_cat_vector_no_imbd.csv",
    548         "./dataset/movie_metadata_cleaned_cat_min3_tfidf_no_imbd.csv"
    549     ]
--> 550     for file in files: simple_experiment(file)
    551 
    552 
    553 
    554 

...........................................................................
/home/user/data_mining/quick_solver.py in simple_experiment(file_path='./dataset/movie_metadata_cleaned_cat_vector_no_imbd.csv')
    505             new_file = open(trg, "w")
    506             sys.stdout = new_file
    507             # set the itterator run to start from
    508             global itter_start
    509             itter_start = 0
--> 510             run_for_many(x_crr, y_crr, dsc, models_reg, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 133 columns]
        y_crr = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        dsc = 'quickRegmovie_metadata_cleaned_cat_vector_no_imbd'
        models_reg = [AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lars(copy_X=True, eps=2.2204460492503131e-16, fi...itive=False,
   precompute='auto', verbose=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), ...]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
    511             new_file.close()
    512             
    513     
    514     desc = "quickClass" + file_path.replace('.','').replace('/','').replace('dataset','').replace('csv','')

...........................................................................
/home/user/data_mining/quick_solver.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 133 columns], y=0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64, cl_n='quickRegmovie_metadata_cleaned_cat_vector_no_imbd', models=[AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lars(copy_X=True, eps=2.2204460492503131e-16, fi...itive=False,
   precompute='auto', verbose=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), ...], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...})
    397     errors = []
    398     errors_ind = []
    399     print("#########################################")
    400     print("###Starting all estimators for cl: " + str(cl_n))
    401     print("#########################################")
--> 402     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 133 columns]
        y = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        models = [AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lars(copy_X=True, eps=2.2204460492503131e-16, fi...itive=False,
   precompute='auto', verbose=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), ...]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
        errors = []
        errors_ind = []
        precomp_pipe = []
    403     print("#########################################")
    404     print("###Finished all estimators for cl: " + str(cl_n))
    405     print("#########################################")
    406 

...........................................................................
/home/user/data_mining/quick_solver.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 133 columns], y=1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64, models=[AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lars(copy_X=True, eps=2.2204460492503131e-16, fi...itive=False,
   precompute='auto', verbose=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), ...], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, results={'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.24773510436473647}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.549211394114549}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55954692443400478}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55400292462980116}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57302891859832894}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.4896684396617389}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48455145915331366}, 'Lars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -4.0714669293539227e+35}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56325628469386146}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56282383805257474}, ...}, errors=[], errors_ind=[], precomp_pipe=[])
    386     for filename in os.listdir("./tmp"):
    387         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    388         # for model in models:
    389         for model in models:
    390             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 391                             results, errors, errors_ind)
        results = {'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.24773510436473647}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.549211394114549}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55954692443400478}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55400292462980116}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57302891859832894}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.4896684396617389}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48455145915331366}, 'Lars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -4.0714669293539227e+35}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56325628469386146}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56282383805257474}, ...}
        errors = []
        errors_ind = []
    392 
    393 ## Function for trigrering gridserach and priting results
    394 def run_for_many(x, y, cl_n, models, models_cfg):
    395     results = {}

...........................................................................
/home/user/data_mining/quick_solver.py in run_grid_search(x=array([[   782.,    494.,    408., ...,      0.,...1000.,    710., ...,      0.,      0.,      0.]]), y=1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64, model=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), model_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.24773510436473647}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.549211394114549}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55954692443400478}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55400292462980116}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.57302891859832894}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.4896684396617389}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48455145915331366}, 'Lars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -4.0714669293539227e+35}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56325628469386146}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.56282383805257474}, ...}, errors=[], errors_ind=[])
    299     print("##param_grid##")
    300     print(param_grid)
    301     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    302     # run the estimator, except exceptions, sape errors
    303     try:
--> 304         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[   782.,    494.,    408., ...,      0.,...1000.,    710., ...,      0.,      0.,      0.]])
        y = 1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64
    305         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    306         print(estimator.cv_results_)
    307         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    308         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[   782.,    494.,    408., ...,      0.,...1000.,    710., ...,      0.,      0.,      0.]]), y=1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[   782.,    494.,    408., ...,      0.,...1000.,    710., ...,      0.,      0.,      0.]])
        y = 1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[   782.,    494.,    408., ...,      0.,...1000.,    710., ...,      0.,      0.,      0.]]), y=1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sat Apr 22 13:53:37 2017
PID: 13531                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[   782.,    494.,    408., ...,      0....1000.,    710., ...,      0.,      0.,      0.]]), 1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[   782.,    494.,    408., ...,      0....1000.,    710., ...,      0.,      0.,      0.]]), 1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[   782.,    494.,    408., ...,      0....1000.,    710., ...,      0.,      0.,      0.]]), y=1382      80594860
2334      31063038
4290      ...    330780051
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([1203, 1204, 1205, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1200, 1201, 1202]), verbose=2, parameters={}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    255                              " numeric value. (Hint: if using 'raise', please"
    256                              " make sure that it has been spelled correctly.)")
    257 
    258     else:
    259         fit_time = time.time() - start_time
--> 260         test_score = _score(estimator, X_test, y_test, scorer)
        test_score = undefined
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]])
        y_test = 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64
        scorer = <function _passthrough_scorer>
    261         score_time = time.time() - start_time - fit_time
    262         if return_train_score:
    263             train_score = _score(estimator, X_train, y_train, scorer)
    264 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X_test=memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]]), y_test=1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>)
    283 def _score(estimator, X_test, y_test, scorer):
    284     """Compute the score of an estimator on a given test set."""
    285     if y_test is None:
    286         score = scorer(estimator, X_test)
    287     else:
--> 288         score = scorer(estimator, X_test, y_test)
        score = undefined
        scorer = <function _passthrough_scorer>
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]])
        y_test = 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64
    289     if hasattr(score, 'item'):
    290         try:
    291             # e.g. unwrap memmapped scalars
    292             score = score.item()

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/scorer.py in _passthrough_scorer(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), *args=(memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]]), 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64), **kwargs={})
    214     return scorer
    215 
    216 
    217 def _passthrough_scorer(estimator, *args, **kwargs):
    218     """Function that wraps estimator.score"""
--> 219     return estimator.score(*args, **kwargs)
        estimator.score = <function Pipeline.score>
        args = (memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]]), 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64)
        kwargs = {}
    220 
    221 
    222 def check_scoring(estimator, scoring=None, allow_none=False):
    223     """Determine scorer from user options.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/metaestimators.py in <lambda>(*args=(memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]]), 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64), **kwargs={})
     49                     break
     50             else:
     51                 attrgetter(self.delegate_names[-1])(obj)
     52 
     53         # lambda, but not partial, allows help() to work with update_wrapper
---> 54         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)
        args = (memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]]), 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64)
        kwargs = {}
     55         # update the docstring of the returned function
     56         update_wrapper(out, self.fn)
     57         return out
     58 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in score(self=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]]), y=1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64)
    500         """
    501         Xt = X
    502         for name, transform in self.steps[:-1]:
    503             if transform is not None:
    504                 Xt = transform.transform(Xt)
--> 505         return self.steps[-1][-1].score(Xt, y)
        self.steps.score = undefined
        Xt = memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]])
        y = 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64
    506 
    507     @property
    508     def classes_(self):
    509         return self.steps[-1][-1].classes_

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/base.py in score(self=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), X=memmap([[   782.,    494.,    408., ...,      0.... 372.,    108., ...,      0.,      0.,      0.]]), y=1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64, sample_weight=None)
    382             R^2 of self.predict(X) wrt. y.
    383         """
    384 
    385         from .metrics import r2_score
    386         return r2_score(y, self.predict(X), sample_weight=sample_weight,
--> 387                         multioutput='variance_weighted')
    388 
    389 
    390 ###############################################################################
    391 class ClusterMixin(object):

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in r2_score(y_true=1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64, y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), sample_weight=None, multioutput='variance_weighted')
    450     >>> y_pred = [3,2,1]
    451     >>> r2_score(y_true, y_pred)
    452     -3.0
    453     """
    454     y_type, y_true, y_pred, multioutput = _check_reg_targets(
--> 455         y_true, y_pred, multioutput)
        y_true = 1382      80594860
2334      31063038
4290      ...      9791282
Name: worldwide_gross, dtype: int64
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
        multioutput = 'variance_weighted'
    456 
    457     if sample_weight is not None:
    458         sample_weight = column_or_1d(sample_weight)
    459         weight = sample_weight[:, np.newaxis]

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in _check_reg_targets(y_true=array([ 80594860,  31063038,    102645, ..., 166307945,  12069719,
         9791282]), y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), multioutput='variance_weighted')
     71         correct keyword.
     72 
     73     """
     74     check_consistent_length(y_true, y_pred)
     75     y_true = check_array(y_true, ensure_2d=False)
---> 76     y_pred = check_array(y_pred, ensure_2d=False)
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
     77 
     78     if y_true.ndim == 1:
     79         y_true = y_true.reshape((-1, 1))
     80 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in check_array(array=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), accept_sparse=None, dtype=None, order=None, copy=False, force_all_finite=True, ensure_2d=False, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=False, estimator=None)
    402             array = array.astype(np.float64)
    403         if not allow_nd and array.ndim >= 3:
    404             raise ValueError("Found array with dim %d. %s expected <= 2."
    405                              % (array.ndim, estimator_name))
    406         if force_all_finite:
--> 407             _assert_all_finite(array)
        array = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
    408 
    409     shape_repr = _shape_repr(array.shape)
    410     if ensure_min_samples > 0:
    411         n_samples = _num_samples(array)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in _assert_all_finite(X=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]))
     53     # everything is finite; fall back to O(n) space np.isfinite to prevent
     54     # false positives from overflow in sum method.
     55     if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())
     56             and not np.isfinite(X).all()):
     57         raise ValueError("Input contains NaN, infinity"
---> 58                          " or a value too large for %r." % X.dtype)
        X.dtype = dtype('float64')
     59 
     60 
     61 def assert_all_finite(X):
     62     """Throw a ValueError if X contains NaN or infinity.

ValueError: Input contains NaN, infinity or a value too large for dtype('float64').
___________________________________________________________________________
####################################################################################
################# Running the iteration 20  of the GridSearchCV ####################
####################################################################################
***Starting [MLPRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.6s
[CV]  ................................................................
[CV] ................................................. , total=   1.9s
[CV]  ................................................................
[CV] ................................................. , total=   2.0s
[CV]  ................................................................
[CV] ................................................. , total=   2.1s
GREP_ME***Results of [MLPRegressor] estimatorrun are
{'std_train_score': array([ 0.00646031]), 'mean_test_score': array([ 0.54447082]), 'split1_train_score': array([ 0.54827794]), 'params': ({},), 'mean_score_time': array([ 0.01025105]), 'std_test_score': array([ 0.02309779]), 'std_score_time': array([ 0.00451832]), 'mean_fit_time': array([ 1.87020594]), 'split1_test_score': array([ 0.5429468]), 'split3_test_score': array([ 0.57998423]), 'std_fit_time': array([ 0.18826363]), 'split0_test_score': array([ 0.51537515]), 'mean_train_score': array([ 0.55041397]), 'split2_train_score': array([ 0.55266487]), 'split0_train_score': array([ 0.5592252]), 'split3_train_score': array([ 0.54148785]), 'split2_test_score': array([ 0.53957712]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [MLPRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [MLPRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.544470823135
####################################################################################
################# Running the iteration 21  of the GridSearchCV ####################
####################################################################################
***Starting [SVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   3.3s
GREP_ME***Results of [SVR] estimatorrun are
{'std_train_score': array([ 0.00720719]), 'mean_test_score': array([-0.13478839]), 'split1_train_score': array([-0.14494532]), 'params': ({},), 'mean_score_time': array([ 0.71234965]), 'std_test_score': array([ 0.0149456]), 'std_score_time': array([ 0.00623901]), 'mean_fit_time': array([ 2.62128025]), 'split1_test_score': array([-0.11143261]), 'split3_test_score': array([-0.14229634]), 'std_fit_time': array([ 0.02284679]), 'split0_test_score': array([-0.13360062]), 'mean_train_score': array([-0.13246605]), 'split2_train_score': array([-0.12823176]), 'split0_train_score': array([-0.12809537]), 'split3_train_score': array([-0.12859174]), 'split2_test_score': array([-0.15182397]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [SVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.134788387015
####################################################################################
################# Running the iteration 22  of the GridSearchCV ####################
####################################################################################
***Starting [LinearSVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
GREP_ME***Results of [LinearSVR] estimatorrun are
{'std_train_score': array([ 0.0484353]), 'mean_test_score': array([ 0.14792235]), 'split1_train_score': array([ 0.17645904]), 'params': ({},), 'mean_score_time': array([ 0.01155126]), 'std_test_score': array([ 0.05216364]), 'std_score_time': array([ 0.00284775]), 'mean_fit_time': array([ 0.38773042]), 'split1_test_score': array([ 0.16080362]), 'split3_test_score': array([ 0.19679997]), 'std_fit_time': array([ 0.01682147]), 'split0_test_score': array([ 0.06037655]), 'mean_train_score': array([ 0.14741054]), 'split2_train_score': array([ 0.17385303]), 'split0_train_score': array([ 0.06353453]), 'split3_train_score': array([ 0.17579555]), 'split2_test_score': array([ 0.17370926]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [LinearSVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearSVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.147922351672
####################################################################################
################# Running the iteration 23  of the GridSearchCV ####################
####################################################################################
***Starting [NuSVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   2.3s
[CV]  ................................................................
[CV] ................................................. , total=   2.3s
GREP_ME***Results of [NuSVR] estimatorrun are
{'std_train_score': array([ 0.00182315]), 'mean_test_score': array([-0.05320843]), 'split1_train_score': array([-0.05528296]), 'params': ({},), 'mean_score_time': array([ 0.34553754]), 'std_test_score': array([ 0.00663077]), 'std_score_time': array([ 0.00255734]), 'mean_fit_time': array([ 1.91485721]), 'split1_test_score': array([-0.04609572]), 'split3_test_score': array([-0.05294911]), 'std_fit_time': array([ 0.01468247]), 'split0_test_score': array([-0.04989312]), 'mean_train_score': array([-0.05235193]), 'split2_train_score': array([-0.05231839]), 'split0_train_score': array([-0.05140601]), 'split3_train_score': array([-0.05040035]), 'split2_test_score': array([-0.06389577]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [NuSVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [NuSVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.0532084327415
####################################################################################
################# Running the iteration 24  of the GridSearchCV ####################
####################################################################################
***Starting [DecisionTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [DecisionTreeRegressor] estimatorrun are
{'std_train_score': array([ 0.]), 'mean_test_score': array([ 0.16980163]), 'split1_train_score': array([ 1.]), 'params': ({},), 'mean_score_time': array([ 0.00186527]), 'std_test_score': array([ 0.09511537]), 'std_score_time': array([  9.84910440e-05]), 'mean_fit_time': array([ 0.08609307]), 'split1_test_score': array([ 0.27058894]), 'split3_test_score': array([ 0.19621331]), 'std_fit_time': array([ 0.004209]), 'split0_test_score': array([ 0.01335202]), 'mean_train_score': array([ 1.]), 'split2_train_score': array([ 1.]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'split2_test_score': array([ 0.19905224]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [DecisionTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [DecisionTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.169801626325
####################################################################################
################# Running the iteration 25  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [ExtraTreeRegressor] estimatorrun are
{'std_train_score': array([ 0.]), 'mean_test_score': array([ 0.22523009]), 'split1_train_score': array([ 1.]), 'params': ({},), 'mean_score_time': array([ 0.00187975]), 'std_test_score': array([ 0.05115223]), 'std_score_time': array([  7.47827865e-05]), 'mean_fit_time': array([ 0.05798596]), 'split1_test_score': array([ 0.28969269]), 'split3_test_score': array([ 0.26042145]), 'std_fit_time': array([ 0.0025416]), 'split0_test_score': array([ 0.16809261]), 'mean_train_score': array([ 1.]), 'split2_train_score': array([ 1.]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'split2_test_score': array([ 0.18271359]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [ExtraTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.225230087656
#########################################
###Finished all estimators for cl: quickRegmovie_metadata_cleaned_cat_vector_no_imbd
#########################################
#########################################
#######Printing results for cl: quickRegmovie_metadata_cleaned_cat_vector_no_imbd
#########################################
{'LassoLars': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.56282383805257474}, 'ExtraTreeRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.22523008765558086}, 'RandomForestRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.53595137892217237}, 'MLPRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.54447082313531958}, 'GradientBoostingRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.57302891859832894}, 'HuberRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.4896684396617389}, 'DecisionTreeRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.16980162632525508}, 'Lasso': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.56325628469386146}, 'ElasticNet': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.55954692443400478}, 'LinearSVR': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.14792235167169396}, 'Ridge': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.56359507960751964}, 'KNeighborsRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.48455145915331366}, 'OrthogonalMatchingPursuit': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.55960927220960111}, 'ExtraTreesRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.55400292462980116}, 'BaggingRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.549211394114549}, 'SGDRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': -1.1284407048347638e+32}, 'SVR': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': -0.13478838701453549}, 'PassiveAggressiveRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.31078838467140341}, 'NuSVR': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': -0.05320843274150195}, 'LinearRegression': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.56305046348463217}, 'RANSACRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.46836522745009385}, 'Lars': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': -4.0714669293539227e+35}, 'AdaBoostRegressor': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.24773510436473647}}
priting simply sorted numbers, grep them to find the best cfg or cl: quickRegmovie_metadata_cleaned_cat_vector_no_imbd
[-4.0714669293539227e+35, -1.1284407048347638e+32, -0.13478838701453549, -0.05320843274150195, 0.14792235167169396, 0.16980162632525508, 0.22523008765558086, 0.24773510436473647, 0.31078838467140341, 0.46836522745009385, 0.48455145915331366, 0.4896684396617389, 0.53595137892217237, 0.54447082313531958, 0.549211394114549, 0.55400292462980116, 0.55954692443400478, 0.55960927220960111, 0.56282383805257474, 0.56305046348463217, 0.56325628469386146, 0.56359507960751964, 0.57302891859832894]
