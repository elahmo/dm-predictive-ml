#########################################
###Starting all estimators for cl: quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3
#########################################
####################################################################################
################# Runing the itteration 1  of pipeline precomp      ###############
####################################################################################
| preprocessor:dummy | transfomer: dummy | reducer: dummy
{}
Starting precomp pipline for {}
Finished precomp pipline for {}
Pre-computation of pre-processing models completed in 0:00:00.136023
####################################################################################
################# Running the iteration 2  of the GridSearchCV ####################
####################################################################################
***Starting [AdaBoostClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   5.8s
[CV]  ................................................................
[CV] ................................................. , total=   5.8s
[CV]  ................................................................
[CV] ................................................. , total=   5.8s
GREP_ME***Results of [AdaBoostClassifier] estimatorrun are
{'std_train_score': array([ 0.00839122]), 'mean_test_score': array([ 0.70843724]), 'split1_train_score': array([ 0.71286031]), 'params': ({},), 'mean_score_time': array([ 0.07230228]), 'std_test_score': array([ 0.01696104]), 'std_score_time': array([ 0.00414987]), 'mean_fit_time': array([ 5.73491013]), 'split1_test_score': array([ 0.7051495]), 'split3_test_score': array([ 0.68302829]), 'std_fit_time': array([ 0.0284812]), 'split0_test_score': array([ 0.72923588]), 'mean_train_score': array([ 0.72249833]), 'split2_train_score': array([ 0.71717452]), 'split0_train_score': array([ 0.72505543]), 'split3_train_score': array([ 0.73490305]), 'split2_test_score': array([ 0.71630616]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [AdaBoostClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [AdaBoostClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.708437240233
####################################################################################
################# Running the iteration 3  of the GridSearchCV ####################
####################################################################################
***Starting [BaggingClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [BaggingClassifier] estimatorrun are
{'std_train_score': array([ 0.00152976]), 'mean_test_score': array([ 0.76309227]), 'split1_train_score': array([ 0.97865854]), 'params': ({},), 'mean_score_time': array([ 0.30212688]), 'std_test_score': array([ 0.01283665]), 'std_score_time': array([ 0.0030256]), 'mean_fit_time': array([ 4.75484967]), 'split1_test_score': array([ 0.75664452]), 'split3_test_score': array([ 0.74625624]), 'std_fit_time': array([ 0.2022577]), 'split0_test_score': array([ 0.76910299]), 'mean_train_score': array([ 0.98004991]), 'split2_train_score': array([ 0.97839335]), 'split0_train_score': array([ 0.98170732]), 'split3_train_score': array([ 0.98144044]), 'split2_test_score': array([ 0.78036606]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [BaggingClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [BaggingClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.763092269327
####################################################################################
################# Running the iteration 4  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreesClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [ExtraTreesClassifier] estimatorrun are
{'std_train_score': array([ 0.]), 'mean_test_score': array([ 0.74085619]), 'split1_train_score': array([ 1.]), 'params': ({},), 'mean_score_time': array([ 0.01663888]), 'std_test_score': array([ 0.01069856]), 'std_score_time': array([ 0.00154517]), 'mean_fit_time': array([ 1.51802647]), 'split1_test_score': array([ 0.73255814]), 'split3_test_score': array([ 0.73044925]), 'std_fit_time': array([ 0.15825049]), 'split0_test_score': array([ 0.75747508]), 'mean_train_score': array([ 1.]), 'split2_train_score': array([ 1.]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'split2_test_score': array([ 0.74292845]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [ExtraTreesClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreesClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.740856192851
####################################################################################
################# Running the iteration 5  of the GridSearchCV ####################
####################################################################################
***Starting [GradientBoostingClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [GradientBoostingClassifier] estimatorrun are
{'std_train_score': array([ 0.00525399]), 'mean_test_score': array([ 0.77389859]), 'split1_train_score': array([ 0.82178492]), 'params': ({},), 'mean_score_time': array([ 0.02126598]), 'std_test_score': array([ 0.01265649]), 'std_score_time': array([ 0.00298405]), 'mean_fit_time': array([ 93.67459542]), 'split1_test_score': array([ 0.77574751]), 'split3_test_score': array([ 0.75790349]), 'std_fit_time': array([ 0.38344217]), 'split0_test_score': array([ 0.76910299]), 'mean_train_score': array([ 0.82460533]), 'split2_train_score': array([ 0.81745152]), 'split0_train_score': array([ 0.82871397]), 'split3_train_score': array([ 0.83047091]), 'split2_test_score': array([ 0.79284526]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [GradientBoostingClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [GradientBoostingClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.773898586866
####################################################################################
################# Running the iteration 6  of the GridSearchCV ####################
####################################################################################
***Starting [RandomForestClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.8s
[CV]  ................................................................
[CV] ................................................. , total=   0.8s
[CV]  ................................................................
[CV] ................................................. , total=   0.8s
GREP_ME***Results of [RandomForestClassifier] estimatorrun are
{'std_train_score': array([ 0.00086548]), 'mean_test_score': array([ 0.74522028]), 'split1_train_score': array([ 0.98669623]), 'params': ({},), 'mean_score_time': array([ 0.01326263]), 'std_test_score': array([ 0.00901671]), 'std_score_time': array([ 0.00032095]), 'mean_fit_time': array([ 0.77880096]), 'split1_test_score': array([ 0.74833887]), 'split3_test_score': array([ 0.73211314]), 'std_fit_time': array([ 0.01244964]), 'split0_test_score': array([ 0.74335548]), 'mean_train_score': array([ 0.98732315]), 'split2_train_score': array([ 0.98864266]), 'split0_train_score': array([ 0.98641907]), 'split3_train_score': array([ 0.98753463]), 'split2_test_score': array([ 0.75707155]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [RandomForestClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RandomForestClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.745220282627
####################################################################################
################# Running the iteration 7  of the GridSearchCV ####################
####################################################################################
***Starting [PassiveAggressiveClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [PassiveAggressiveClassifier] estimatorrun are
{'std_train_score': array([ 0.00699224]), 'mean_test_score': array([ 0.70469659]), 'split1_train_score': array([ 0.70038803]), 'params': ({},), 'mean_score_time': array([ 0.00551981]), 'std_test_score': array([ 0.01541928]), 'std_score_time': array([ 0.00056251]), 'mean_fit_time': array([ 0.56837565]), 'split1_test_score': array([ 0.69019934]), 'split3_test_score': array([ 0.69633943]), 'std_fit_time': array([ 0.00328148]), 'split0_test_score': array([ 0.70182724]), 'mean_train_score': array([ 0.70282463]), 'split2_train_score': array([ 0.71274238]), 'split0_train_score': array([ 0.69345898]), 'split3_train_score': array([ 0.70470914]), 'split2_test_score': array([ 0.73044925]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [PassiveAggressiveClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [PassiveAggressiveClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.704696591854
####################################################################################
################# Running the iteration 8  of the GridSearchCV ####################
####################################################################################
***Starting [LogisticRegression] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [LogisticRegression] estimatorrun are
{'std_train_score': array([ 0.00349856]), 'mean_test_score': array([ 0.60369909]), 'split1_train_score': array([ 0.60282705]), 'params': ({},), 'mean_score_time': array([ 0.00534797]), 'std_test_score': array([ 0.00250184]), 'std_score_time': array([ 0.0003175]), 'mean_fit_time': array([ 0.38237482]), 'split1_test_score': array([ 0.59966777]), 'split3_test_score': array([ 0.60399334]), 'std_fit_time': array([ 0.00459003]), 'split0_test_score': array([ 0.60465116]), 'mean_train_score': array([ 0.60508461]), 'split2_train_score': array([ 0.60055402]), 'split0_train_score': array([ 0.60809313]), 'split3_train_score': array([ 0.60886427]), 'split2_test_score': array([ 0.60648918]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [LogisticRegression] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LogisticRegression] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.603699085619
####################################################################################
################# Running the iteration 9  of the GridSearchCV ####################
####################################################################################
***Starting [RidgeClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   2.7s
[CV]  ................................................................
[CV] ................................................. , total=   2.9s
[CV]  ................................................................
[CV] ................................................. , total=   2.5s
GREP_ME***Results of [RidgeClassifier] estimatorrun are
{'std_train_score': array([ 0.00627235]), 'mean_test_score': array([ 0.69783874]), 'split1_train_score': array([ 0.85449002]), 'params': ({},), 'mean_score_time': array([ 0.01250172]), 'std_test_score': array([ 0.0094276]), 'std_score_time': array([ 0.00592537]), 'mean_fit_time': array([ 2.68008566]), 'split1_test_score': array([ 0.69435216]), 'split3_test_score': array([ 0.68718802]), 'std_fit_time': array([ 0.15766462]), 'split0_test_score': array([ 0.69684385]), 'mean_train_score': array([ 0.85085974]), 'split2_train_score': array([ 0.8401662]), 'split0_train_score': array([ 0.85282705]), 'split3_train_score': array([ 0.85595568]), 'split2_test_score': array([ 0.71297837]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [RidgeClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RidgeClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.697838736492
####################################################################################
################# Running the iteration 10  of the GridSearchCV ####################
####################################################################################
***Starting [SGDClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
GREP_ME***Results of [SGDClassifier] estimatorrun are
{'std_train_score': array([ 0.26290853]), 'mean_test_score': array([ 0.33707398]), 'split1_train_score': array([ 0.59977827]), 'params': ({},), 'mean_score_time': array([ 0.00540805]), 'std_test_score': array([ 0.26281217]), 'std_score_time': array([ 0.00036709]), 'mean_fit_time': array([ 0.47325963]), 'split1_test_score': array([ 0.59966777]), 'split3_test_score': array([ 0.07404326]), 'std_fit_time': array([ 0.00182195]), 'split0_test_score': array([ 0.59966777]), 'mean_train_score': array([ 0.33686974]), 'split2_train_score': array([ 0.07396122]), 'split0_train_score': array([ 0.59977827]), 'split3_train_score': array([ 0.07396122]), 'split2_test_score': array([ 0.07404326]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [SGDClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SGDClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.337073981712
####################################################################################
################# Running the iteration 11  of the GridSearchCV ####################
####################################################################################
***Starting [GaussianNB] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [GaussianNB] estimatorrun are
{'std_train_score': array([ 0.01082928]), 'mean_test_score': array([ 0.59912718]), 'split1_train_score': array([ 0.60144124]), 'params': ({},), 'mean_score_time': array([ 0.0461753]), 'std_test_score': array([ 0.01446918]), 'std_score_time': array([ 0.00121988]), 'mean_fit_time': array([ 0.42586595]), 'split1_test_score': array([ 0.59385382]), 'split3_test_score': array([ 0.59816972]), 'std_fit_time': array([ 0.01291415]), 'split0_test_score': array([ 0.62209302]), 'mean_train_score': array([ 0.600721]), 'split2_train_score': array([ 0.58365651]), 'split0_train_score': array([ 0.60421286]), 'split3_train_score': array([ 0.61357341]), 'split2_test_score': array([ 0.58236273]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [GaussianNB] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [GaussianNB] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.599127182045
####################################################################################
################# Running the iteration 12  of the GridSearchCV ####################
####################################################################################
***Starting [MultinomialNB] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [MultinomialNB] estimatorrun are
{'std_train_score': array([ 0.00514105]), 'mean_test_score': array([ 0.44347465]), 'split1_train_score': array([ 0.4498337]), 'params': ({},), 'mean_score_time': array([ 0.0047788]), 'std_test_score': array([ 0.00593656]), 'std_score_time': array([ 0.00023421]), 'mean_fit_time': array([ 0.33572257]), 'split1_test_score': array([ 0.43604651]), 'split3_test_score': array([ 0.44176373]), 'std_fit_time': array([ 0.00304275]), 'split0_test_score': array([ 0.44352159]), 'mean_train_score': array([ 0.4443067]), 'split2_train_score': array([ 0.43601108]), 'split0_train_score': array([ 0.44456763]), 'split3_train_score': array([ 0.4468144]), 'split2_test_score': array([ 0.45257903]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [MultinomialNB] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [MultinomialNB] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.443474646717
####################################################################################
################# Running the iteration 13  of the GridSearchCV ####################
####################################################################################
***Starting [KNeighborsClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [KNeighborsClassifier] estimatorrun are
{'std_train_score': array([ 0.00384266]), 'mean_test_score': array([ 0.72838736]), 'split1_train_score': array([ 0.80072062]), 'params': ({},), 'mean_score_time': array([ 0.65465063]), 'std_test_score': array([ 0.01093091]), 'std_score_time': array([ 0.00550954]), 'mean_fit_time': array([ 0.4936868]), 'split1_test_score': array([ 0.71262458]), 'split3_test_score': array([ 0.72379368]), 'std_fit_time': array([ 0.0057694]), 'split0_test_score': array([ 0.73920266]), 'mean_train_score': array([ 0.80008234]), 'split2_train_score': array([ 0.80166205]), 'split0_train_score': array([ 0.79379157]), 'split3_train_score': array([ 0.80415512]), 'split2_test_score': array([ 0.73793677]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [KNeighborsClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [KNeighborsClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.728387364921
####################################################################################
################# Running the iteration 14  of the GridSearchCV ####################
####################################################################################
***Starting [RadiusNeighborsClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV]  ................................................................
GREP_ME***Error caught for  [RadiusNeighborsClassifier] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/data_mining/quick_solver.py in <module>()
    545         "./dataset/movie_metadata_cleaned_no_vector_num_only.csv",
    546         "./dataset/movie_metadata_cleaned_cat-name_vector_no_imbd.csv",
    547         "./dataset/movie_metadata_cleaned_cat_vector_no_imbd.csv",
    548         "./dataset/movie_metadata_cleaned_cat_min3_tfidf_no_imbd.csv"
    549     ]
--> 550     for file in files: simple_experiment(file)
    551 
    552 
    553 
    554 

...........................................................................
/home/user/data_mining/quick_solver.py in simple_experiment(file_path='./dataset/movie_metadata_cleaned_cat-name_vector_no_imbd.csv')
    529             global itter_start
    530             itter_start = 0
    531             x_crr = dta_clean.drop('worldwide_gross', axis=1)
    532             y_crr = dta_clean.worldwide_gross.apply (lambda gross: cb (gross))
    533             dsc = desc + "_" + cb.__name__
--> 534             run_for_many(x_crr, y_crr, dsc, models_class, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns]
        y_crr = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        dsc = 'quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3'
        models_class = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
    535             new_file.close()
    536     
    537     # reassign the org stdout for some reason
    538     sys.stdout = orig_stdout

...........................................................................
/home/user/data_mining/quick_solver.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns], y=0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64, cl_n='quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3', models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...})
    397     errors = []
    398     errors_ind = []
    399     print("#########################################")
    400     print("###Starting all estimators for cl: " + str(cl_n))
    401     print("#########################################")
--> 402     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns]
        y = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        models = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
        errors = []
        errors_ind = []
        precomp_pipe = []
    403     print("#########################################")
    404     print("###Finished all estimators for cl: " + str(cl_n))
    405     print("#########################################")
    406 

...........................................................................
/home/user/data_mining/quick_solver.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns], y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70843724023275145}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.76309226932668328}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.7408561928512053}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5991271820448878}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77389858686616786}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72838736492103073}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60369908561928509}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44347464671654196}, 'PassiveAggressiveClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70469659185369904}, 'RandomForestClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.74522028262676643}, ...}, errors=[], errors_ind=[], precomp_pipe=[])
    386     for filename in os.listdir("./tmp"):
    387         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    388         # for model in models:
    389         for model in models:
    390             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 391                             results, errors, errors_ind)
        results = {'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70843724023275145}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.76309226932668328}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.7408561928512053}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5991271820448878}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77389858686616786}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72838736492103073}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60369908561928509}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44347464671654196}, 'PassiveAggressiveClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70469659185369904}, 'RandomForestClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.74522028262676643}, ...}
        errors = []
        errors_ind = []
    392 
    393 ## Function for trigrering gridserach and priting results
    394 def run_for_many(x, y, cl_n, models, models_cfg):
    395     results = {}

...........................................................................
/home/user/data_mining/quick_solver.py in run_grid_search(x=array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, model=RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), model_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70843724023275145}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.76309226932668328}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.7408561928512053}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5991271820448878}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77389858686616786}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72838736492103073}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60369908561928509}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44347464671654196}, 'PassiveAggressiveClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70469659185369904}, 'RandomForestClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.74522028262676643}, ...}, errors=[], errors_ind=[])
    299     print("##param_grid##")
    300     print(param_grid)
    301     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    302     # run the estimator, except exceptions, sape errors
    303     try:
--> 304         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]])
        y = 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64
    305         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    306         print(estimator.cv_results_)
    307         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    308         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]])
        y = 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sat Apr 22 13:34:20 2017
PID: 12391                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), memmap([[ 19000.,  13000.,    617., ...,      0....1000.,    887., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([ 949,  956,  975, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1221, 1222, 1224]), 2, {}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), memmap([[ 19000.,  13000.,    617., ...,      0....1000.,    887., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([ 949,  956,  975, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1221, 1222, 1224]), 2, {})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), X=memmap([[ 19000.,  13000.,    617., ...,      0....1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([ 949,  956,  975, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1221, 1222, 1224]), verbose=2, parameters={}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    255                              " numeric value. (Hint: if using 'raise', please"
    256                              " make sure that it has been spelled correctly.)")
    257 
    258     else:
    259         fit_time = time.time() - start_time
--> 260         test_score = _score(estimator, X_test, y_test, scorer)
        test_score = undefined
        estimator = Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))])
        X_test = memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]])
        y_test = 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64
        scorer = <function _passthrough_scorer>
    261         score_time = time.time() - start_time - fit_time
    262         if return_train_score:
    263             train_score = _score(estimator, X_train, y_train, scorer)
    264 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _score(estimator=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), X_test=memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]]), y_test=1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>)
    283 def _score(estimator, X_test, y_test, scorer):
    284     """Compute the score of an estimator on a given test set."""
    285     if y_test is None:
    286         score = scorer(estimator, X_test)
    287     else:
--> 288         score = scorer(estimator, X_test, y_test)
        score = undefined
        scorer = <function _passthrough_scorer>
        estimator = Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))])
        X_test = memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]])
        y_test = 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64
    289     if hasattr(score, 'item'):
    290         try:
    291             # e.g. unwrap memmapped scalars
    292             score = score.item()

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/scorer.py in _passthrough_scorer(estimator=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), *args=(memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64), **kwargs={})
    214     return scorer
    215 
    216 
    217 def _passthrough_scorer(estimator, *args, **kwargs):
    218     """Function that wraps estimator.score"""
--> 219     return estimator.score(*args, **kwargs)
        estimator.score = <function Pipeline.score>
        args = (memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64)
        kwargs = {}
    220 
    221 
    222 def check_scoring(estimator, scoring=None, allow_none=False):
    223     """Determine scorer from user options.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/metaestimators.py in <lambda>(*args=(memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64), **kwargs={})
     49                     break
     50             else:
     51                 attrgetter(self.delegate_names[-1])(obj)
     52 
     53         # lambda, but not partial, allows help() to work with update_wrapper
---> 54         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)
        args = (memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64)
        kwargs = {}
     55         # update the docstring of the returned function
     56         update_wrapper(out, self.fn)
     57         return out
     58 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in score(self=Pipeline(steps=[('model', RadiusNeighborsClassif...2, radius=1.0,
             weights='uniform'))]), X=memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64)
    500         """
    501         Xt = X
    502         for name, transform in self.steps[:-1]:
    503             if transform is not None:
    504                 Xt = transform.transform(Xt)
--> 505         return self.steps[-1][-1].score(Xt, y)
        self.steps.score = undefined
        Xt = memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]])
        y = 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64
    506 
    507     @property
    508     def classes_(self):
    509         return self.steps[-1][-1].classes_

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/base.py in score(self=RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), X=memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64, sample_weight=None)
    344         score : float
    345             Mean accuracy of self.predict(X) wrt. y.
    346 
    347         """
    348         from .metrics import accuracy_score
--> 349         return accuracy_score(y, self.predict(X), sample_weight=sample_weight)
        accuracy_score = <function accuracy_score>
        y = 1971    2
2010    2
4470    1
1459    2
551     ...  2
1484    2
Name: worldwide_gross, dtype: int64
        self.predict = <bound method RadiusNeighborsClassifier.predict ...p=2, radius=1.0,
             weights='uniform')>
        X = memmap([[ 19000.,  13000.,    617., ...,      0.... 745.,    673., ...,      0.,      0.,      0.]])
        sample_weight = None
    350 
    351 
    352 ###############################################################################
    353 class RegressorMixin(object):

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/neighbors/classification.py in predict(self=RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), X=array([[ 19000.,  13000.,    617., ...,      0.,... 745.,    673., ...,      0.,      0.,      0.]]))
    358         elif outliers:
    359             raise ValueError('No neighbors found for test samples %r, '
    360                              'you can try using larger radius, '
    361                              'give a label for outliers, '
    362                              'or consider removing them from your dataset.'
--> 363                              % outliers)
        outliers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, ...]
    364 
    365         weights = _get_weights(neigh_dist, self.weights)
    366 
    367         y_pred = np.empty((n_samples, n_outputs), dtype=classes_[0].dtype)

ValueError: No neighbors found for test samplesyou can try using larger radius, give a label for outliers, or consider removing them from your dataset.
___________________________________________________________________________
####################################################################################
################# Running the iteration 15  of the GridSearchCV ####################
####################################################################################
***Starting [NearestCentroid] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.4s
GREP_ME***Results of [NearestCentroid] estimatorrun are
{'std_train_score': array([ 0.00360602]), 'mean_test_score': array([ 0.6325852]), 'split1_train_score': array([ 0.63359202]), 'params': ({},), 'mean_score_time': array([ 0.00757384]), 'std_test_score': array([ 0.01025188]), 'std_score_time': array([ 0.00030147]), 'mean_fit_time': array([ 0.34037989]), 'split1_test_score': array([ 0.62873754]), 'split3_test_score': array([ 0.61813644]), 'std_fit_time': array([ 0.003259]), 'split0_test_score': array([ 0.63787375]), 'mean_train_score': array([ 0.6332782]), 'split2_train_score': array([ 0.62742382]), 'split0_train_score': array([ 0.63497783]), 'split3_train_score': array([ 0.63711911]), 'split2_test_score': array([ 0.64559068]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [NearestCentroid] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [NearestCentroid] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.632585203658
####################################################################################
################# Running the iteration 16  of the GridSearchCV ####################
####################################################################################
***Starting [MLPClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   6.2s
[CV]  ................................................................
[CV] ................................................. , total=   5.9s
[CV]  ................................................................
[CV] ................................................. , total=   5.2s
GREP_ME***Results of [MLPClassifier] estimatorrun are
{'std_train_score': array([ 0.00679895]), 'mean_test_score': array([ 0.63674148]), 'split1_train_score': array([ 0.63691796]), 'params': ({},), 'mean_score_time': array([ 0.03246498]), 'std_test_score': array([ 0.01117739]), 'std_score_time': array([ 0.01083972]), 'mean_fit_time': array([ 5.88689774]), 'split1_test_score': array([ 0.62707641]), 'split3_test_score': array([ 0.63810316]), 'std_fit_time': array([ 0.46897842]), 'split0_test_score': array([ 0.65448505]), 'mean_train_score': array([ 0.63688107]), 'split2_train_score': array([ 0.62603878]), 'split0_train_score': array([ 0.64440133]), 'split3_train_score': array([ 0.6401662]), 'split2_test_score': array([ 0.62728785]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [MLPClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [MLPClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.636741479634
####################################################################################
################# Running the iteration 17  of the GridSearchCV ####################
####################################################################################
***Starting [SVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [SVC] estimatorrun are
{'std_train_score': array([ 0.00013858]), 'mean_test_score': array([ 0.60951787]), 'split1_train_score': array([ 0.99972284]), 'params': ({},), 'mean_score_time': array([ 8.43955243]), 'std_test_score': array([ 0.004804]), 'std_score_time': array([ 0.01044969]), 'mean_fit_time': array([ 38.239806]), 'split1_test_score': array([ 0.6038206]), 'split3_test_score': array([ 0.60898502]), 'std_fit_time': array([ 0.14754805]), 'split0_test_score': array([ 0.61710963]), 'mean_train_score': array([ 0.99986142]), 'split2_train_score': array([ 1.]), 'split0_train_score': array([ 0.99972284]), 'split3_train_score': array([ 1.]), 'split2_test_score': array([ 0.60815308]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [SVC] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SVC] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.609517871987
####################################################################################
################# Running the iteration 18  of the GridSearchCV ####################
####################################################################################
***Starting [LinearSVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [LinearSVC] estimatorrun are
{'std_train_score': array([ 0.12500402]), 'mean_test_score': array([ 0.54322527]), 'split1_train_score': array([ 0.43348115]), 'params': ({},), 'mean_score_time': array([ 0.0051589]), 'std_test_score': array([ 0.12628927]), 'std_score_time': array([ 0.00010129]), 'mean_fit_time': array([ 1.39486104]), 'split1_test_score': array([ 0.42275748]), 'split3_test_score': array([ 0.68136439]), 'std_fit_time': array([ 0.07827186]), 'split0_test_score': array([ 0.65697674]), 'mean_train_score': array([ 0.54523308]), 'split2_train_score': array([ 0.40914127]), 'split0_train_score': array([ 0.64939024]), 'split3_train_score': array([ 0.68891967]), 'split2_test_score': array([ 0.41181364]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [LinearSVC] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearSVC] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.543225270158
####################################################################################
################# Running the iteration 19  of the GridSearchCV ####################
####################################################################################
***Starting [NuSVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
GREP_ME***Error caught for  [NuSVC] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/data_mining/quick_solver.py in <module>()
    545         "./dataset/movie_metadata_cleaned_no_vector_num_only.csv",
    546         "./dataset/movie_metadata_cleaned_cat-name_vector_no_imbd.csv",
    547         "./dataset/movie_metadata_cleaned_cat_vector_no_imbd.csv",
    548         "./dataset/movie_metadata_cleaned_cat_min3_tfidf_no_imbd.csv"
    549     ]
--> 550     for file in files: simple_experiment(file)
    551 
    552 
    553 
    554 

...........................................................................
/home/user/data_mining/quick_solver.py in simple_experiment(file_path='./dataset/movie_metadata_cleaned_cat-name_vector_no_imbd.csv')
    529             global itter_start
    530             itter_start = 0
    531             x_crr = dta_clean.drop('worldwide_gross', axis=1)
    532             y_crr = dta_clean.worldwide_gross.apply (lambda gross: cb (gross))
    533             dsc = desc + "_" + cb.__name__
--> 534             run_for_many(x_crr, y_crr, dsc, models_class, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns]
        y_crr = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        dsc = 'quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3'
        models_class = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
    535             new_file.close()
    536     
    537     # reassign the org stdout for some reason
    538     sys.stdout = orig_stdout

...........................................................................
/home/user/data_mining/quick_solver.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns], y=0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64, cl_n='quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3', models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...})
    397     errors = []
    398     errors_ind = []
    399     print("#########################################")
    400     print("###Starting all estimators for cl: " + str(cl_n))
    401     print("#########################################")
--> 402     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns]
        y = 0       3
1       3
2       3
3       3
4       ...  1
4811    1
Name: worldwide_gross, dtype: int64
        models = [AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
        errors = []
        errors_ind = []
        precomp_pipe = []
    403     print("#########################################")
    404     print("###Finished all estimators for cl: " + str(cl_n))
    405     print("#########################################")
    406 

...........................................................................
/home/user/data_mining/quick_solver.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l...0.0             0.0  

[4812 rows x 1462 columns], y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, models=[AdaBoostClassifier(algorithm='SAMME.R', base_est...ing_rate=1.0, n_estimators=50, random_state=None), BaggingClassifier(base_estimator=None, bootstrap...state=None,
         verbose=0, warm_start=False), ExtraTreesClassifier(bootstrap=False, class_weig...ate=None,
           verbose=0, warm_start=False), GradientBoostingClassifier(criterion='friedman_m...      subsample=1.0, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, class_wei...te=None,
            verbose=0, warm_start=False), PassiveAggressiveClassifier(C=1.0, class_weight=...       shuffle=True, verbose=0, warm_start=False), LogisticRegression(C=1.0, class_weight=None, dua...ol=0.0001,
          verbose=0, warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, co...dom_state=None, solver='auto',
        tol=0.001), SGDClassifier(alpha=0.0001, average=False, class...shuffle=True,
       verbose=0, warm_start=False), GaussianNB(priors=None), MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True), KNeighborsClassifier(algorithm='auto', leaf_size...n_neighbors=5, p=2,
           weights='uniform'), RadiusNeighborsClassifier(algorithm='auto', leaf... p=2, radius=1.0,
             weights='uniform'), NearestCentroid(metric='euclidean', shrink_threshold=None), MLPClassifier(activation='relu', alpha=0.0001, b...tion=0.1,
       verbose=False, warm_start=False), SVC(C=1.0, cache_size=200, class_weight=None, co...None, shrinking=True,
  tol=0.001, verbose=False), LinearSVC(C=1.0, class_weight=None, dual=True, f...', random_state=None, tol=0.0001,
     verbose=0), NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), DecisionTreeClassifier(class_weight=None, criter...resort=False, random_state=None, splitter='best'), ExtraTreeClassifier(class_weight=None, criterion...,
          random_state=None, splitter='random')], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70843724023275145}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.76309226932668328}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.7408561928512053}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5991271820448878}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77389858686616786}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72838736492103073}, 'LinearSVC': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.54322527015793853}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60369908561928509}, 'MLPClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.63674147963424776}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44347464671654196}, ...}, errors=[], errors_ind=[], precomp_pipe=[])
    386     for filename in os.listdir("./tmp"):
    387         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    388         # for model in models:
    389         for model in models:
    390             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 391                             results, errors, errors_ind)
        results = {'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70843724023275145}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.76309226932668328}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.7408561928512053}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5991271820448878}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77389858686616786}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72838736492103073}, 'LinearSVC': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.54322527015793853}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60369908561928509}, 'MLPClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.63674147963424776}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44347464671654196}, ...}
        errors = []
        errors_ind = []
    392 
    393 ## Function for trigrering gridserach and priting results
    394 def run_for_many(x, y, cl_n, models, models_cfg):
    395     results = {}

...........................................................................
/home/user/data_mining/quick_solver.py in run_grid_search(x=array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, model=NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), model_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'AdaBoostClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.70843724023275145}, 'BaggingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.76309226932668328}, 'ExtraTreesClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.7408561928512053}, 'GaussianNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5991271820448878}, 'GradientBoostingClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.77389858686616786}, 'KNeighborsClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.72838736492103073}, 'LinearSVC': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.54322527015793853}, 'LogisticRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.60369908561928509}, 'MLPClassifier': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.63674147963424776}, 'MultinomialNB': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.44347464671654196}, ...}, errors=[], errors_ind=[])
    299     print("##param_grid##")
    300     print(param_grid)
    301     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    302     # run the estimator, except exceptions, sape errors
    303     try:
--> 304         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]])
        y = 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64
    305         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    306         print(estimator.cv_results_)
    307         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    308         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]])
        y = 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[ 19000.,  13000.,    617., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sat Apr 22 13:36:46 2017
PID: 12452                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), memmap([[ 19000.,  13000.,    617., ...,      0....1000.,    887., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([ 949,  956,  975, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1221, 1222, 1224]), 2, {}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), memmap([[ 19000.,  13000.,    617., ...,      0....1000.,    887., ...,      0.,      0.,      0.]]), 1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([ 949,  956,  975, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1221, 1222, 1224]), 2, {})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), X=memmap([[ 19000.,  13000.,    617., ...,      0....1000.,    887., ...,      0.,      0.,      0.]]), y=1971    2
2010    2
4470    1
1459    2
551     ...  2
430     2
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([ 949,  956,  975, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1221, 1222, 1224]), verbose=2, parameters={}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    233 
    234     try:
    235         if y_train is None:
    236             estimator.fit(X_train, **fit_params)
    237         else:
--> 238             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(steps=[('...
   shrinking=True, tol=0.001, verbose=False))])>
        X_train = memmap([[   238.,    103.,     56., ...,      0....1000.,    887., ...,      0.,      0.,      0.]])
        y_train = 153     3
262     3
295     3
21      3
81      ...  2
430     2
Name: worldwide_gross, dtype: int64
        fit_params = {}
    239 
    240     except Exception as e:
    241         # Note fit time as time until error
    242         fit_time = time.time() - start_time

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in fit(self=Pipeline(steps=[('model', NuSVC(cache_size=200, ...,
   shrinking=True, tol=0.001, verbose=False))]), X=memmap([[   238.,    103.,     56., ...,      0....1000.,    887., ...,      0.,      0.,      0.]]), y=153     3
262     3
295     3
21      3
81      ...  2
430     2
Name: worldwide_gross, dtype: int64, **fit_params={})
    265         self : Pipeline
    266             This estimator
    267         """
    268         Xt, fit_params = self._fit(X, y, **fit_params)
    269         if self._final_estimator is not None:
--> 270             self._final_estimator.fit(Xt, y, **fit_params)
        self._final_estimator.fit = <bound method NuSVC.fit of NuSVC(cache_size=200,...ne,
   shrinking=True, tol=0.001, verbose=False)>
        Xt = memmap([[   238.,    103.,     56., ...,      0....1000.,    887., ...,      0.,      0.,      0.]])
        y = 153     3
262     3
295     3
21      3
81      ...  2
430     2
Name: worldwide_gross, dtype: int64
        fit_params = {}
    271         return self
    272 
    273     def fit_transform(self, X, y=None, **fit_params):
    274         """Fit the model and transform with the final estimator

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/svm/base.py in fit(self=NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), X=array([[   238.,    103.,     56., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=array([ 2.,  2.,  2., ...,  1.,  1.,  1.]), sample_weight=array([], dtype=float64))
    184         fit = self._sparse_fit if self._sparse else self._dense_fit
    185         if self.verbose:  # pragma: no cover
    186             print('[LibSVM]', end='')
    187 
    188         seed = rnd.randint(np.iinfo('i').max)
--> 189         fit(X, y, sample_weight, solver_type, kernel, random_seed=seed)
        fit = <bound method NuSVC._dense_fit of NuSVC(cache_si...ne,
   shrinking=True, tol=0.001, verbose=False)>
        X = array([[   238.,    103.,     56., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]])
        y = array([ 2.,  2.,  2., ...,  1.,  1.,  1.])
        sample_weight = array([], dtype=float64)
        solver_type = 1
        kernel = 'rbf'
        seed = 1690144304
    190         # see comment on the other call to np.iinfo in this file
    191 
    192         self.shape_fit_ = X.shape
    193 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/svm/base.py in _dense_fit(self=NuSVC(cache_size=200, class_weight=None, coef0=0...one,
   shrinking=True, tol=0.001, verbose=False), X=array([[   238.,    103.,     56., ...,      0.,...1000.,    887., ...,      0.,      0.,      0.]]), y=array([ 2.,  2.,  2., ...,  1.,  1.,  1.]), sample_weight=array([], dtype=float64), solver_type=1, kernel='rbf', random_seed=1690144304)
    251                 class_weight=self.class_weight_, kernel=kernel, C=self.C,
    252                 nu=self.nu, probability=self.probability, degree=self.degree,
    253                 shrinking=self.shrinking, tol=self.tol,
    254                 cache_size=self.cache_size, coef0=self.coef0,
    255                 gamma=self._gamma, epsilon=self.epsilon,
--> 256                 max_iter=self.max_iter, random_seed=random_seed)
        self.max_iter = -1
        random_seed = 1690144304
    257 
    258         self._warn_from_fit_status()
    259 
    260     def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/svm/libsvm.cpython-34m.so in sklearn.svm.libsvm.fit (sklearn/svm/libsvm.c:2501)()
    182 
    183 
    184 
    185 
    186 
--> 187 
    188 
    189 
    190 
    191 

ValueError: specified nu is infeasible
___________________________________________________________________________
####################################################################################
################# Running the iteration 20  of the GridSearchCV ####################
####################################################################################
***Starting [DecisionTreeClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.5s
[CV]  ................................................................
[CV] ................................................. , total=   1.9s
GREP_ME***Results of [DecisionTreeClassifier] estimatorrun are
{'std_train_score': array([ 0.]), 'mean_test_score': array([ 0.7092685]), 'split1_train_score': array([ 1.]), 'params': ({},), 'mean_score_time': array([ 0.00731879]), 'std_test_score': array([ 0.01413432]), 'std_score_time': array([ 0.00024505]), 'mean_fit_time': array([ 1.98656911]), 'split1_test_score': array([ 0.69684385]), 'split3_test_score': array([ 0.69384359]), 'std_fit_time': array([ 0.34032135]), 'split0_test_score': array([ 0.72009967]), 'mean_train_score': array([ 1.]), 'split2_train_score': array([ 1.]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'split2_test_score': array([ 0.72628952]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [DecisionTreeClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [DecisionTreeClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.709268495428
####################################################################################
################# Running the iteration 21  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreeClassifier] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [ExtraTreeClassifier] estimatorrun are
{'std_train_score': array([ 0.]), 'mean_test_score': array([ 0.65253533]), 'split1_train_score': array([ 1.]), 'params': ({},), 'mean_score_time': array([ 0.00787365]), 'std_test_score': array([ 0.01034682]), 'std_score_time': array([ 0.00085199]), 'mean_fit_time': array([ 0.45300132]), 'split1_test_score': array([ 0.64285714]), 'split3_test_score': array([ 0.66638935]), 'std_fit_time': array([ 0.01992105]), 'split0_test_score': array([ 0.65863787]), 'mean_train_score': array([ 1.]), 'split2_train_score': array([ 1.]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'split2_test_score': array([ 0.6422629]), 'rank_test_score': array([1], dtype=int32)}
GREP_ME***Best params of [ExtraTreeClassifier] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreeClassifier] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.652535328346
#########################################
###Finished all estimators for cl: quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3
#########################################
#########################################
#######Printing results for cl: quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3
#########################################
{'BaggingClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.76309226932668328}, 'GaussianNB': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.5991271820448878}, 'ExtraTreeClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.65253532834580219}, 'RidgeClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.69783873649210304}, 'RandomForestClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.74522028262676643}, 'PassiveAggressiveClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.70469659185369904}, 'ExtraTreesClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.7408561928512053}, 'MultinomialNB': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.44347464671654196}, 'AdaBoostClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.70843724023275145}, 'GradientBoostingClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.77389858686616786}, 'LinearSVC': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.54322527015793853}, 'LogisticRegression': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.60369908561928509}, 'NearestCentroid': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.63258520365752291}, 'SGDClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.33707398171238573}, 'DecisionTreeClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.70926849542809645}, 'MLPClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.63674147963424776}, 'KNeighborsClassifier': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.72838736492103073}, 'SVC': {'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}, 'score': 0.60951787198669993}}
priting simply sorted numbers, grep them to find the best cfg or cl: quickClassmovie_metadata_cleaned_cat-name_vector_no_imbd_label_gross_3
[0.33707398171238573, 0.44347464671654196, 0.54322527015793853, 0.5991271820448878, 0.60369908561928509, 0.60951787198669993, 0.63258520365752291, 0.63674147963424776, 0.65253532834580219, 0.69783873649210304, 0.70469659185369904, 0.70843724023275145, 0.70926849542809645, 0.72838736492103073, 0.7408561928512053, 0.74522028262676643, 0.76309226932668328, 0.77389858686616786]
