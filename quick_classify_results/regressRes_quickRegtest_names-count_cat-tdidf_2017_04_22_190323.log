#########################################
###Starting all estimators for cl: quickRegtest_names-count_cat-tdidf
#########################################
####################################################################################
################# Runing the itteration 1  of pipeline precomp      ###############
####################################################################################
| preprocessor:dummy | transfomer: dummy | reducer: dummy
{}
Starting precomp pipline for {}
Finished precomp pipline for {}
Pre-computation of pre-processing models completed in 0:00:00.048961
####################################################################################
################# Running the iteration 2  of the GridSearchCV ####################
####################################################################################
***Starting [AdaBoostRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [AdaBoostRegressor] estimatorrun are
{'std_fit_time': array([ 0.4420579]), 'split2_train_score': array([-0.81433153]), 'params': ({},), 'std_test_score': array([ 0.67033241]), 'mean_train_score': array([-0.15514646]), 'std_train_score': array([ 0.46181673]), 'split1_test_score': array([-0.08543481]), 'split1_train_score': array([-0.18128105]), 'mean_fit_time': array([ 1.56661689]), 'split2_test_score': array([-1.43149391]), 'mean_score_time': array([ 0.01765811]), 'split0_test_score': array([-0.1570221]), 'split0_train_score': array([-0.11502528]), 'split3_train_score': array([ 0.49005202]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.32519447]), 'split3_test_score': array([ 0.37317294]), 'std_score_time': array([ 0.00546678])}
GREP_ME***Best params of [AdaBoostRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [AdaBoostRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.325194468228
####################################################################################
################# Running the iteration 3  of the GridSearchCV ####################
####################################################################################
***Starting [BaggingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [BaggingRegressor] estimatorrun are
{'std_fit_time': array([ 0.03302306]), 'split2_train_score': array([ 0.93501759]), 'params': ({},), 'std_test_score': array([ 0.02837036]), 'mean_train_score': array([ 0.93439865]), 'std_train_score': array([ 0.00076585]), 'split1_test_score': array([ 0.5985581]), 'split1_train_score': array([ 0.93334174]), 'mean_fit_time': array([ 1.36325502]), 'split2_test_score': array([ 0.52843243]), 'mean_score_time': array([ 0.100088]), 'split0_test_score': array([ 0.54815622]), 'split0_train_score': array([ 0.93523004]), 'split3_train_score': array([ 0.93400523]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.55128854]), 'split3_test_score': array([ 0.53000742]), 'std_score_time': array([ 0.00155925])}
GREP_ME***Best params of [BaggingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [BaggingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.551288543831
####################################################################################
################# Running the iteration 4  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreesRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   3.4s
[CV]  ................................................................
[CV] ................................................. , total=   3.5s
GREP_ME***Results of [ExtraTreesRegressor] estimatorrun are
{'std_fit_time': array([ 0.11149882]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.01474527]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.56784295]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 3.53071457]), 'split2_test_score': array([ 0.54701085]), 'mean_score_time': array([ 0.00687295]), 'split0_test_score': array([ 0.55149595]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.54820852]), 'split3_test_score': array([ 0.52648435]), 'std_score_time': array([  6.97885381e-05])}
GREP_ME***Best params of [ExtraTreesRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreesRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.54820852416
####################################################################################
################# Running the iteration 5  of the GridSearchCV ####################
####################################################################################
***Starting [GradientBoostingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [GradientBoostingRegressor] estimatorrun are
{'std_fit_time': array([ 0.07590917]), 'split2_train_score': array([ 0.78768883]), 'params': ({},), 'std_test_score': array([ 0.02677114]), 'mean_train_score': array([ 0.78216544]), 'std_train_score': array([ 0.00400678]), 'split1_test_score': array([ 0.6374275]), 'split1_train_score': array([ 0.77966811]), 'mean_fit_time': array([ 7.56722593]), 'split2_test_score': array([ 0.57132743]), 'mean_score_time': array([ 0.00455594]), 'split0_test_score': array([ 0.58131414]), 'split0_train_score': array([ 0.77726906]), 'split3_train_score': array([ 0.78403578]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.59146511]), 'split3_test_score': array([ 0.57579137]), 'std_score_time': array([ 0.00031969])}
GREP_ME***Best params of [GradientBoostingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [GradientBoostingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.591465111279
####################################################################################
################# Running the iteration 6  of the GridSearchCV ####################
####################################################################################
***Starting [RandomForestRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [RandomForestRegressor] estimatorrun are
{'std_fit_time': array([ 0.02297403]), 'split2_train_score': array([ 0.92593972]), 'params': ({},), 'std_test_score': array([ 0.03039672]), 'mean_train_score': array([ 0.91929083]), 'std_train_score': array([ 0.00609522]), 'split1_test_score': array([ 0.6116484]), 'split1_train_score': array([ 0.91742606]), 'mean_fit_time': array([ 1.73905367]), 'split2_test_score': array([ 0.52893374]), 'mean_score_time': array([ 0.00609332]), 'split0_test_score': array([ 0.55883302]), 'split0_train_score': array([ 0.91021006]), 'split3_train_score': array([ 0.9235875]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.57042415]), 'split3_test_score': array([ 0.58228143]), 'std_score_time': array([  2.85392990e-05])}
GREP_ME***Best params of [RandomForestRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RandomForestRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.570424147462
####################################################################################
################# Running the iteration 7  of the GridSearchCV ####################
####################################################################################
***Starting [ElasticNet] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   5.9s
[CV]  ................................................................
[CV] ................................................. , total=   6.1s
GREP_ME***Results of [ElasticNet] estimatorrun are
{'std_fit_time': array([ 0.15488506]), 'split2_train_score': array([ 0.57634372]), 'params': ({},), 'std_test_score': array([ 0.02008079]), 'mean_train_score': array([ 0.56951238]), 'std_train_score': array([ 0.0047298]), 'split1_test_score': array([ 0.56010846]), 'split1_train_score': array([ 0.57033297]), 'mean_fit_time': array([ 6.07639426]), 'split2_test_score': array([ 0.52876993]), 'mean_score_time': array([ 0.0076372]), 'split0_test_score': array([ 0.58453656]), 'split0_train_score': array([ 0.56314993]), 'split3_train_score': array([ 0.56822291]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.55984692]), 'split3_test_score': array([ 0.56597273]), 'std_score_time': array([ 0.00592244])}
GREP_ME***Best params of [ElasticNet] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ElasticNet] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.559846919405
####################################################################################
################# Running the iteration 8  of the GridSearchCV ####################
####################################################################################
***Starting [HuberRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.6s
GREP_ME***Results of [HuberRegressor] estimatorrun are
{'std_fit_time': array([ 0.07256624]), 'split2_train_score': array([ 0.49324174]), 'params': ({},), 'std_test_score': array([ 0.02191807]), 'mean_train_score': array([ 0.4858231]), 'std_train_score': array([ 0.00497657]), 'split1_test_score': array([ 0.45910974]), 'split1_train_score': array([ 0.48482217]), 'mean_fit_time': array([ 0.69792235]), 'split2_test_score': array([ 0.48652865]), 'mean_score_time': array([ 0.00317103]), 'split0_test_score': array([ 0.51897098]), 'split0_train_score': array([ 0.47926511]), 'split3_train_score': array([ 0.48596337]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.48496637]), 'split3_test_score': array([ 0.47525613]), 'std_score_time': array([ 0.00064527])}
GREP_ME***Best params of [HuberRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [HuberRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.484966374572
####################################################################################
################# Running the iteration 9  of the GridSearchCV ####################
####################################################################################
***Starting [Lasso] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   5.2s
[CV]  ................................................................
[CV] ................................................. , total=   6.4s
[CV]  ................................................................
[CV] ................................................. , total=   6.3s
GREP_ME***Results of [Lasso] estimatorrun are
{'std_fit_time': array([ 0.58281714]), 'split2_train_score': array([ 0.67862569]), 'params': ({},), 'std_test_score': array([ 0.05099148]), 'mean_train_score': array([ 0.67127684]), 'std_train_score': array([ 0.00929997]), 'split1_test_score': array([ 0.56733065]), 'split1_train_score': array([ 0.66065852]), 'mean_fit_time': array([ 6.12717426]), 'split2_test_score': array([ 0.43128268]), 'mean_score_time': array([ 0.0099529]), 'split0_test_score': array([ 0.48853099]), 'split0_train_score': array([ 0.68223516]), 'split3_train_score': array([ 0.66358797]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.50515136]), 'split3_test_score': array([ 0.53346113]), 'std_score_time': array([ 0.00633989])}
GREP_ME***Best params of [Lasso] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [Lasso] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.50515136375
####################################################################################
################# Running the iteration 10  of the GridSearchCV ####################
####################################################################################
***Starting [LassoLars] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.4s
[CV]  ................................................................
[CV] ................................................. , total=   1.0s
[CV]  ................................................................
[CV] ................................................. , total=   1.5s
GREP_ME***Results of [LassoLars] estimatorrun are
{'std_fit_time': array([ 0.20536028]), 'split2_train_score': array([ 0.66797361]), 'params': ({},), 'std_test_score': array([ 0.03371008]), 'mean_train_score': array([ 0.6665978]), 'std_train_score': array([ 0.00839764]), 'split1_test_score': array([ 0.57561299]), 'split1_train_score': array([ 0.65625233]), 'mean_fit_time': array([ 1.36541402]), 'split2_test_score': array([ 0.4903007]), 'mean_score_time': array([ 0.00330627]), 'split0_test_score': array([ 0.50033264]), 'split0_train_score': array([ 0.67923531]), 'split3_train_score': array([ 0.66292996]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.52613207]), 'split3_test_score': array([ 0.53828197]), 'std_score_time': array([ 0.00172217])}
GREP_ME***Best params of [LassoLars] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LassoLars] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.526132074099
####################################################################################
################# Running the iteration 11  of the GridSearchCV ####################
####################################################################################
***Starting [LinearRegression] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.7s
[CV]  ................................................................
[CV] ................................................. , total=   0.6s
[CV]  ................................................................
[CV] ................................................. , total=   0.8s
[CV]  ................................................................
[CV] ................................................. , total=   0.8s
GREP_ME***Results of [LinearRegression] estimatorrun are
{'std_fit_time': array([ 0.06076879]), 'split2_train_score': array([ 0.67862674]), 'params': ({},), 'std_test_score': array([ 418581.42036024]), 'mean_train_score': array([ 0.6713051]), 'std_train_score': array([ 0.00929551]), 'split1_test_score': array([ 0.56690918]), 'split1_train_score': array([ 0.6607014]), 'mean_fit_time': array([ 0.73353642]), 'split2_test_score': array([-966671.85321053]), 'mean_score_time': array([ 0.00505632]), 'split0_test_score': array([ 0.48836569]), 'split0_train_score': array([ 0.68227872]), 'split3_train_score': array([ 0.66361352]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-241667.56604225]), 'split3_test_score': array([ 0.53376667]), 'std_score_time': array([ 0.00202546])}
GREP_ME***Best params of [LinearRegression] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearRegression] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-241667.566042
####################################################################################
################# Running the iteration 12  of the GridSearchCV ####################
####################################################################################
***Starting [PassiveAggressiveRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
GREP_ME***Results of [PassiveAggressiveRegressor] estimatorrun are
{'std_fit_time': array([ 0.02251512]), 'split2_train_score': array([-12.72948724]), 'params': ({},), 'std_test_score': array([ 6.40310506]), 'mean_train_score': array([-9.86305923]), 'std_train_score': array([ 6.0345828]), 'split1_test_score': array([-11.26759255]), 'split1_train_score': array([-14.19572334]), 'mean_fit_time': array([ 0.12587482]), 'split2_test_score': array([-15.80419744]), 'mean_score_time': array([ 0.01129276]), 'split0_test_score': array([-14.20633403]), 'split0_train_score': array([-13.0739062]), 'split3_train_score': array([ 0.54687988]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-10.18389141]), 'split3_test_score': array([ 0.54255837]), 'std_score_time': array([ 0.00628162])}
GREP_ME***Best params of [PassiveAggressiveRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [PassiveAggressiveRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-10.183891411
####################################################################################
################# Running the iteration 13  of the GridSearchCV ####################
####################################################################################
***Starting [Ridge] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   1.2s
[CV]  ................................................................
[CV] ................................................. , total=   1.2s
[CV]  ................................................................
[CV] ................................................. , total=   1.2s
[CV]  ................................................................
[CV] ................................................. , total=   1.2s
GREP_ME***Results of [Ridge] estimatorrun are
{'std_fit_time': array([ 0.03057254]), 'split2_train_score': array([ 0.67675379]), 'params': ({},), 'std_test_score': array([ 0.03733513]), 'mean_train_score': array([ 0.66971058]), 'std_train_score': array([ 0.00898796]), 'split1_test_score': array([ 0.57743409]), 'split1_train_score': array([ 0.65944832]), 'mean_fit_time': array([ 1.16588908]), 'split2_test_score': array([ 0.47715829]), 'mean_score_time': array([ 0.00944912]), 'split0_test_score': array([ 0.51911102]), 'split0_train_score': array([ 0.68034871]), 'split3_train_score': array([ 0.66229148]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.53104446]), 'split3_test_score': array([ 0.55047442]), 'std_score_time': array([ 0.0054684])}
GREP_ME***Best params of [Ridge] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [Ridge] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.53104445566
####################################################################################
################# Running the iteration 14  of the GridSearchCV ####################
####################################################################################
***Starting [SGDRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.1s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
GREP_ME***Results of [SGDRegressor] estimatorrun are
{'std_fit_time': array([ 0.02739903]), 'split2_train_score': array([ -4.75490031e+31]), 'params': ({},), 'std_test_score': array([  3.34833684e+32]), 'mean_train_score': array([ -3.51317528e+32]), 'std_train_score': array([  3.53764641e+32]), 'split1_test_score': array([ -3.90663454e+32]), 'split1_train_score': array([ -4.66981035e+32]), 'mean_fit_time': array([ 0.14093935]), 'split2_test_score': array([ -5.61791838e+31]), 'mean_score_time': array([ 0.01099616]), 'split0_test_score': array([ -1.18244935e+31]), 'split0_train_score': array([ -1.10587573e+31]), 'split3_train_score': array([ -8.79681315e+32]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ -3.26734212e+32]), 'split3_test_score': array([ -8.48269715e+32]), 'std_score_time': array([ 0.00430157])}
GREP_ME***Best params of [SGDRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SGDRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-3.2673421152e+32
####################################################################################
################# Running the iteration 15  of the GridSearchCV ####################
####################################################################################
***Starting [OrthogonalMatchingPursuit] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
[CV]  ................................................................
[CV] ................................................. , total=   0.2s
[CV]  ................................................................
[CV] ................................................. , total=   0.3s
GREP_ME***Results of [OrthogonalMatchingPursuit] estimatorrun are
{'std_fit_time': array([ 0.03335882]), 'split2_train_score': array([ 0.64124054]), 'params': ({},), 'std_test_score': array([ 0.02830325]), 'mean_train_score': array([ 0.63312041]), 'std_train_score': array([ 0.00702287]), 'split1_test_score': array([ 0.57097641]), 'split1_train_score': array([ 0.6241034]), 'mean_fit_time': array([ 0.24081212]), 'split2_test_score': array([ 0.49420686]), 'mean_score_time': array([ 0.0031181]), 'split0_test_score': array([ 0.5276875]), 'split0_train_score': array([ 0.63855071]), 'split3_train_score': array([ 0.62858701]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.53544284]), 'split3_test_score': array([ 0.54890059]), 'std_score_time': array([ 0.00103742])}
GREP_ME***Best params of [OrthogonalMatchingPursuit] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [OrthogonalMatchingPursuit] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.535442841501
####################################################################################
################# Running the iteration 16  of the GridSearchCV ####################
####################################################################################
***Starting [RANSACRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=  23.5s
[CV]  ................................................................
[CV] ................................................. , total=  24.4s
[CV]  ................................................................
[CV] ................................................. , total=  25.0s
GREP_ME***Results of [RANSACRegressor] estimatorrun are
{'std_fit_time': array([ 0.67656569]), 'split2_train_score': array([ 0.16196769]), 'params': ({},), 'std_test_score': array([ 0.26400603]), 'mean_train_score': array([ 0.0556524]), 'std_train_score': array([ 0.17036398]), 'split1_test_score': array([-0.01389571]), 'split1_train_score': array([ 0.10109823]), 'mean_fit_time': array([ 24.54243439]), 'split2_test_score': array([-0.12319581]), 'mean_score_time': array([ 0.00262165]), 'split0_test_score': array([-0.60394622]), 'split0_train_score': array([-0.23378326]), 'split3_train_score': array([ 0.19332695]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.16448933]), 'split3_test_score': array([ 0.08308043]), 'std_score_time': array([ 0.00097778])}
GREP_ME***Best params of [RANSACRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [RANSACRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.164489326666
####################################################################################
################# Running the iteration 17  of the GridSearchCV ####################
####################################################################################
***Starting [KNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [KNeighborsRegressor] estimatorrun are
{'std_fit_time': array([ 0.00235294]), 'split2_train_score': array([ 0.66232564]), 'params': ({},), 'std_test_score': array([ 0.0245529]), 'mean_train_score': array([ 0.66379299]), 'std_train_score': array([ 0.00350345]), 'split1_test_score': array([ 0.51917221]), 'split1_train_score': array([ 0.65977605]), 'mean_fit_time': array([ 0.13085258]), 'split2_test_score': array([ 0.47670709]), 'mean_score_time': array([ 0.22851568]), 'split0_test_score': array([ 0.46156328]), 'split0_train_score': array([ 0.66934308]), 'split3_train_score': array([ 0.66372719]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.47858246]), 'split3_test_score': array([ 0.45688726]), 'std_score_time': array([ 0.00132335])}
GREP_ME***Best params of [KNeighborsRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [KNeighborsRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.478582461161
####################################################################################
################# Running the iteration 18  of the GridSearchCV ####################
####################################################################################
***Starting [RadiusNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV]  ................................................................
GREP_ME***Error caught for  [RadiusNeighborsRegressor] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/data_mining/quick_solver.py in <module>()
    548         './dataset/test_names-td_cat-tdidf.csv',
    549         './dataset/test_names-tdidf_cat-count.csv',
    550         './dataset/test_names-tdidf_cat-td.csv',
    551         './dataset/test_names-tdidf_cat-tdidf.csv'
    552     ]
--> 553     for file in files: simple_experiment(file)
    554 
    555 
    556 
    557 

...........................................................................
/home/user/data_mining/quick_solver.py in simple_experiment(file_path='./dataset/test_names-count_cat-tdidf.csv')
    505             new_file = open(trg, "w")
    506             sys.stdout = new_file
    507             # set the itterator run to start from
    508             global itter_start
    509             itter_start = 0
--> 510             run_for_many(x_crr, y_crr, dsc, models_reg, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns]
        y_crr = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        dsc = 'quickRegtest_names-count_cat-tdidf'
        models_reg = [AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
    511             new_file.close()
    512             
    513     
    514     desc = "quickClass" + file_path.replace('.','').replace('/','').replace('dataset','').replace('csv','')

...........................................................................
/home/user/data_mining/quick_solver.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns], y=0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64, cl_n='quickRegtest_names-count_cat-tdidf', models=[AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...})
    397     errors = []
    398     errors_ind = []
    399     print("#########################################")
    400     print("###Starting all estimators for cl: " + str(cl_n))
    401     print("#########################################")
--> 402     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns]
        y = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        models = [AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...]
        models_cfg = {'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}
        errors = []
        errors_ind = []
        precomp_pipe = []
    403     print("#########################################")
    404     print("###Finished all estimators for cl: " + str(cl_n))
    405     print("#########################################")
    406 

...........................................................................
/home/user/data_mining/quick_solver.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l...        0          0  

[4812 rows x 489 columns], y=2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64, models=[AdaBoostRegressor(base_estimator=None, learning_...ar',
         n_estimators=50, random_state=None), BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), ElasticNet(alpha=1.0, copy_X=True, fit_intercept...selection='cyclic', tol=0.0001, warm_start=False), HuberRegressor(alpha=0.0001, epsilon=1.35, fit_i...ax_iter=100,
        tol=1e-05, warm_start=False), Lasso(alpha=1.0, copy_X=True, fit_intercept=True...selection='cyclic', tol=0.0001, warm_start=False), LassoLars(alpha=1.0, copy_X=True, eps=2.22044604...positive=False, precompute='auto', verbose=False), LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False), PassiveAggressiveRegressor(C=1.0, epsilon=0.1, f...       shuffle=True, verbose=0, warm_start=False), Ridge(alpha=1.0, copy_X=True, fit_intercept=True...lse, random_state=None, solver='auto', tol=0.001), SGDRegressor(alpha=0.0001, average=False, epsilo...=None, shuffle=True, verbose=0, warm_start=False), OrthogonalMatchingPursuit(fit_intercept=True, n_...     normalize=True, precompute='auto', tol=None), RANSACRegressor(base_estimator=None, is_data_val...liers=inf, stop_probability=0.99, stop_score=inf), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), MLPRegressor(activation='relu', alpha=0.0001, ba...tion=0.1,
       verbose=False, warm_start=False), SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, ...ter=-1, shrinking=True, tol=0.001, verbose=False), LinearSVR(C=1.0, dual=True, epsilon=0.0, fit_int...0,
     random_state=None, tol=0.0001, verbose=0), ...], models_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, results={'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -0.32519446822829068}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55128854383051717}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55984691940474518}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.54820852416049237}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59146511127893286}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48496637457190611}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.47858246116075492}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50515136374951231}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.52613207409892926}, 'LinearRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -241667.56604224886}, ...}, errors=[], errors_ind=[], precomp_pipe=[])
    386     for filename in os.listdir("./tmp"):
    387         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    388         # for model in models:
    389         for model in models:
    390             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 391                             results, errors, errors_ind)
        results = {'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -0.32519446822829068}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55128854383051717}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55984691940474518}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.54820852416049237}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59146511127893286}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48496637457190611}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.47858246116075492}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50515136374951231}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.52613207409892926}, 'LinearRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -241667.56604224886}, ...}
        errors = []
        errors_ind = []
    392 
    393 ## Function for trigrering gridserach and priting results
    394 def run_for_many(x, y, cl_n, models, models_cfg):
    395     results = {}

...........................................................................
/home/user/data_mining/quick_solver.py in run_grid_search(x=array([[ 1000.,   391.,   163., ...,     0.,    ....,   644.,   233., ...,     0.,     0.,     0.]]), y=2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64, model=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), model_cfg={'AdaBoostClassifier': {}, 'AdaBoostRegressor': {}, 'BaggingClassifier': {}, 'BaggingRegressor': {}, 'BayesianRidge': {}, 'DecisionTreeClassifier': {}, 'DecisionTreeRegressor': {}, 'ElasticNet': {}, 'ExtraTreeClassifier': {}, 'ExtraTreeRegressor': {}, ...}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'AdaBoostRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -0.32519446822829068}, 'BaggingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55128854383051717}, 'ElasticNet': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55984691940474518}, 'ExtraTreesRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.54820852416049237}, 'GradientBoostingRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59146511127893286}, 'HuberRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.48496637457190611}, 'KNeighborsRegressor': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.47858246116075492}, 'Lasso': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.50515136374951231}, 'LassoLars': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.52613207409892926}, 'LinearRegression': {'best_cfg': {}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': -241667.56604224886}, ...}, errors=[], errors_ind=[])
    299     print("##param_grid##")
    300     print(param_grid)
    301     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    302     # run the estimator, except exceptions, sape errors
    303     try:
--> 304         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[ 1000.,   391.,   163., ...,     0.,    ....,   644.,   233., ...,     0.,     0.,     0.]])
        y = 2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64
    305         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    306         print(estimator.cv_results_)
    307         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    308         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[ 1000.,   391.,   163., ...,     0.,    ....,   644.,   233., ...,     0.,     0.,     0.]]), y=2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[ 1000.,   391.,   163., ...,     0.,    ....,   644.,   233., ...,     0.,     0.,     0.]])
        y = 2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[ 1000.,   391.,   163., ...,     0.,    ....,   644.,   233., ...,     0.,     0.,     0.]]), y=2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sat Apr 22 19:05:02 2017
PID: 19732                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[ 1000.,   391.,   163., ...,     0.,   ....,   644.,   233., ...,     0.,     0.,     0.]]), 2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[ 1000.,   391.,   163., ...,     0.,   ....,   644.,   233., ...,     0.,     0.,     0.]]), 2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[ 1000.,   391.,   163., ...,     0.,   ....,   644.,   233., ...,     0.,     0.,     0.]]), y=2980     14314407
2286     32738814
1980     439...     89102315
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([1203, 1204, 1205, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1200, 1201, 1202]), verbose=2, parameters={}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    255                              " numeric value. (Hint: if using 'raise', please"
    256                              " make sure that it has been spelled correctly.)")
    257 
    258     else:
    259         fit_time = time.time() - start_time
--> 260         test_score = _score(estimator, X_test, y_test, scorer)
        test_score = undefined
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]])
        y_test = 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64
        scorer = <function _passthrough_scorer>
    261         score_time = time.time() - start_time - fit_time
    262         if return_train_score:
    263             train_score = _score(estimator, X_train, y_train, scorer)
    264 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X_test=memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]]), y_test=2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>)
    283 def _score(estimator, X_test, y_test, scorer):
    284     """Compute the score of an estimator on a given test set."""
    285     if y_test is None:
    286         score = scorer(estimator, X_test)
    287     else:
--> 288         score = scorer(estimator, X_test, y_test)
        score = undefined
        scorer = <function _passthrough_scorer>
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]])
        y_test = 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64
    289     if hasattr(score, 'item'):
    290         try:
    291             # e.g. unwrap memmapped scalars
    292             score = score.item()

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/scorer.py in _passthrough_scorer(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), *args=(memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]]), 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64), **kwargs={})
    214     return scorer
    215 
    216 
    217 def _passthrough_scorer(estimator, *args, **kwargs):
    218     """Function that wraps estimator.score"""
--> 219     return estimator.score(*args, **kwargs)
        estimator.score = <function Pipeline.score>
        args = (memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]]), 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64)
        kwargs = {}
    220 
    221 
    222 def check_scoring(estimator, scoring=None, allow_none=False):
    223     """Determine scorer from user options.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/metaestimators.py in <lambda>(*args=(memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]]), 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64), **kwargs={})
     49                     break
     50             else:
     51                 attrgetter(self.delegate_names[-1])(obj)
     52 
     53         # lambda, but not partial, allows help() to work with update_wrapper
---> 54         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)
        args = (memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]]), 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64)
        kwargs = {}
     55         # update the docstring of the returned function
     56         update_wrapper(out, self.fn)
     57         return out
     58 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in score(self=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]]), y=2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64)
    500         """
    501         Xt = X
    502         for name, transform in self.steps[:-1]:
    503             if transform is not None:
    504                 Xt = transform.transform(Xt)
--> 505         return self.steps[-1][-1].score(Xt, y)
        self.steps.score = undefined
        Xt = memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]])
        y = 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64
    506 
    507     @property
    508     def classes_(self):
    509         return self.steps[-1][-1].classes_

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/base.py in score(self=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), X=memmap([[   1000.,     391.,     163., ...,     ....,     782., ...,       0.,       0.,       0.]]), y=2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64, sample_weight=None)
    382             R^2 of self.predict(X) wrt. y.
    383         """
    384 
    385         from .metrics import r2_score
    386         return r2_score(y, self.predict(X), sample_weight=sample_weight,
--> 387                         multioutput='variance_weighted')
    388 
    389 
    390 ###############################################################################
    391 class ClusterMixin(object):

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in r2_score(y_true=2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64, y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), sample_weight=None, multioutput='variance_weighted')
    450     >>> y_pred = [3,2,1]
    451     >>> r2_score(y_true, y_pred)
    452     -3.0
    453     """
    454     y_type, y_true, y_pred, multioutput = _check_reg_targets(
--> 455         y_true, y_pred, multioutput)
        y_true = 2980     14314407
2286     32738814
1980     439...    677923379
Name: worldwide_gross, dtype: int64
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
        multioutput = 'variance_weighted'
    456 
    457     if sample_weight is not None:
    458         sample_weight = column_or_1d(sample_weight)
    459         weight = sample_weight[:, np.newaxis]

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in _check_reg_targets(y_true=array([ 14314407,  32738814,  43980363, ...,  23661038, 177200000,
       677923379]), y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), multioutput='variance_weighted')
     71         correct keyword.
     72 
     73     """
     74     check_consistent_length(y_true, y_pred)
     75     y_true = check_array(y_true, ensure_2d=False)
---> 76     y_pred = check_array(y_pred, ensure_2d=False)
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
     77 
     78     if y_true.ndim == 1:
     79         y_true = y_true.reshape((-1, 1))
     80 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in check_array(array=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), accept_sparse=None, dtype=None, order=None, copy=False, force_all_finite=True, ensure_2d=False, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=False, estimator=None)
    402             array = array.astype(np.float64)
    403         if not allow_nd and array.ndim >= 3:
    404             raise ValueError("Found array with dim %d. %s expected <= 2."
    405                              % (array.ndim, estimator_name))
    406         if force_all_finite:
--> 407             _assert_all_finite(array)
        array = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
    408 
    409     shape_repr = _shape_repr(array.shape)
    410     if ensure_min_samples > 0:
    411         n_samples = _num_samples(array)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in _assert_all_finite(X=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]))
     53     # everything is finite; fall back to O(n) space np.isfinite to prevent
     54     # false positives from overflow in sum method.
     55     if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())
     56             and not np.isfinite(X).all()):
     57         raise ValueError("Input contains NaN, infinity"
---> 58                          " or a value too large for %r." % X.dtype)
        X.dtype = dtype('float64')
     59 
     60 
     61 def assert_all_finite(X):
     62     """Throw a ValueError if X contains NaN or infinity.

ValueError: Input contains NaN, infinity or a value too large for dtype('float64').
___________________________________________________________________________
####################################################################################
################# Running the iteration 19  of the GridSearchCV ####################
####################################################################################
***Starting [MLPRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   4.6s
[CV]  ................................................................
[CV] ................................................. , total=   4.7s
[CV]  ................................................................
[CV] ................................................. , total=   4.7s
GREP_ME***Results of [MLPRegressor] estimatorrun are
{'std_fit_time': array([ 0.07764624]), 'split2_train_score': array([ 0.55708129]), 'params': ({},), 'std_test_score': array([ 0.01783877]), 'mean_train_score': array([ 0.5497381]), 'std_train_score': array([ 0.00537434]), 'split1_test_score': array([ 0.54579679]), 'split1_train_score': array([ 0.54965985]), 'mean_fit_time': array([ 4.70075577]), 'split2_test_score': array([ 0.52132739]), 'mean_score_time': array([ 0.01645952]), 'split0_test_score': array([ 0.57172796]), 'split0_train_score': array([ 0.54190943]), 'split3_train_score': array([ 0.55030181]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.5467333]), 'split3_test_score': array([ 0.54808105]), 'std_score_time': array([ 0.00491212])}
GREP_ME***Best params of [MLPRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [MLPRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.546733297905
####################################################################################
################# Running the iteration 20  of the GridSearchCV ####################
####################################################################################
***Starting [SVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [SVR] estimatorrun are
{'std_fit_time': array([ 0.0134148]), 'split2_train_score': array([-0.12931376]), 'params': ({},), 'std_test_score': array([ 0.00604293]), 'mean_train_score': array([-0.13181863]), 'std_train_score': array([ 0.0017631]), 'split1_test_score': array([-0.13449693]), 'split1_train_score': array([-0.13160091]), 'mean_fit_time': array([ 9.03004456]), 'split2_test_score': array([-0.13459665]), 'mean_score_time': array([ 2.98638451]), 'split0_test_score': array([-0.12234719]), 'split0_train_score': array([-0.13427677]), 'split3_train_score': array([-0.13208309]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.132456]), 'split3_test_score': array([-0.13838325]), 'std_score_time': array([ 0.03044282])}
GREP_ME***Best params of [SVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [SVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.132456003052
####################################################################################
################# Running the iteration 21  of the GridSearchCV ####################
####################################################################################
***Starting [LinearSVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
[CV]  ................................................................
[CV] ................................................. , total=   0.5s
GREP_ME***Results of [LinearSVR] estimatorrun are
{'std_fit_time': array([ 0.02959988]), 'split2_train_score': array([-0.36939254]), 'params': ({},), 'std_test_score': array([ 0.05972319]), 'mean_train_score': array([-0.31524406]), 'std_train_score': array([ 0.04077513]), 'split1_test_score': array([-0.26742884]), 'split1_train_score': array([-0.27468797]), 'mean_fit_time': array([ 0.47985923]), 'split2_test_score': array([-0.40490875]), 'mean_score_time': array([ 0.01152527]), 'split0_test_score': array([-0.25866195]), 'split0_train_score': array([-0.27697394]), 'split3_train_score': array([-0.33992179]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.31856018]), 'split3_test_score': array([-0.34324119]), 'std_score_time': array([ 0.00392901])}
GREP_ME***Best params of [LinearSVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [LinearSVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.318560181136
####################################################################################
################# Running the iteration 22  of the GridSearchCV ####################
####################################################################################
***Starting [NuSVR] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
[CV]  ................................................................
[CV] ................................................. , total=   7.4s
[CV]  ................................................................
[CV] ................................................. , total=   7.4s
GREP_ME***Results of [NuSVR] estimatorrun are
{'std_fit_time': array([ 0.04934869]), 'split2_train_score': array([-0.05251612]), 'params': ({},), 'std_test_score': array([ 0.00464129]), 'mean_train_score': array([-0.0523583]), 'std_train_score': array([ 0.00069894]), 'split1_test_score': array([-0.05837036]), 'split1_train_score': array([-0.05121413]), 'mean_fit_time': array([ 6.00059497]), 'split2_test_score': array([-0.04767645]), 'mean_score_time': array([ 1.47248363]), 'split0_test_score': array([-0.04821968]), 'split0_train_score': array([-0.05310992]), 'split3_train_score': array([-0.05259305]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([-0.05248685]), 'split3_test_score': array([-0.05568089]), 'std_score_time': array([ 0.03011271])}
GREP_ME***Best params of [NuSVR] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [NuSVR] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
-0.0524868460853
####################################################################################
################# Running the iteration 23  of the GridSearchCV ####################
####################################################################################
***Starting [DecisionTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [DecisionTreeRegressor] estimatorrun are
{'std_fit_time': array([ 0.03967996]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.1083897]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.08718314]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 0.45231229]), 'split2_test_score': array([ 0.35543498]), 'mean_score_time': array([ 0.00222874]), 'split0_test_score': array([ 0.34270352]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.27172952]), 'split3_test_score': array([ 0.30159643]), 'std_score_time': array([  4.91755297e-05])}
GREP_ME***Best params of [DecisionTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [DecisionTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.271729517692
####################################################################################
################# Running the iteration 24  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{}
Fitting 4 folds for each of 1 candidates, totalling 4 fits
GREP_ME***Results of [ExtraTreeRegressor] estimatorrun are
{'std_fit_time': array([ 0.06481953]), 'split2_train_score': array([ 1.]), 'params': ({},), 'std_test_score': array([ 0.10639209]), 'mean_train_score': array([ 1.]), 'std_train_score': array([ 0.]), 'split1_test_score': array([ 0.31520538]), 'split1_train_score': array([ 1.]), 'mean_fit_time': array([ 0.42456138]), 'split2_test_score': array([ 0.13002815]), 'mean_score_time': array([ 0.00231522]), 'split0_test_score': array([ 0.41217772]), 'split0_train_score': array([ 1.]), 'split3_train_score': array([ 1.]), 'rank_test_score': array([1], dtype=int32), 'mean_test_score': array([ 0.30445903]), 'split3_test_score': array([ 0.36042487]), 'std_score_time': array([  2.87575579e-05])}
GREP_ME***Best params of [ExtraTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{}
GREP_ME***Best score of [ExtraTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.304459029837
#########################################
###Finished all estimators for cl: quickRegtest_names-count_cat-tdidf
#########################################
#########################################
#######Printing results for cl: quickRegtest_names-count_cat-tdidf
#########################################
{'ElasticNet': {'score': 0.55984691940474518, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'RandomForestRegressor': {'score': 0.57042414746174475, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'RANSACRegressor': {'score': -0.16448932666586596, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'OrthogonalMatchingPursuit': {'score': 0.53544284150101662, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'DecisionTreeRegressor': {'score': 0.27172951769239662, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'Lasso': {'score': 0.50515136374951231, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'KNeighborsRegressor': {'score': 0.47858246116075492, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LinearSVR': {'score': -0.31856018113602663, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'SGDRegressor': {'score': -3.2673421152041694e+32, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'GradientBoostingRegressor': {'score': 0.59146511127893286, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'BaggingRegressor': {'score': 0.55128854383051717, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'ExtraTreesRegressor': {'score': 0.54820852416049237, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'ExtraTreeRegressor': {'score': 0.30445902983740752, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'PassiveAggressiveRegressor': {'score': -10.183891411037832, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'SVR': {'score': -0.13245600305216962, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'Ridge': {'score': 0.53104445566032821, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'MLPRegressor': {'score': 0.54673329790542002, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'AdaBoostRegressor': {'score': -0.32519446822829068, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LassoLars': {'score': 0.52613207409892926, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'LinearRegression': {'score': -241667.56604224886, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'HuberRegressor': {'score': 0.48496637457190611, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}, 'NuSVR': {'score': -0.052486846085298855, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'best_cfg': {}}}
priting simply sorted numbers, grep them to find the best cfg or cl: quickRegtest_names-count_cat-tdidf
[-3.2673421152041694e+32, -241667.56604224886, -10.183891411037832, -0.32519446822829068, -0.31856018113602663, -0.16448932666586596, -0.13245600305216962, -0.052486846085298855, 0.27172951769239662, 0.30445902983740752, 0.47858246116075492, 0.48496637457190611, 0.50515136374951231, 0.52613207409892926, 0.53104445566032821, 0.53544284150101662, 0.54673329790542002, 0.54820852416049237, 0.55128854383051717, 0.55984691940474518, 0.57042414746174475, 0.59146511127893286]
