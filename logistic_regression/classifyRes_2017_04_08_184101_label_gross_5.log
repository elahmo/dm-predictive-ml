#########################################
###Starting all estimators for cl: label_gross_5
#########################################
####################################################################################

####################################################################################
***Starting [LinearSVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__C': array([  1.00000000e-04,   1.00000000e+00,   1.00000000e+04]), 'model__loss': ['hinge', 'squared_hinge']}
Fitting 4 folds for each of 6 candidates, totalling 24 fits
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   5.7s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   6.2s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   5.7s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   5.5s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   5.9s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   5.9s
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   6.5s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   6.1s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   5.6s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   5.6s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   5.8s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   5.8s
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   6.9s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   5.9s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   5.6s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   5.5s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   6.0s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   5.7s
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   5.9s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   6.3s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   5.4s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   5.5s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   6.3s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   6.4s
GREP_ME***Results of [LinearSVC] estimatorrun are
{'split1_train_score': array([ 0.22942643,  0.28484345,  0.24466611,  0.29010806,  0.30534774,
        0.35854807]), 'param_model__loss': masked_array(data = ['hinge' 'squared_hinge' 'hinge' 'squared_hinge' 'hinge' 'squared_hinge'],
             mask = [False False False False False False],
       fill_value = ?)
, 'mean_test_score': array([ 0.29384871,  0.34351621,  0.29239401,  0.32065669,  0.31005819,
        0.27098919]), 'mean_score_time': array([ 0.01737535,  0.0034681 ,  0.003847  ,  0.00432646,  0.00336254,
        0.00344604]), 'std_train_score': array([ 0.04255926,  0.03805805,  0.07738115,  0.04458449,  0.05807183,
        0.08178946]), 'split3_train_score': array([ 0.31487123,  0.37524232,  0.19689837,  0.39158128,  0.4101357 ,
        0.35198006]), 'split3_test_score': array([ 0.29975021,  0.38384679,  0.20066611,  0.39550375,  0.4113239 ,
        0.35387177]), 'split1_test_score': array([ 0.21363259,  0.3117207 ,  0.24438903,  0.30340815,  0.29509559,
        0.35328346]), 'param_model__C': masked_array(data = [0.0001 0.0001 1.0 1.0 10000.0 10000.0],
             mask = [False False False False False False],
       fill_value = ?)
, 'std_fit_time': array([ 0.46777333,  0.1616229 ,  0.10179588,  0.04783413,  0.18854713,
        0.24502555]), 'mean_fit_time': array([ 6.26232171,  6.10944122,  5.56592751,  5.52798194,  5.98680919,
        5.96065503]), 'rank_test_score': array([4, 1, 5, 2, 3, 6], dtype=int32), 'split2_test_score': array([ 0.31447587,  0.359401  ,  0.40099834,  0.31863561,  0.29118136,
        0.18635607]), 'split0_train_score': array([ 0.34276206,  0.33028286,  0.31974487,  0.27620632,  0.25457571,
        0.18912923]), 'split0_test_score': array([ 0.34742952,  0.31923715,  0.32338308,  0.26533997,  0.24295191,
        0.1907131 ]), 'std_test_score': array([ 0.04942819,  0.02948672,  0.07657074,  0.04733374,  0.06191142,
        0.0825342 ]), 'split2_train_score': array([ 0.31468144,  0.37783934,  0.40110803,  0.32409972,  0.28864266,
        0.19445983]), 'params': ({'model__C': 0.0001, 'model__loss': 'hinge'}, {'model__C': 0.0001, 'model__loss': 'squared_hinge'}, {'model__C': 1.0, 'model__loss': 'hinge'}, {'model__C': 1.0, 'model__loss': 'squared_hinge'}, {'model__C': 10000.0, 'model__loss': 'hinge'}, {'model__C': 10000.0, 'model__loss': 'squared_hinge'}), 'mean_train_score': array([ 0.30043529,  0.34205199,  0.29060435,  0.32049885,  0.31467545,
        0.2735293 ]), 'std_score_time': array([  2.96901734e-03,   3.59991622e-04,   1.17201942e-03,
         1.43792736e-03,   8.34515264e-05,   2.95325292e-04])}
GREP_ME***Best params of [LinearSVC] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__C': 0.0001, 'model__loss': 'squared_hinge'}
GREP_ME***Best score of [LinearSVC] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.343516209476
#########################################
###Finished all estimators for cl: label_gross_5
#########################################
#########################################
######Printing all errors for cl: label_gross_5
#########################################
[]
#########################################
######Printing errors summary for cl: label_gross_5
#########################################
[]
#########################################
#######Printing results for cl: label_gross_5
#########################################
{'LinearSVC': {'score': 0.34351620947630923, 'best_cfg': {'model__C': 0.0001, 'model__loss': 'squared_hinge'}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy'}}
priting simply sorted numbers, grep them to find the best cfg or cl: label_gross_5
[0.34351620947630923]
