#########################################
###Starting all estimators for cl: label_gross_5
#########################################
####################################################################################

####################################################################################
***Starting [LinearSVC] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__C': array([  1.00000000e-04,   1.00000000e+00,   1.00000000e+04]), 'model__loss': ['hinge', 'squared_hinge']}
Fitting 4 folds for each of 6 candidates, totalling 24 fits
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   4.9s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   6.3s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   6.4s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   5.1s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   5.3s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   6.4s
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   5.6s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   6.5s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   6.4s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   4.7s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   5.4s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   6.0s
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   5.8s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   5.8s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   6.7s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   5.1s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   5.1s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   6.2s
[CV] model__C=0.0001, model__loss=hinge ..............................
[CV] ............... model__C=0.0001, model__loss=hinge, total=   6.0s
[CV] model__C=0.0001, model__loss=squared_hinge ......................
[CV] ....... model__C=0.0001, model__loss=squared_hinge, total=   6.2s
[CV] model__C=1.0, model__loss=hinge .................................
[CV] .................. model__C=1.0, model__loss=hinge, total=   6.6s
[CV] model__C=1.0, model__loss=squared_hinge .........................
[CV] .......... model__C=1.0, model__loss=squared_hinge, total=   5.3s
[CV] model__C=10000.0, model__loss=hinge .............................
[CV] .............. model__C=10000.0, model__loss=hinge, total=   5.4s
[CV] model__C=10000.0, model__loss=squared_hinge .....................
[CV] ...... model__C=10000.0, model__loss=squared_hinge, total=   5.5s
GREP_ME***Results of [LinearSVC] estimatorrun are
{'param_model__C': masked_array(data = [0.0001 0.0001 1.0 1.0 10000.0 10000.0],
             mask = [False False False False False False],
       fill_value = ?)
, 'split1_test_score': array([ 0.30008313,  0.32668329,  0.23773899,  0.28844555,  0.28512053,
        0.38487116]), 'mean_fit_time': array([ 5.5920859 ,  6.18067712,  6.49105865,  5.05538619,  5.28473371,
        6.02872998]), 'split3_test_score': array([ 0.17818485,  0.3122398 ,  0.27976686,  0.33388843,  0.24979184,
        0.24646128]), 'split3_train_score': array([ 0.18277485,  0.30960953,  0.27305456,  0.35502631,  0.25782332,
        0.25117696]), 'std_fit_time': array([ 0.4111211 ,  0.26822215,  0.14038231,  0.23660506,  0.13012675,
        0.33891701]), 'std_score_time': array([  1.30894508e-03,   1.50293491e-03,   7.74281313e-05,
         2.41209556e-03,   3.41567942e-04,   3.53707654e-03]), 'mean_score_time': array([ 0.00581402,  0.00385678,  0.00315493,  0.00460333,  0.00361097,
        0.00709975]), 'mean_train_score': array([ 0.29172153,  0.27795897,  0.27833819,  0.34816983,  0.30565481,
        0.33472418]), 'std_train_score': array([ 0.06334633,  0.05765287,  0.03070187,  0.03837508,  0.05875521,
        0.05416989]), 'param_model__loss': masked_array(data = ['hinge' 'squared_hinge' 'hinge' 'squared_hinge' 'hinge' 'squared_hinge'],
             mask = [False False False False False False],
       fill_value = ?)
, 'split0_test_score': array([ 0.32669983,  0.17827529,  0.3159204 ,  0.41873964,  0.41791045,
        0.33665008]), 'std_test_score': array([ 0.06530358,  0.06189529,  0.03088755,  0.04715893,  0.0673147 ,
        0.05460892]), 'split2_train_score': array([ 0.3365651 ,  0.30166205,  0.29806094,  0.32908587,  0.26454294,
        0.38781163]), 'split0_train_score': array([ 0.33139212,  0.17886855,  0.3114254 ,  0.40626733,  0.40432612,
        0.32279534]), 'split1_train_score': array([ 0.31615406,  0.32169576,  0.23081186,  0.30229981,  0.29592685,
        0.37711277]), 'split2_test_score': array([ 0.34608985,  0.32279534,  0.30948419,  0.33361065,  0.26123128,
        0.37520799]), 'params': ({'model__loss': 'hinge', 'model__C': 0.0001}, {'model__loss': 'squared_hinge', 'model__C': 0.0001}, {'model__loss': 'hinge', 'model__C': 1.0}, {'model__loss': 'squared_hinge', 'model__C': 1.0}, {'model__loss': 'hinge', 'model__C': 10000.0}, {'model__loss': 'squared_hinge', 'model__C': 10000.0}), 'rank_test_score': array([4, 6, 5, 1, 3, 2], dtype=int32), 'mean_test_score': array([ 0.28782211,  0.28491272,  0.28574397,  0.34372402,  0.30361596,
        0.3358271 ])}
GREP_ME***Best params of [LinearSVC] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__loss': 'squared_hinge', 'model__C': 1.0}
GREP_ME***Best score of [LinearSVC] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.343724023275
#########################################
###Finished all estimators for cl: label_gross_5
#########################################
#########################################
######Printing all errors for cl: label_gross_5
#########################################
[]
#########################################
######Printing errors summary for cl: label_gross_5
#########################################
[]
#########################################
#######Printing results for cl: label_gross_5
#########################################
{'LinearSVC': {'best_cfg': {'model__loss': 'squared_hinge', 'model__C': 1.0}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.34372402327514545}}
priting simply sorted numbers, grep them to find the best cfg or cl: label_gross_5
[0.34372402327514545]
