#########################################
###Starting all estimators for cl: all_samples
#########################################
####################################################################################
################# Runing the itteration 1  of pipeline precomp      ###############
####################################################################################
| preprocessor:dummy | transfomer: dummy | reducer: dummy
{}
Starting precomp pipline for {}
Finished precomp pipline for {}
Pre-computation of pre-processing models completed in 0:00:00.048081
####################################################################################
################# Running the iteration 2  of the GridSearchCV ####################
####################################################################################
***Starting [BaggingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__max_features': [0.5, 1.0], 'model__max_samples': [0.5, 1.0], 'model__n_estimators': [10, 20, 30, 40]}
Fitting 4 folds for each of 16 candidates, totalling 64 fits
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=10 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=10, total=   0.4s
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=20 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=20, total=   0.8s
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=30 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=30, total=   1.1s
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=40 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=40, total=   1.5s
[CV] model__max_features=0.5, model__max_samples=1.0, model__n_estimators=20 
[CV]  model__max_features=0.5, model__max_samples=1.0, model__n_estimators=20, total=   0.9s
[CV] model__max_features=0.5, model__max_samples=1.0, model__n_estimators=30 
[CV]  model__max_features=0.5, model__max_samples=1.0, model__n_estimators=30, total=   1.2s
[CV] model__max_features=0.5, model__max_samples=1.0, model__n_estimators=40 
[CV]  model__max_features=0.5, model__max_samples=1.0, model__n_estimators=40, total=   1.6s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=10 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=10, total=   0.6s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=20 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=20, total=   1.1s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=30 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=30, total=   1.5s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=40 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=40, total=   2.8s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=10 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=10, total=   0.8s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=20 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=20, total=   1.6s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=30 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=30, total=   2.5s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=40 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=40, total=   3.2s
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=10 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=10, total=   0.3s
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=20 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=20, total=   0.6s
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=30 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=30, total=   0.8s
[CV] model__max_features=0.5, model__max_samples=0.5, model__n_estimators=40 
[CV]  model__max_features=0.5, model__max_samples=0.5, model__n_estimators=40, total=   1.2s
[CV] model__max_features=0.5, model__max_samples=1.0, model__n_estimators=10 
[CV]  model__max_features=0.5, model__max_samples=1.0, model__n_estimators=10, total=   0.5s
[CV] model__max_features=0.5, model__max_samples=1.0, model__n_estimators=20 
[CV]  model__max_features=0.5, model__max_samples=1.0, model__n_estimators=20, total=   1.0s
[CV] model__max_features=0.5, model__max_samples=1.0, model__n_estimators=30 
[CV]  model__max_features=0.5, model__max_samples=1.0, model__n_estimators=30, total=   1.3s
[CV] model__max_features=0.5, model__max_samples=1.0, model__n_estimators=40 
[CV]  model__max_features=0.5, model__max_samples=1.0, model__n_estimators=40, total=   1.5s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=10 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=10, total=   0.5s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=10 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=10, total=   0.5s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=20 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=20, total=   1.0s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=30 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=30, total=   1.6s
[CV] model__max_features=1.0, model__max_samples=0.5, model__n_estimators=40 
[CV]  model__max_features=1.0, model__max_samples=0.5, model__n_estimators=40, total=   2.2s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=10 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=10, total=   0.8s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=20 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=20, total=   1.7s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=30 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=30, total=   2.5s
[CV] model__max_features=1.0, model__max_samples=1.0, model__n_estimators=40 
[CV]  model__max_features=1.0, model__max_samples=1.0, model__n_estimators=40, total=   3.4s
GREP_ME***Results of [BaggingRegressor] estimatorrun are
{'std_fit_time': array([ 0.04171733,  0.0835186 ,  0.12179361,  0.14678487,  0.01353354,
        0.11578077,  0.05717916,  0.07552847,  0.01586847,  0.15079842,
        0.14513087,  0.28320246,  0.0201976 ,  0.04956696,  0.11020799,
        0.08394031]), 'param_model__max_features': masked_array(data = [0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0],
             mask = [False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'params': ({'model__max_features': 0.5, 'model__max_samples': 0.5, 'model__n_estimators': 10}, {'model__max_features': 0.5, 'model__max_samples': 0.5, 'model__n_estimators': 20}, {'model__max_features': 0.5, 'model__max_samples': 0.5, 'model__n_estimators': 30}, {'model__max_features': 0.5, 'model__max_samples': 0.5, 'model__n_estimators': 40}, {'model__max_features': 0.5, 'model__max_samples': 1.0, 'model__n_estimators': 10}, {'model__max_features': 0.5, 'model__max_samples': 1.0, 'model__n_estimators': 20}, {'model__max_features': 0.5, 'model__max_samples': 1.0, 'model__n_estimators': 30}, {'model__max_features': 0.5, 'model__max_samples': 1.0, 'model__n_estimators': 40}, {'model__max_features': 1.0, 'model__max_samples': 0.5, 'model__n_estimators': 10}, {'model__max_features': 1.0, 'model__max_samples': 0.5, 'model__n_estimators': 20}, {'model__max_features': 1.0, 'model__max_samples': 0.5, 'model__n_estimators': 30}, {'model__max_features': 1.0, 'model__max_samples': 0.5, 'model__n_estimators': 40}, {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 10}, {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 20}, {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 30}, {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 40}), 'rank_test_score': array([16, 12, 10, 13, 15, 11, 14,  9,  8,  5,  2,  3,  7,  6,  4,  1], dtype=int32), 'mean_score_time': array([ 0.01886326,  0.03551573,  0.04932326,  0.0633589 ,  0.01664835,
        0.03781611,  0.04753906,  0.06637049,  0.02309775,  0.0542084 ,
        0.07796299,  0.1046648 ,  0.01666915,  0.04789042,  0.08617002,
        0.09969145]), 'split0_test_score': array([ 0.34520594,  0.53998488,  0.55456557,  0.49445329,  0.44372063,
        0.58707549,  0.49156661,  0.55852659,  0.55789665,  0.57513591,
        0.60310658,  0.58975326,  0.57290817,  0.57904421,  0.59572128,
        0.6058166 ]), 'split3_test_score': array([ 0.37598202,  0.53737857,  0.55160535,  0.51199718,  0.56175139,
        0.50812734,  0.48706746,  0.56697746,  0.54792254,  0.57030678,
        0.58712835,  0.58701565,  0.56588734,  0.57437653,  0.58020594,
        0.58473349]), 'split2_train_score': array([ 0.75979182,  0.8066937 ,  0.81482201,  0.80938055,  0.89834302,
        0.92037928,  0.91528702,  0.93470495,  0.82012742,  0.8274414 ,
        0.8442266 ,  0.84108585,  0.9154224 ,  0.93546127,  0.93078364,
        0.94041599]), 'split2_test_score': array([ 0.31079531,  0.47834369,  0.51650313,  0.45507962,  0.40412759,
        0.49537727,  0.44937051,  0.535567  ,  0.57823017,  0.58567437,
        0.56746245,  0.56984905,  0.57579247,  0.57727735,  0.57562405,
        0.59919926]), 'std_test_score': array([ 0.02405631,  0.027871  ,  0.01550478,  0.02327087,  0.05844993,
        0.03526433,  0.01638624,  0.02569217,  0.02171785,  0.0149086 ,
        0.01712555,  0.0113993 ,  0.01764942,  0.01536072,  0.01972287,
        0.02201218]), 'std_train_score': array([ 0.01730635,  0.00333508,  0.00389707,  0.00465026,  0.00645337,
        0.00435229,  0.00527234,  0.00478156,  0.00791267,  0.0072007 ,
        0.00365649,  0.00332805,  0.00338122,  0.00355463,  0.00452622,
        0.00283022]), 'param_model__max_samples': masked_array(data = [0.5 0.5 0.5 0.5 1.0 1.0 1.0 1.0 0.5 0.5 0.5 0.5 1.0 1.0 1.0 1.0],
             mask = [False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'mean_train_score': array([ 0.74910184,  0.8085508 ,  0.82088526,  0.80713915,  0.89884963,
        0.9245311 ,  0.91671972,  0.92920331,  0.81614695,  0.83308675,
        0.83814449,  0.8420763 ,  0.91866615,  0.93434543,  0.9358613 ,
        0.94011802]), 'split0_train_score': array([ 0.7630497 ,  0.80651299,  0.82092267,  0.80079314,  0.8935515 ,
        0.92535341,  0.91104622,  0.9306517 ,  0.81882236,  0.83987378,
        0.83461281,  0.84545099,  0.9237002 ,  0.93794803,  0.94073916,
        0.93828673]), 'split1_train_score': array([ 0.75389592,  0.80667042,  0.82219099,  0.81323991,  0.89396068,
        0.9313102 ,  0.92535711,  0.92154881,  0.82295039,  0.84054133,
        0.83748668,  0.84469808,  0.91980379,  0.92843755,  0.93193934,
        0.94458757]), 'std_score_time': array([ 0.00106045,  0.00522862,  0.01253523,  0.00937675,  0.00199225,
        0.00753951,  0.00230305,  0.0027594 ,  0.00214595,  0.00883116,
        0.01160104,  0.0010425 ,  0.00403496,  0.00129051,  0.00714354,
        0.00617466]), 'mean_fit_time': array([ 0.35829455,  0.6053983 ,  0.88685882,  1.17299068,  0.44426674,
        0.90353686,  1.17987972,  1.54790932,  0.53356618,  1.12964898,
        1.59407979,  2.21025097,  0.79057968,  1.58985257,  2.50079119,
        3.19871801]), 'split3_train_score': array([ 0.71966992,  0.81432608,  0.82560537,  0.80514299,  0.90954332,
        0.92108151,  0.91518853,  0.92990777,  0.80268764,  0.82449048,
        0.83625185,  0.83707027,  0.91573822,  0.93553486,  0.93998305,
        0.9371818 ]), 'param_model__n_estimators': masked_array(data = [10 20 30 40 10 20 30 40 10 20 30 40 10 20 30 40],
             mask = [False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'mean_test_score': array([ 0.34003664,  0.51105986,  0.53856338,  0.49341439,  0.46560886,
        0.52837575,  0.47591136,  0.54042398,  0.55051198,  0.56905178,
        0.57921819,  0.57731562,  0.56155394,  0.56808319,  0.57330649,
        0.58466105]), 'split1_test_score': array([ 0.3281633 ,  0.48853228,  0.53157946,  0.51212746,  0.45283584,
        0.52292288,  0.47564084,  0.50062489,  0.51799855,  0.54509006,
        0.55917537,  0.56264452,  0.53162777,  0.54163467,  0.54167471,
        0.54889484])}
GREP_ME***Best params of [BaggingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 40}
GREP_ME***Best score of [BaggingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.584661048069
####################################################################################
################# Running the iteration 3  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreesRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__max_features': ['auto', 'sqrt', 'log2'], 'model__max_depth': [1, 2, 3, 4, 5], 'model__n_estimators': [100, 200, 300, 400]}
Fitting 4 folds for each of 60 candidates, totalling 240 fits
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=100, total=   1.4s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=200, total=   2.4s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=300, total=   4.1s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=400, total=   5.3s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=300, total=   0.6s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=400, total=   0.7s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=100, total=   0.2s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=300, total=   0.6s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=400, total=   0.8s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=100, total=   2.1s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=200, total=   4.0s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=300, total=   6.3s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=400, total=   8.9s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=100, total=   0.3s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=100, total=   0.5s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=200, total=   1.1s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=300, total=   1.0s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=400, total=   1.3s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=200, total=   0.5s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=300, total=   0.7s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=400, total=   1.3s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=100, total=   2.7s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=200, total=   5.5s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=300, total=   8.0s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=400, total=  11.2s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=200, total=   0.8s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=200, total=   0.8s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=300, total=   1.1s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=400, total=   1.4s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=200, total=   0.5s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=300, total=   0.9s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=400, total=   1.2s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=100, total=   3.2s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=200, total=   6.9s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=300, total=  10.1s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=400, total=  14.1s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=200, total=   0.8s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=300, total=   1.6s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=400, total=   1.7s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=200, total=   0.6s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=300 [CV] model__max_features=auto, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=100, total=   1.3s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=200, total=   2.7s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=300, total=   3.4s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=400, total=   4.8s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=100, total=   0.2s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=100, total=   0.2s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=300, total=   0.6s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=400, total=   0.8s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=100, total=   0.2s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=300, total=   0.6s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=400, total=   0.8s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=100, total=   2.4s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=200, total=   3.9s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=300, total=   6.3s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=400, total=   9.0s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=100, total=   0.3s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=200, total=   0.6s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=300, total=   0.9s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=400, total=   1.2s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=200, total=   0.7s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=300, total=   0.9s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=400, total=   0.9s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=100, total=   3.5s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=200, total=   8.0s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=300, total=   9.6s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=400, total=  10.3s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=400, total=   1.5s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=200, total=   0.6s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=300, total=   0.9s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=400, total=   1.1s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=100, total=   3.6s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=200, total=   6.2s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=300, total=  10.8s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=400, total=  14.4s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=200, total=   0.9s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=300, total=   1.4s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=400, total=   1.7s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=200, total=   0.6s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=300, total=   1.2s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=400, total=   1.5s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=100, total=   4.0s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=200 [CV] model__max_features=auto, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=100, total=   1.2s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=200, total=   2.6s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=300, total=   3.4s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=400, total=   4.9s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=100, total=   0.2s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=100, total=   0.2s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=300, total=   0.6s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=400, total=   0.8s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=100, total=   0.2s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=300, total=   0.5s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=400, total=   0.7s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=100, total=   2.3s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=200, total=   5.4s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=300, total=   6.2s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=400, total=   8.7s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=200, total=   0.8s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=300, total=   1.3s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=400, total=   1.5s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=200, total=   0.5s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=300, total=   0.7s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=400, total=   0.9s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=100, total=   2.9s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=200, total=   5.7s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=300, total=   8.0s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=400, total=  12.2s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=200, total=   0.8s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=300, total=   1.1s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=300, total=   0.9s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=400, total=   1.4s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=200, total=   0.6s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=300, total=   1.1s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=400, total=   1.2s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=100, total=   2.9s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=200, total=   6.7s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=300, total=  11.7s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=400, total=  13.4s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=100, total=   0.5s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=200, total=   0.9s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=300, total=   1.5s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=400, total=   1.8s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=200, total=   0.6s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=300, total=   0.9s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=400, total=   1.3s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=100, total=   4.1s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=200, total=   9.4s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=300 [CV] model__max_features=auto, model__max_depth=1, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=100, total=   1.3s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=200, total=   2.7s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=300, total=   3.6s
[CV] model__max_features=auto, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=1, model__n_estimators=400, total=   4.9s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=300, total=   0.6s
[CV] model__max_features=sqrt, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=1, model__n_estimators=400, total=   0.7s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=200, total=   0.4s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=300, total=   0.5s
[CV] model__max_features=log2, model__max_depth=1, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=1, model__n_estimators=400, total=   0.7s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=100, total=   2.3s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=200, total=   4.1s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=300, total=   6.4s
[CV] model__max_features=auto, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=2, model__n_estimators=400, total=   9.9s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=200, total=   0.7s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=300, total=   1.1s
[CV] model__max_features=sqrt, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=2, model__n_estimators=400, total=   1.4s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=200, total=   0.5s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=300, total=   0.7s
[CV] model__max_features=log2, model__max_depth=2, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=2, model__n_estimators=400, total=   0.9s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=100, total=   3.7s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=200, total=   5.2s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=300, total=   8.0s
[CV] model__max_features=auto, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=3, model__n_estimators=400, total=  12.9s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=200, total=   0.8s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=300, total=   1.1s
[CV] model__max_features=sqrt, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=3, model__n_estimators=400, total=   1.4s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=200, total=   0.5s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=300, total=   0.9s
[CV] model__max_features=log2, model__max_depth=3, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=3, model__n_estimators=400, total=   1.2s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=100, total=   3.1s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=200, total=   7.1s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=300, total=  11.0s
[CV] model__max_features=auto, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=4, model__n_estimators=400, total=  14.1s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=200, total=   0.9s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=300, total=   1.4s
[CV] model__max_features=sqrt, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=4, model__n_estimators=400, total=   1.8s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=200, total=   0.7s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=300, total=   0.9s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=400, total=   1.2s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=100, total=   4.9s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=200, total=   8.0s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=300, total=  12.0s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=300, total=  11.3s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=400, total=  15.9s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=200, total=   1.1s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=300, total=   1.5s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=400, total=   2.0s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=100, total=   0.4s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=100, total=   0.3s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=200, total=   0.8s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=300, total=   1.1s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=400, total=   1.5s

[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=200, total=   8.3s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=300, total=  11.7s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=400, total=  16.3s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=200, total=   1.1s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=300, total=   1.8s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=400, total=   2.4s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=100, total=   0.4s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=200, total=   0.7s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=300, total=   1.1s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=400, total=   1.5s

[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=300, total=   0.9s
[CV] model__max_features=log2, model__max_depth=4, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=4, model__n_estimators=400, total=   1.3s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=100, total=   4.2s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=200, total=   8.1s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=300, total=  10.9s
[CV] model__max_features=auto, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=auto, model__max_depth=5, model__n_estimators=400, total=  16.4s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=100, total=   0.6s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=100, total=   0.5s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=100, total=   0.4s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=200, total=   1.2s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=300, total=   1.5s
[CV] model__max_features=sqrt, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=sqrt, model__max_depth=5, model__n_estimators=400, total=   2.1s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=100 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=100, total=   0.4s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=200 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=200, total=   0.8s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=300 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=300, total=   1.1s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=400, total=   1.4s
[CV] model__max_features=log2, model__max_depth=5, model__n_estimators=400 
[CV]  model__max_features=log2, model__max_depth=5, model__n_estimators=400, total=   1.5s
GREP_ME***Results of [ExtraTreesRegressor] estimatorrun are
{'std_fit_time': array([ 0.056864  ,  0.12349522,  0.28554981,  0.18718094,  0.01330203,
        0.03211275,  0.00537786,  0.05118261,  0.06673714,  0.00797904,
        0.02586185,  0.0584138 ,  0.11535394,  0.61158806,  0.09440425,
        0.47113604,  0.06986309,  0.16690635,  0.13943034,  0.07287978,
        0.02007699,  0.11041049,  0.09700781,  0.17061196,  0.39335608,
        1.09134915,  0.68444824,  0.97843849,  0.01402886,  0.00437291,
        0.06423558,  0.03501492,  0.01722072,  0.02667838,  0.0722841 ,
        0.05217458,  0.25725288,  0.31631107,  0.58891618,  0.36686164,
        0.01378776,  0.05063539,  0.08280496,  0.02975332,  0.01306191,
        0.06863233,  0.1526492 ,  0.13457553,  0.3581531 ,  0.56312582,
        0.41467577,  0.20192661,  0.03993779,  0.17116907,  0.14167659,
        0.16705359,  0.03940649,  0.14398635,  0.3242418 ,  0.02702928]), 'param_model__max_features': masked_array(data = ['auto' 'auto' 'auto' 'auto' 'sqrt' 'sqrt' 'sqrt' 'sqrt' 'log2' 'log2'
 'log2' 'log2' 'auto' 'auto' 'auto' 'auto' 'sqrt' 'sqrt' 'sqrt' 'sqrt'
 'log2' 'log2' 'log2' 'log2' 'auto' 'auto' 'auto' 'auto' 'sqrt' 'sqrt'
 'sqrt' 'sqrt' 'log2' 'log2' 'log2' 'log2' 'auto' 'auto' 'auto' 'auto'
 'sqrt' 'sqrt' 'sqrt' 'sqrt' 'log2' 'log2' 'log2' 'log2' 'auto' 'auto'
 'auto' 'auto' 'sqrt' 'sqrt' 'sqrt' 'sqrt' 'log2' 'log2' 'log2' 'log2'],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False],
       fill_value = ?)
, 'params': ({'model__max_features': 'auto', 'model__max_depth': 1, 'model__n_estimators': 100}, {'model__max_features': 'auto', 'model__max_depth': 1, 'model__n_estimators': 200}, {'model__max_features': 'auto', 'model__max_depth': 1, 'model__n_estimators': 300}, {'model__max_features': 'auto', 'model__max_depth': 1, 'model__n_estimators': 400}, {'model__max_features': 'sqrt', 'model__max_depth': 1, 'model__n_estimators': 100}, {'model__max_features': 'sqrt', 'model__max_depth': 1, 'model__n_estimators': 200}, {'model__max_features': 'sqrt', 'model__max_depth': 1, 'model__n_estimators': 300}, {'model__max_features': 'sqrt', 'model__max_depth': 1, 'model__n_estimators': 400}, {'model__max_features': 'log2', 'model__max_depth': 1, 'model__n_estimators': 100}, {'model__max_features': 'log2', 'model__max_depth': 1, 'model__n_estimators': 200}, {'model__max_features': 'log2', 'model__max_depth': 1, 'model__n_estimators': 300}, {'model__max_features': 'log2', 'model__max_depth': 1, 'model__n_estimators': 400}, {'model__max_features': 'auto', 'model__max_depth': 2, 'model__n_estimators': 100}, {'model__max_features': 'auto', 'model__max_depth': 2, 'model__n_estimators': 200}, {'model__max_features': 'auto', 'model__max_depth': 2, 'model__n_estimators': 300}, {'model__max_features': 'auto', 'model__max_depth': 2, 'model__n_estimators': 400}, {'model__max_features': 'sqrt', 'model__max_depth': 2, 'model__n_estimators': 100}, {'model__max_features': 'sqrt', 'model__max_depth': 2, 'model__n_estimators': 200}, {'model__max_features': 'sqrt', 'model__max_depth': 2, 'model__n_estimators': 300}, {'model__max_features': 'sqrt', 'model__max_depth': 2, 'model__n_estimators': 400}, {'model__max_features': 'log2', 'model__max_depth': 2, 'model__n_estimators': 100}, {'model__max_features': 'log2', 'model__max_depth': 2, 'model__n_estimators': 200}, {'model__max_features': 'log2', 'model__max_depth': 2, 'model__n_estimators': 300}, {'model__max_features': 'log2', 'model__max_depth': 2, 'model__n_estimators': 400}, {'model__max_features': 'auto', 'model__max_depth': 3, 'model__n_estimators': 100}, {'model__max_features': 'auto', 'model__max_depth': 3, 'model__n_estimators': 200}, {'model__max_features': 'auto', 'model__max_depth': 3, 'model__n_estimators': 300}, {'model__max_features': 'auto', 'model__max_depth': 3, 'model__n_estimators': 400}, {'model__max_features': 'sqrt', 'model__max_depth': 3, 'model__n_estimators': 100}, {'model__max_features': 'sqrt', 'model__max_depth': 3, 'model__n_estimators': 200}, {'model__max_features': 'sqrt', 'model__max_depth': 3, 'model__n_estimators': 300}, {'model__max_features': 'sqrt', 'model__max_depth': 3, 'model__n_estimators': 400}, {'model__max_features': 'log2', 'model__max_depth': 3, 'model__n_estimators': 100}, {'model__max_features': 'log2', 'model__max_depth': 3, 'model__n_estimators': 200}, {'model__max_features': 'log2', 'model__max_depth': 3, 'model__n_estimators': 300}, {'model__max_features': 'log2', 'model__max_depth': 3, 'model__n_estimators': 400}, {'model__max_features': 'auto', 'model__max_depth': 4, 'model__n_estimators': 100}, {'model__max_features': 'auto', 'model__max_depth': 4, 'model__n_estimators': 200}, {'model__max_features': 'auto', 'model__max_depth': 4, 'model__n_estimators': 300}, {'model__max_features': 'auto', 'model__max_depth': 4, 'model__n_estimators': 400}, {'model__max_features': 'sqrt', 'model__max_depth': 4, 'model__n_estimators': 100}, {'model__max_features': 'sqrt', 'model__max_depth': 4, 'model__n_estimators': 200}, {'model__max_features': 'sqrt', 'model__max_depth': 4, 'model__n_estimators': 300}, {'model__max_features': 'sqrt', 'model__max_depth': 4, 'model__n_estimators': 400}, {'model__max_features': 'log2', 'model__max_depth': 4, 'model__n_estimators': 100}, {'model__max_features': 'log2', 'model__max_depth': 4, 'model__n_estimators': 200}, {'model__max_features': 'log2', 'model__max_depth': 4, 'model__n_estimators': 300}, {'model__max_features': 'log2', 'model__max_depth': 4, 'model__n_estimators': 400}, {'model__max_features': 'auto', 'model__max_depth': 5, 'model__n_estimators': 100}, {'model__max_features': 'auto', 'model__max_depth': 5, 'model__n_estimators': 200}, {'model__max_features': 'auto', 'model__max_depth': 5, 'model__n_estimators': 300}, {'model__max_features': 'auto', 'model__max_depth': 5, 'model__n_estimators': 400}, {'model__max_features': 'sqrt', 'model__max_depth': 5, 'model__n_estimators': 100}, {'model__max_features': 'sqrt', 'model__max_depth': 5, 'model__n_estimators': 200}, {'model__max_features': 'sqrt', 'model__max_depth': 5, 'model__n_estimators': 300}, {'model__max_features': 'sqrt', 'model__max_depth': 5, 'model__n_estimators': 400}, {'model__max_features': 'log2', 'model__max_depth': 5, 'model__n_estimators': 100}, {'model__max_features': 'log2', 'model__max_depth': 5, 'model__n_estimators': 200}, {'model__max_features': 'log2', 'model__max_depth': 5, 'model__n_estimators': 300}, {'model__max_features': 'log2', 'model__max_depth': 5, 'model__n_estimators': 400}), 'rank_test_score': array([20, 17, 19, 18, 54, 53, 55, 56, 59, 57, 58, 60, 15, 13, 16, 14, 44,
       41, 42, 45, 52, 50, 51, 49, 12, 10, 11,  9, 35, 31, 36, 33, 43, 48,
       46, 47,  8,  5,  7,  6, 25, 26, 27, 28, 39, 40, 37, 38,  1,  2,  3,
        4, 21, 24, 22, 23, 30, 29, 34, 32], dtype=int32), 'param_model__max_depth': masked_array(data = [1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4
 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False],
       fill_value = ?)
, 'mean_score_time': array([ 0.0205614 ,  0.02577585,  0.03851879,  0.05243045,  0.01429909,
        0.02526307,  0.03931171,  0.04952186,  0.01483661,  0.02729428,
        0.0402956 ,  0.06724316,  0.01452124,  0.02778447,  0.041484  ,
        0.06037492,  0.0225088 ,  0.03823102,  0.04782045,  0.06256735,
        0.01665729,  0.03635532,  0.04736018,  0.06900573,  0.01946664,
        0.03021872,  0.0442363 ,  0.05884421,  0.01693594,  0.0296278 ,
        0.04215711,  0.05974793,  0.01572645,  0.02971584,  0.05013895,
        0.06358975,  0.01718134,  0.03218234,  0.05265373,  0.0723843 ,
        0.01674527,  0.03212881,  0.05235553,  0.07134372,  0.01613492,
        0.04219812,  0.04927391,  0.06123561,  0.01739293,  0.03927809,
        0.05567211,  0.07145256,  0.01730716,  0.03288966,  0.0562706 ,
        0.06613564,  0.01746494,  0.03655416,  0.05341589,  0.06241399]), 'split0_test_score': array([ 0.28967565,  0.28868935,  0.28888305,  0.29137631,  0.04047745,
        0.04431224,  0.04519889,  0.03847683,  0.01568487,  0.02632313,
        0.03144292,  0.02054261,  0.48462427,  0.47369001,  0.46534408,
        0.47983653,  0.09097911,  0.09675306,  0.09214459,  0.08512046,
        0.06334772,  0.04752549,  0.04840836,  0.05991391,  0.53363491,
        0.55076021,  0.55102087,  0.55002426,  0.11550264,  0.13109983,
        0.12478543,  0.1228964 ,  0.08149983,  0.07460481,  0.09188072,
        0.0828729 ,  0.57514598,  0.56995345,  0.57006765,  0.57400153,
        0.17594336,  0.17463719,  0.1732994 ,  0.16087399,  0.10897946,
        0.12243862,  0.12367713,  0.10766661,  0.58802818,  0.58680467,
        0.58929461,  0.58661665,  0.20524419,  0.18411227,  0.21814201,
        0.20731476,  0.15178134,  0.12947044,  0.12318538,  0.13308095]), 'split3_test_score': array([ 0.36038841,  0.35325202,  0.35084961,  0.35097825,  0.04992477,
        0.04979606,  0.04915047,  0.04815288,  0.01689358,  0.02399159,
        0.03470544,  0.02771828,  0.48370768,  0.47185627,  0.46852477,
        0.47450517,  0.12069092,  0.12016418,  0.10457759,  0.09897825,
        0.05409388,  0.06509573,  0.05616954,  0.0845563 ,  0.51474979,
        0.51505499,  0.5159802 ,  0.5178445 ,  0.13381129,  0.14431589,
        0.1468472 ,  0.15882142,  0.09680719,  0.08910678,  0.09130139,
        0.09306012,  0.53857567,  0.54875438,  0.54492029,  0.54297502,
        0.22103578,  0.19141694,  0.17832185,  0.18562013,  0.15439158,
        0.11610037,  0.12154916,  0.11971272,  0.57052073,  0.56289514,
        0.55892159,  0.55614203,  0.24526093,  0.24354702,  0.23787676,
        0.23292198,  0.14905907,  0.17742887,  0.14062012,  0.14971206]), 'split2_train_score': array([ 0.29949177,  0.30542479,  0.30505979,  0.30855405,  0.05110834,
        0.04989613,  0.04786528,  0.04821302,  0.03829671,  0.03629039,
        0.02704232,  0.02765894,  0.48841959,  0.51035986,  0.48361973,
        0.50593394,  0.08608366,  0.10090247,  0.10071223,  0.10897716,
        0.04150844,  0.06115609,  0.06502923,  0.06488576,  0.57985274,
        0.58709476,  0.58544079,  0.58860027,  0.17681413,  0.17809052,
        0.14898655,  0.16148812,  0.11026699,  0.11621777,  0.0961179 ,
        0.09568287,  0.63491262,  0.63472939,  0.63337248,  0.63308281,
        0.22016652,  0.20993969,  0.2163724 ,  0.20640569,  0.09784709,
        0.13107214,  0.13132885,  0.14962361,  0.66823555,  0.6710104 ,
        0.67084116,  0.67064058,  0.28719118,  0.27186346,  0.27171606,
        0.27087486,  0.15223881,  0.17561204,  0.16812548,  0.16909602]), 'split2_test_score': array([ 0.20141301,  0.2217653 ,  0.21464821,  0.22094744,  0.03784635,
        0.03521143,  0.031854  ,  0.03332426,  0.02611387,  0.02733832,
        0.02020204,  0.01907061,  0.37481335,  0.41123517,  0.37329175,
        0.3980616 ,  0.05530492,  0.0703134 ,  0.06980053,  0.07320851,
        0.02939146,  0.0415266 ,  0.04610875,  0.04462207,  0.46277837,
        0.47782073,  0.46954275,  0.47596614,  0.12407788,  0.12564937,
        0.10169888,  0.10970157,  0.07476502,  0.08055641,  0.06454266,
        0.06979151,  0.5070176 ,  0.51494693,  0.51299149,  0.51555278,
        0.14400736,  0.14122481,  0.14852337,  0.13486116,  0.06318732,
        0.0857753 ,  0.08562977,  0.10397404,  0.53590248,  0.53671593,
        0.5371129 ,  0.53684045,  0.19234394,  0.187461  ,  0.18059717,
        0.1738313 ,  0.10536641,  0.11534952,  0.11221376,  0.10616427]), 'std_test_score': array([ 0.05880015,  0.04824197,  0.05034396,  0.04779199,  0.0045756 ,
        0.00526987,  0.00640932,  0.00553197,  0.00866974,  0.00371969,
        0.00575139,  0.00349553,  0.04551771,  0.02679888,  0.03833126,
        0.03339372,  0.02315792,  0.0177645 ,  0.01271697,  0.00962747,
        0.01243109,  0.01013878,  0.00408479,  0.01443549,  0.02613874,
        0.02598571,  0.02890079,  0.02634175,  0.0092354 ,  0.0074096 ,
        0.01654759,  0.01811901,  0.01164972,  0.00576238,  0.01159764,
        0.00863033,  0.02412864,  0.01972555,  0.02036711,  0.02084701,
        0.0280646 ,  0.01807301,  0.01147689,  0.02141238,  0.03254627,
        0.01389526,  0.01661725,  0.00880565,  0.02086945,  0.01902368,
        0.01959351,  0.0183062 ,  0.02180816,  0.02362386,  0.0217263 ,
        0.02311776,  0.01878053,  0.02396328,  0.01135393,  0.01754082]), 'std_train_score': array([ 0.02299871,  0.01764059,  0.01824303,  0.01686973,  0.00143864,
        0.00221938,  0.00241978,  0.00199574,  0.00708647,  0.00380442,
        0.00494023,  0.00228655,  0.0064238 ,  0.01325813,  0.00720369,
        0.00950969,  0.01435027,  0.00636948,  0.00457008,  0.00388937,
        0.01050618,  0.00480026,  0.00297964,  0.0113516 ,  0.00811851,
        0.00560911,  0.00571451,  0.00682727,  0.01390302,  0.00985835,
        0.00439142,  0.00933112,  0.00378614,  0.01025983,  0.00460404,
        0.00378141,  0.00776362,  0.00657544,  0.00574459,  0.00634092,
        0.00878952,  0.00961672,  0.00849865,  0.00476246,  0.02516289,
        0.01043031,  0.00793699,  0.00461439,  0.00277706,  0.00446456,
        0.00481356,  0.00447799,  0.01215614,  0.01292737,  0.00234332,
        0.00238866,  0.01196288,  0.01540623,  0.00679035,  0.00539059]), 'mean_train_score': array([ 0.30281272,  0.30847751,  0.30640282,  0.31011115,  0.05072374,
        0.0504905 ,  0.04838971,  0.04684819,  0.03032842,  0.03224476,
        0.03116173,  0.02798514,  0.49220292,  0.49305908,  0.48393095,
        0.49495603,  0.10324734,  0.10854003,  0.10621063,  0.10328614,
        0.0572419 ,  0.06444601,  0.06142828,  0.07123851,  0.57510267,
        0.57871242,  0.58045747,  0.58087737,  0.15396572,  0.16131588,
        0.15234341,  0.15732165,  0.10860875,  0.10017519,  0.10283954,
        0.09936148,  0.63091714,  0.63076151,  0.63058285,  0.62976899,
        0.22291226,  0.20924038,  0.20793317,  0.20597292,  0.13156479,
        0.13545444,  0.14240933,  0.14234259,  0.66940903,  0.66993912,
        0.66992121,  0.66991577,  0.27448496,  0.26474366,  0.2750588 ,
        0.27006056,  0.17080091,  0.18228647,  0.16984636,  0.17478985]), 'split0_train_score': array([ 0.27957619,  0.29005756,  0.28600635,  0.29097256,  0.05041075,
        0.04998438,  0.05126267,  0.04485506,  0.02480141,  0.03079687,
        0.03384073,  0.02654531,  0.4862167 ,  0.47463512,  0.47229106,
        0.48257956,  0.10533337,  0.10735151,  0.1067941 ,  0.09888364,
        0.07065262,  0.05859602,  0.05866719,  0.06903007,  0.56548638,
        0.57642775,  0.57547368,  0.57636677,  0.14021193,  0.15854078,
        0.15203048,  0.14883503,  0.10258915,  0.09592445,  0.10825538,
        0.09828315,  0.63419676,  0.63035214,  0.63120917,  0.62848757,
        0.21331303,  0.2150044 ,  0.21452525,  0.19809327,  0.13159188,
        0.15126642,  0.15340033,  0.13702184,  0.6705093 ,  0.66865989,
        0.670822  ,  0.67021115,  0.25454009,  0.25803692,  0.27501984,
        0.26752243,  0.18566372,  0.17186982,  0.1724631 ,  0.17833427]), 'split1_train_score': array([ 0.2914729 ,  0.30097088,  0.29887271,  0.30379337,  0.04868416,
        0.0480004 ,  0.04475226,  0.04493759,  0.03631372,  0.03519189,
        0.02586365,  0.02593776,  0.49129157,  0.48797609,  0.48937049,
        0.48905731,  0.09644899,  0.10731452,  0.10414639,  0.10065332,
        0.05601237,  0.06737965,  0.0583093 ,  0.06079575,  0.58580513,
        0.57964946,  0.58681973,  0.58638805,  0.14620877,  0.15340367,
        0.14874517,  0.14831112,  0.10868667,  0.08811081,  0.1013217 ,
        0.09779109,  0.63697268,  0.63766276,  0.63655577,  0.63730091,
        0.22092574,  0.19345234,  0.194883  ,  0.20909638,  0.12805975,
        0.12264652,  0.14040462,  0.14038128,  0.67320448,  0.67624485,
        0.67569539,  0.67569362,  0.27642468,  0.24761511,  0.2751573 ,
        0.26825491,  0.1723817 ,  0.17280009,  0.160065  ,  0.16999338]), 'std_score_time': array([  2.95168133e-03,   9.62327465e-05,   1.10730840e-03,
         3.88341223e-03,   3.20150274e-04,   6.80754290e-04,
         8.84110798e-04,   2.38049304e-03,   1.65504473e-03,
         4.77774578e-04,   1.82677161e-03,   1.61795198e-02,
         6.39930156e-04,   6.71033538e-04,   1.56402049e-03,
         4.67255640e-03,   7.37559767e-03,   7.53375110e-03,
         6.01350485e-03,   5.88890144e-03,   7.72658914e-04,
         7.68126422e-03,   4.52739062e-03,   1.87726850e-02,
         2.80650130e-03,   2.70977297e-03,   1.95602299e-03,
         1.57494355e-03,   6.48191970e-04,   5.91165898e-04,
         1.20330989e-03,   2.85866508e-03,   4.65321807e-04,
         9.87258782e-04,   1.01088132e-02,   7.99840676e-03,
         6.59184523e-04,   1.26791743e-03,   6.05518599e-03,
         1.38448106e-02,   5.61924049e-04,   7.26081598e-04,
         4.82533784e-03,   1.64656181e-02,   6.56501768e-04,
         1.72652185e-02,   8.42773332e-03,   3.85181254e-03,
         1.07664558e-03,   7.89448142e-03,   8.99104380e-03,
         1.40424596e-02,   4.67020448e-04,   1.02613699e-03,
         9.84574900e-03,   3.51199143e-03,   9.33060185e-04,
         7.40545992e-03,   1.30574104e-02,   3.12734572e-03]), 'mean_fit_time': array([  1.25800717,   2.58810943,   3.58868366,   4.89749849,
         0.2160365 ,   0.36769408,   0.58764017,   0.69762528,
         0.21418703,   0.34660077,   0.49160266,   0.67494351,
         2.23753464,   4.34117264,   6.28468627,   9.06254691,
         0.36156237,   0.76270312,   1.03634566,   1.29193383,
         0.2619971 ,   0.5076611 ,   0.70048821,   0.92542738,
         3.18213856,   6.05208248,   8.36030537,  11.60291409,
         0.39186639,   0.73385352,   0.99968231,   1.37062424,
         0.27039438,   0.53556389,   0.88161325,   1.1236726 ,
         3.16813272,   6.70945621,  10.8604266 ,  13.93563992,
         0.41741592,   0.83264166,   1.41634226,   1.69230163,
         0.31134063,   0.58074939,   0.91641754,   1.27718264,
         4.28755444,   8.41463029,  11.4090848 ,  16.07815379,
         0.48760134,   1.1842953 ,   1.51855165,   2.09289038,
         0.37000304,   0.80353862,   1.24495429,   1.40993446]), 'split3_train_score': array([ 0.34071003,  0.3374568 ,  0.33567242,  0.33712461,  0.05269172,
        0.05408111,  0.04967864,  0.04938711,  0.02190184,  0.0266999 ,
        0.03790021,  0.03179854,  0.50288382,  0.49926523,  0.49044251,
        0.5022533 ,  0.12512336,  0.11859161,  0.11318979,  0.10463045,
        0.06079418,  0.0706523 ,  0.06370742,  0.09024245,  0.56926643,
        0.5716777 ,  0.57409566,  0.57215439,  0.15262807,  0.15522855,
        0.15961146,  0.17065234,  0.1128922 ,  0.10044774,  0.1056632 ,
        0.10568881,  0.6175865 ,  0.62030175,  0.62119397,  0.62020469,
        0.23724376,  0.2185651 ,  0.20595202,  0.21029634,  0.16876043,
        0.13683269,  0.1445035 ,  0.14234363,  0.66568678,  0.66384134,
        0.6623263 ,  0.66311774,  0.27978389,  0.28145917,  0.27834201,
        0.27359005,  0.17291941,  0.20886393,  0.17873184,  0.18173571]), 'param_model__n_estimators': masked_array(data = [100 200 300 400 100 200 300 400 100 200 300 400 100 200 300 400 100 200
 300 400 100 200 300 400 100 200 300 400 100 200 300 400 100 200 300 400
 100 200 300 400 100 200 300 400 100 200 300 400 100 200 300 400 100 200
 300 400 100 200 300 400],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False],
       fill_value = ?)
, 'mean_test_score': array([ 0.27407074,  0.28046446,  0.27643917,  0.28033567,  0.04325423,
        0.04356756,  0.04201938,  0.0408534 ,  0.02399485,  0.02791444,
        0.02760977,  0.02315458,  0.44259138,  0.44688752,  0.43424494,
        0.44602121,  0.08863027,  0.09697613,  0.09030697,  0.0875505 ,
        0.04933573,  0.05442552,  0.05119329,  0.06168945,  0.50555043,
        0.51270693,  0.51223345,  0.51340156,  0.12826463,  0.13540443,
        0.1269593 ,  0.13178663,  0.08925367,  0.08290986,  0.0846184 ,
        0.08337504,  0.53968075,  0.54336014,  0.54128235,  0.54264627,
        0.18392223,  0.16935151,  0.16793509,  0.16719377,  0.11140079,
        0.10750483,  0.11426887,  0.11426639,  0.55953513,  0.55813544,
        0.55810289,  0.55727108,  0.21990833,  0.20457779,  0.21623423,
        0.21032797,  0.1375216 ,  0.144614  ,  0.12830095,  0.13435068]), 'split1_test_score': array([ 0.24480588,  0.25815116,  0.25137579,  0.2580407 ,  0.04476834,
        0.04495049,  0.04187418,  0.04345963,  0.03728708,  0.03400472,
        0.02408869,  0.02528683,  0.42722022,  0.43076864,  0.42981914,
        0.43168155,  0.08754615,  0.10067388,  0.09470515,  0.09289479,
        0.05050985,  0.06355424,  0.05408651,  0.05766551,  0.51103864,
        0.5071918 ,  0.51238997,  0.50977134,  0.13966673,  0.14055264,
        0.13450569,  0.13572714,  0.10394263,  0.08737143,  0.09074883,
        0.08777563,  0.53798375,  0.53978581,  0.53714996,  0.53805574,
        0.1947024 ,  0.1701271 ,  0.17159574,  0.1874198 ,  0.11904478,
        0.10570505,  0.12621942,  0.12571218,  0.54368914,  0.54612601,
        0.54708247,  0.5494852 ,  0.23678426,  0.20319088,  0.22832098,
        0.22724385,  0.14387956,  0.15620717,  0.13718456,  0.14844545])}
GREP_ME***Best params of [ExtraTreesRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__max_features': 'auto', 'model__max_depth': 5, 'model__n_estimators': 100}
GREP_ME***Best score of [ExtraTreesRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.559535131269
####################################################################################
################# Running the iteration 4  of the GridSearchCV ####################
####################################################################################
***Starting [GradientBoostingRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__learning_rate': [0.001, 0.01, 0.1, 0.2], 'model__max_depth': [3, 4, 5, 6], 'model__n_estimators': [100, 200, 300, 400]}
Fitting 4 folds for each of 64 candidates, totalling 256 fits
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100, total=   3.4s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200, total=   6.3s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300, total=  10.2s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400, total=  14.0s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100, total=   5.1s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200, total=  10.6s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300, total=  15.6s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400, total=  19.6s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100, total=   7.1s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200, total=  12.5s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300, total=  19.2s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400, total=  26.8s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100, total=   9.9s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200, total=  16.8s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300, total=  25.4s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400, total=  29.0s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, total=   1.7s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, total=   1.6s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, total=   3.2s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, total=   4.6s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400, total=   6.2s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100, total=   2.7s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200, total=   5.2s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300, total=   7.4s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400, total=   9.7s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, total=   3.8s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, total=   7.3s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, total=  10.5s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400, total=  13.4s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100, total=   5.0s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200, total=   9.7s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300, total=  14.0s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400, total=  17.9s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, total=   1.4s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, total=   1.5s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, total=   2.8s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, total=   4.1s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400, total=   5.5s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100, total=   2.1s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200, total=   4.0s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300, total=   5.9s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400, total=   7.8s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, total=   2.9s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, total=   5.5s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, total=   8.0s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400, total=  11.1s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100, total=   3.9s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200, total=   7.0s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300, total=  10.6s[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100, total=   3.8s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200, total=   6.6s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300, total=  10.6s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400, total=  13.9s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100, total=   5.2s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200, total=  10.0s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300, total=  16.2s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400, total=  19.9s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100, total=   7.0s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200, total=  13.7s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300, total=  20.2s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400, total=  28.3s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100, total=   9.5s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200, total=  16.2s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300, total=  24.9s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400, total=  27.9s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, total=   1.6s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, total=   3.3s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, total=   4.8s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400, total=   6.4s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100, total=   2.7s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200, total=   5.3s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300, total=   7.4s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400, total=   9.7s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, total=   3.8s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, total=   7.5s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, total=  10.5s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400, total=  13.6s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100, total=   4.9s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200, total=   9.7s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300, total=  14.5s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400, total=  17.5s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, total=   1.5s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, total=   2.8s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, total=   4.1s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400, total=   5.5s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100, total=   2.2s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200, total=   4.0s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300, total=   5.9s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400, total=   7.8s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, total=   3.0s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, total=   5.4s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, total=   7.9s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400, total=  10.8s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100, total=   3.6s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200, total=   6.9s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300, total=  10.4s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=400, total=  13.7s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, total=   1.4s[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100, total=   3.5s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200, total=   6.3s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300, total=  14.0s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400, total=  13.2s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100, total=   4.5s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200, total=  10.3s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300, total=  15.6s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400, total=  20.3s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100, total=   7.0s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200, total=  13.1s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300, total=  21.3s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400, total=  26.5s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100, total=   8.7s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200, total=  16.1s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300, total=  26.1s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400, total=  27.7s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, total=   1.6s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, total=   3.2s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, total=   4.7s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400, total=   6.5s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100, total=   2.6s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200, total=   5.1s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300, total=   7.5s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400, total=   9.7s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, total=   3.8s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, total=   7.3s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, total=  10.9s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400, total=  13.3s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100, total=   4.9s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200, total=   9.8s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300, total=  14.1s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400, total=  17.8s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, total=   1.4s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, total=   2.9s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, total=   4.0s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400, total=   5.5s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100, total=   2.2s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200, total=   4.1s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300, total=   5.8s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400, total=   7.7s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, total=   3.0s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, total=   5.6s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, total=   8.1s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400, total=  10.9s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100, total=   3.6s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200, total=   7.2s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300, total=  10.5s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=400, total=  13.6s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, total=   1.4s[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=100, total=   3.3s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=200, total=   9.3s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=300, total=  10.6s
[CV] model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=3, model__n_estimators=400, total=  14.0s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=100, total=   4.7s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=200, total=  11.1s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=300, total=  16.0s
[CV] model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=4, model__n_estimators=400, total=  20.1s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=100, total=   6.7s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=200, total=  13.6s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=300, total=  21.5s
[CV] model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=5, model__n_estimators=400, total=  26.7s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=100, total=   9.4s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=200, total=  16.5s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=300, total=  25.8s
[CV] model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.001, model__max_depth=6, model__n_estimators=400, total=  27.0s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, total=   3.2s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, total=   4.7s
[CV] model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=3, model__n_estimators=400, total=   6.4s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=100, total=   2.7s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=200, total=   5.2s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=300, total=   7.5s
[CV] model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=4, model__n_estimators=400, total=   9.7s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, total=   3.9s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, total=   7.4s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, total=  10.9s
[CV] model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=5, model__n_estimators=400, total=  13.5s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=100, total=   5.1s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=200, total=   9.9s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=300, total=  14.4s
[CV] model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.01, model__max_depth=6, model__n_estimators=400, total=  17.8s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, total=   2.8s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, total=   4.1s
[CV] model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=3, model__n_estimators=400, total=   5.5s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=100, total=   2.1s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=200, total=   4.2s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=300, total=   5.8s
[CV] model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=4, model__n_estimators=400, total=   7.8s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, total=   3.0s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, total=   5.6s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, total=   8.7s
[CV] model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=5, model__n_estimators=400, total=  10.8s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=100, total=   3.8s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=200, total=   7.1s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=300, total=  10.4s
[CV] model__learning_rate=0.1, model__max_depth=6, model__n_estimators=400 
[CV]  model__learning_rate=0.1, model__max_depth=6, model__n_estimators=400, total=  13.7s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, total=   2.9s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, total=   4.3s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=400, total=   5.7s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, total=   2.8s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, total=   4.3s
[CV] model__learning_rate=0.2, model__max_depth=3, model__n_estimators=400 
[CV]  model__learning_rate=0.2, model__max_depth=3, model__n_estimators=400, total=   5.7s
[CV] model__learning_rate=0.2, model__max_depth=4, model__n_estimators=100 
[CV]  model__learning_rate=0.2, model__max_depth=4, model__n_estimators=100, total=   2.1s
[CV] model__learning_rate=0.2, model__max_depth=4, model__n_estimators=200 
[CV]  model__learning_rate=0.2, model__max_depth=4, model__n_estimators=200, total=   3.9s
[CV] model__learning_rate=0.2, model__max_depth=4, model__n_estimators=300 
[CV]  model__learning_rate=0.2, model__max_depth=4, model__n_estimators=300, total=   6.0s
[CV] model__learning_rate=0.2, model__max_depth=4, model__n_estimators=400 
[CV]  model__learning_rate=0.2, model__max_depth=4, model__n_estimators=400, total=   8.0s
[CV] model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100 
[CV]  model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, total=   2.6s
[CV] model__learning_rate=0.2, model__max_depth=5,GREP_ME***Results of [GradientBoostingRegressor] estimatorrun are
{'std_fit_time': array([ 0.16600638,  1.25991415,  1.54581423,  0.32680173,  0.28136082,
        0.41104579,  0.27187327,  0.28480996,  0.14431744,  0.46638847,
        0.90364273,  0.71557622,  0.45053996,  0.25923164,  0.46910333,
        0.70651049,  0.02152625,  0.0397733 ,  0.08447815,  0.13296133,
        0.03992871,  0.05245676,  0.05302884,  0.01339482,  0.0391312 ,
        0.08176359,  0.1977313 ,  0.12143982,  0.05433702,  0.0786585 ,
        0.21734624,  0.13875725,  0.01399148,  0.03897876,  0.05519038,
        0.02991586,  0.04068165,  0.0791728 ,  0.04192812,  0.04358473,
        0.04125233,  0.07472921,  0.31987547,  0.12503963,  0.10654239,
        0.1011664 ,  0.08155333,  0.20778887,  0.07475312,  0.04636216,
        0.0221998 ,  0.10012393,  0.03509408,  0.01813967,  0.04795788,
        0.09031155,  0.06529267,  0.12413106,  0.13963295,  0.15577234,
        0.05816055,  0.1326061 ,  0.19129609,  0.2091101 ]), 'param_model__learning_rate': masked_array(data = [0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001
 0.001 0.001 0.001 0.001 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01
 0.01 0.01 0.01 0.01 0.01 0.01 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1
 0.1 0.1 0.1 0.1 0.1 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2
 0.2 0.2 0.2],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'params': ({'model__n_estimators': 100, 'model__max_depth': 3, 'model__learning_rate': 0.001}, {'model__n_estimators': 200, 'model__max_depth': 3, 'model__learning_rate': 0.001}, {'model__n_estimators': 300, 'model__max_depth': 3, 'model__learning_rate': 0.001}, {'model__n_estimators': 400, 'model__max_depth': 3, 'model__learning_rate': 0.001}, {'model__n_estimators': 100, 'model__max_depth': 4, 'model__learning_rate': 0.001}, {'model__n_estimators': 200, 'model__max_depth': 4, 'model__learning_rate': 0.001}, {'model__n_estimators': 300, 'model__max_depth': 4, 'model__learning_rate': 0.001}, {'model__n_estimators': 400, 'model__max_depth': 4, 'model__learning_rate': 0.001}, {'model__n_estimators': 100, 'model__max_depth': 5, 'model__learning_rate': 0.001}, {'model__n_estimators': 200, 'model__max_depth': 5, 'model__learning_rate': 0.001}, {'model__n_estimators': 300, 'model__max_depth': 5, 'model__learning_rate': 0.001}, {'model__n_estimators': 400, 'model__max_depth': 5, 'model__learning_rate': 0.001}, {'model__n_estimators': 100, 'model__max_depth': 6, 'model__learning_rate': 0.001}, {'model__n_estimators': 200, 'model__max_depth': 6, 'model__learning_rate': 0.001}, {'model__n_estimators': 300, 'model__max_depth': 6, 'model__learning_rate': 0.001}, {'model__n_estimators': 400, 'model__max_depth': 6, 'model__learning_rate': 0.001}, {'model__n_estimators': 100, 'model__max_depth': 3, 'model__learning_rate': 0.01}, {'model__n_estimators': 200, 'model__max_depth': 3, 'model__learning_rate': 0.01}, {'model__n_estimators': 300, 'model__max_depth': 3, 'model__learning_rate': 0.01}, {'model__n_estimators': 400, 'model__max_depth': 3, 'model__learning_rate': 0.01}, {'model__n_estimators': 100, 'model__max_depth': 4, 'model__learning_rate': 0.01}, {'model__n_estimators': 200, 'model__max_depth': 4, 'model__learning_rate': 0.01}, {'model__n_estimators': 300, 'model__max_depth': 4, 'model__learning_rate': 0.01}, {'model__n_estimators': 400, 'model__max_depth': 4, 'model__learning_rate': 0.01}, {'model__n_estimators': 100, 'model__max_depth': 5, 'model__learning_rate': 0.01}, {'model__n_estimators': 200, 'model__max_depth': 5, 'model__learning_rate': 0.01}, {'model__n_estimators': 300, 'model__max_depth': 5, 'model__learning_rate': 0.01}, {'model__n_estimators': 400, 'model__max_depth': 5, 'model__learning_rate': 0.01}, {'model__n_estimators': 100, 'model__max_depth': 6, 'model__learning_rate': 0.01}, {'model__n_estimators': 200, 'model__max_depth': 6, 'model__learning_rate': 0.01}, {'model__n_estimators': 300, 'model__max_depth': 6, 'model__learning_rate': 0.01}, {'model__n_estimators': 400, 'model__max_depth': 6, 'model__learning_rate': 0.01}, {'model__n_estimators': 100, 'model__max_depth': 3, 'model__learning_rate': 0.1}, {'model__n_estimators': 200, 'model__max_depth': 3, 'model__learning_rate': 0.1}, {'model__n_estimators': 300, 'model__max_depth': 3, 'model__learning_rate': 0.1}, {'model__n_estimators': 400, 'model__max_depth': 3, 'model__learning_rate': 0.1}, {'model__n_estimators': 100, 'model__max_depth': 4, 'model__learning_rate': 0.1}, {'model__n_estimators': 200, 'model__max_depth': 4, 'model__learning_rate': 0.1}, {'model__n_estimators': 300, 'model__max_depth': 4, 'model__learning_rate': 0.1}, {'model__n_estimators': 400, 'model__max_depth': 4, 'model__learning_rate': 0.1}, {'model__n_estimators': 100, 'model__max_depth': 5, 'model__learning_rate': 0.1}, {'model__n_estimators': 200, 'model__max_depth': 5, 'model__learning_rate': 0.1}, {'model__n_estimators': 300, 'model__max_depth': 5, 'model__learning_rate': 0.1}, {'model__n_estimators': 400, 'model__max_depth': 5, 'model__learning_rate': 0.1}, {'model__n_estimators': 100, 'model__max_depth': 6, 'model__learning_rate': 0.1}, {'model__n_estimators': 200, 'model__max_depth': 6, 'model__learning_rate': 0.1}, {'model__n_estimators': 300, 'model__max_depth': 6, 'model__learning_rate': 0.1}, {'model__n_estimators': 400, 'model__max_depth': 6, 'model__learning_rate': 0.1}, {'model__n_estimators': 100, 'model__max_depth': 3, 'model__learning_rate': 0.2}, {'model__n_estimators': 200, 'model__max_depth': 3, 'model__learning_rate': 0.2}, {'model__n_estimators': 300, 'model__max_depth': 3, 'model__learning_rate': 0.2}, {'model__n_estimators': 400, 'model__max_depth': 3, 'model__learning_rate': 0.2}, {'model__n_estimators': 100, 'model__max_depth': 4, 'model__learning_rate': 0.2}, {'model__n_estimators': 200, 'model__max_depth': 4, 'model__learning_rate': 0.2}, {'model__n_estimators': 300, 'model__max_depth': 4, 'model__learning_rate': 0.2}, {'model__n_estimators': 400, 'model__max_depth': 4, 'model__learning_rate': 0.2}, {'model__n_estimators': 100, 'model__max_depth': 5, 'model__learning_rate': 0.2}, {'model__n_estimators': 200, 'model__max_depth': 5, 'model__learning_rate': 0.2}, {'model__n_estimators': 300, 'model__max_depth': 5, 'model__learning_rate': 0.2}, {'model__n_estimators': 400, 'model__max_depth': 5, 'model__learning_rate': 0.2}, {'model__n_estimators': 100, 'model__max_depth': 6, 'model__learning_rate': 0.2}, {'model__n_estimators': 200, 'model__max_depth': 6, 'model__learning_rate': 0.2}, {'model__n_estimators': 300, 'model__max_depth': 6, 'model__learning_rate': 0.2}, {'model__n_estimators': 400, 'model__max_depth': 6, 'model__learning_rate': 0.2}), 'rank_test_score': array([64, 60, 56, 52, 63, 59, 55, 51, 62, 58, 54, 50, 61, 57, 53, 49, 48,
       42, 35, 31, 47, 38, 27, 22, 46, 33, 16,  2, 45, 29,  9,  3, 19,  5,
       12, 18,  4,  8, 11, 15, 13,  7, 24, 20,  1, 14, 17, 23,  6, 21, 26,
       30, 36, 40, 43, 44, 10, 25, 28, 32, 34, 37, 39, 41], dtype=int32), 'param_model__max_depth': masked_array(data = [3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 3 3 3 3 4
 4 4 4 5 5 5 5 6 6 6 6 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'mean_score_time': array([ 0.00508577,  0.00639611,  0.00861812,  0.00960648,  0.00567228,
        0.00928915,  0.01204699,  0.01449865,  0.00570518,  0.01009965,
        0.01403075,  0.02123815,  0.00733507,  0.01178682,  0.01650363,
        0.03335744,  0.0033471 ,  0.00556707,  0.00789022,  0.0098989 ,
        0.00444221,  0.00766301,  0.01050693,  0.01375663,  0.0054661 ,
        0.0094822 ,  0.01306903,  0.01662856,  0.006118  ,  0.01076132,
        0.01504266,  0.01890123,  0.00328547,  0.00523227,  0.00707173,
        0.00915623,  0.00402731,  0.00664502,  0.0089668 ,  0.01167715,
        0.0048545 ,  0.00773728,  0.01126671,  0.01761431,  0.00533903,
        0.00906265,  0.01286882,  0.01641321,  0.0031566 ,  0.00516349,
        0.0072211 ,  0.00945717,  0.00394434,  0.0063796 ,  0.00901425,
        0.01168615,  0.00449967,  0.00768465,  0.01111567,  0.01446974,
        0.00581819,  0.00937337,  0.01284432,  0.01688814]), 'split0_test_score': array([ 0.10149066,  0.19336366,  0.26569229,  0.32499529,  0.1043562 ,
        0.19094814,  0.26437794,  0.32444538,  0.1048502 ,  0.1893404 ,
        0.25982288,  0.31791454,  0.10788028,  0.19648203,  0.26790942,
        0.32499592,  0.50834067,  0.57541164,  0.58518411,  0.58854225,
        0.50511103,  0.57289967,  0.58464687,  0.58905745,  0.50944311,
        0.58015953,  0.59217563,  0.59504801,  0.51092671,  0.58999983,
        0.60345937,  0.60245407,  0.58313887,  0.5861435 ,  0.5887498 ,
        0.58938569,  0.58632135,  0.58316119,  0.58452521,  0.58692752,
        0.58877501,  0.57785276,  0.57733234,  0.57912507,  0.61069036,
        0.61352992,  0.61388675,  0.61134682,  0.57768683,  0.57596823,
        0.58869219,  0.57296297,  0.53327214,  0.53180715,  0.5249497 ,
        0.51931753,  0.59749042,  0.59048935,  0.58542262,  0.57657028,
        0.57904067,  0.58419945,  0.57299959,  0.56742099]), 'split3_test_score': array([ 0.09418965,  0.17602724,  0.24296261,  0.29938566,  0.09961261,
        0.18348557,  0.2533234 ,  0.31092508,  0.10475217,  0.19110345,
        0.26135497,  0.31911006,  0.10721818,  0.1948261 ,  0.26525972,
        0.3230965 ,  0.48374206,  0.56455387,  0.58574763,  0.59772424,
        0.49731729,  0.57910934,  0.59778552,  0.6061844 ,  0.5074088 ,
        0.58305445,  0.60127275,  0.60794504,  0.5027534 ,  0.58038054,
        0.59568273,  0.60079175,  0.60712487,  0.61389297,  0.60815378,
        0.60369799,  0.59915964,  0.59879926,  0.59390293,  0.59102197,
        0.59995159,  0.60263686,  0.59984305,  0.6072464 ,  0.596866  ,
        0.59535784,  0.59899826,  0.58676834,  0.6108849 ,  0.59900146,
        0.59360626,  0.59046768,  0.57600396,  0.57781307,  0.55719507,
        0.5639681 ,  0.58209531,  0.57410009,  0.5756018 ,  0.57038824,
        0.58110131,  0.56505301,  0.57006543,  0.56506587]), 'split2_train_score': array([ 0.10929515,  0.19952493,  0.27396438,  0.3355413 ,  0.11812183,
        0.21583681,  0.29651656,  0.36324988,  0.12572899,  0.22944041,
        0.31535609,  0.38669143,  0.13289768,  0.24270484,  0.33392162,
        0.40972981,  0.54278407,  0.6522821 ,  0.6939576 ,  0.71555061,
        0.58750323,  0.70636094,  0.7504258 ,  0.77541751,  0.62714053,
        0.75660909,  0.80184407,  0.82461624,  0.66680767,  0.79896793,
        0.84375962,  0.86387281,  0.76353577,  0.79973859,  0.82208314,
        0.851588  ,  0.8204588 ,  0.85583433,  0.88933614,  0.91676407,
        0.86411807,  0.90321068,  0.93391589,  0.95232995,  0.90247851,
        0.93757771,  0.96266307,  0.97497492,  0.80475096,  0.86202349,
        0.90268393,  0.92481422,  0.86760316,  0.92479748,  0.95216092,
        0.96804769,  0.91267124,  0.95808171,  0.97833958,  0.98832701,
        0.9374991 ,  0.97849929,  0.99214518,  0.99686216]), 'split2_test_score': array([ 0.08343663,  0.15283783,  0.21092659,  0.25974485,  0.09115816,
        0.16901667,  0.23395567,  0.28805033,  0.0943206 ,  0.17429387,
        0.24132971,  0.29594765,  0.09512754,  0.1771835 ,  0.24671964,
        0.30330387,  0.43621411,  0.52159639,  0.54363683,  0.55535576,
        0.46950001,  0.55505568,  0.5718528 ,  0.58034618,  0.4757772 ,
        0.57232121,  0.60043534,  0.61021603,  0.49031878,  0.58606361,
        0.6055119 ,  0.61118951,  0.58805254,  0.59717435,  0.59990698,
        0.59856113,  0.60895936,  0.61038329,  0.61417181,  0.61745947,
        0.60873736,  0.61919585,  0.60876349,  0.61654357,  0.62666067,
        0.61406455,  0.61202655,  0.61653693,  0.60997873,  0.60940991,
        0.60209266,  0.60794003,  0.61420617,  0.60982316,  0.60721059,
        0.60780079,  0.61892919,  0.62122506,  0.62577833,  0.61243605,
        0.5754323 ,  0.58563118,  0.5848934 ,  0.57370421]), 'std_test_score': array([ 0.00652252,  0.01438268,  0.01952509,  0.02343945,  0.0047309 ,
        0.00803846,  0.01134274,  0.01383996,  0.00435399,  0.0065464 ,
        0.00788736,  0.009275  ,  0.00510794,  0.00759155,  0.00816378,
        0.00851875,  0.02620982,  0.02057991,  0.0183709 ,  0.01842122,
        0.0146423 ,  0.01210085,  0.01543047,  0.01780944,  0.01597078,
        0.01600217,  0.02132342,  0.02305075,  0.00975518,  0.0154855 ,
        0.02256625,  0.02435375,  0.01634622,  0.01864863,  0.02088992,
        0.02192795,  0.01615973,  0.01761618,  0.02024447,  0.02316239,
        0.02157675,  0.02359016,  0.02587797,  0.03275349,  0.03470419,
        0.0360529 ,  0.04043777,  0.03945202,  0.02164886,  0.02272751,
        0.02478848,  0.02891259,  0.03140892,  0.03319423,  0.03595537,
        0.04062701,  0.02388258,  0.02959712,  0.03740055,  0.0333305 ,
        0.01835912,  0.02397396,  0.02236089,  0.01987915]), 'std_train_score': array([  1.73526383e-03,   3.15492121e-03,   4.27472556e-03,
         5.17283354e-03,   1.92992645e-03,   3.21030469e-03,
         3.53225513e-03,   3.85067054e-03,   1.48823321e-03,
         2.45762069e-03,   3.09190781e-03,   3.50372075e-03,
         2.14482453e-03,   3.91693690e-03,   4.81082106e-03,
         5.31194092e-03,   6.39725060e-03,   7.98961384e-03,
         7.37970234e-03,   7.36341782e-03,   7.69221897e-03,
         8.09903895e-03,   5.87944410e-03,   4.85484370e-03,
         5.51256322e-03,   7.61255353e-03,   7.13119057e-03,
         6.22957811e-03,   4.82045700e-03,   7.01031851e-03,
         6.95335996e-03,   6.32251431e-03,   8.68456183e-03,
         6.81487325e-03,   6.59273782e-03,   5.46607288e-03,
         7.11871929e-03,   7.08073173e-03,   3.37240937e-03,
         2.86293719e-03,   5.93430003e-03,   4.67724351e-03,
         2.90805658e-03,   8.96058214e-04,   4.75668650e-03,
         2.82369568e-03,   1.94628156e-03,   1.33374229e-03,
         2.87318999e-03,   5.44586551e-03,   4.07149619e-03,
         2.29981270e-03,   7.12018229e-03,   3.24730971e-03,
         1.53692613e-03,   1.02422724e-03,   4.98644721e-03,
         1.41329021e-03,   6.41163508e-04,   2.74079032e-04,
         2.88730412e-03,   6.34903014e-04,   8.97667676e-05,
         2.10130897e-04]), 'mean_train_score': array([ 0.10729924,  0.19580563,  0.26890378,  0.32977619,  0.11746559,
        0.21430738,  0.29493283,  0.36173725,  0.12606556,  0.22994982,
        0.31571388,  0.38686072,  0.1335248 ,  0.24356619,  0.33493023,
        0.41090732,  0.53794273,  0.64817778,  0.68824183,  0.70974167,
        0.58898179,  0.70976138,  0.75384255,  0.77743767,  0.62970514,
        0.75962312,  0.80675633,  0.82848141,  0.66861324,  0.8035892 ,
        0.84918411,  0.86883341,  0.75952859,  0.79859937,  0.82682603,
        0.85286734,  0.82270096,  0.85993679,  0.89002461,  0.91449493,
        0.86889426,  0.90539902,  0.93362803,  0.95285643,  0.90551004,
        0.93994146,  0.96202756,  0.97550447,  0.80519146,  0.86025877,
        0.89849144,  0.92223555,  0.86666647,  0.92174861,  0.95126705,
        0.96814828,  0.91294977,  0.95777977,  0.97820172,  0.98818502,
        0.9415772 ,  0.97899273,  0.99219889,  0.99676297]), 'split0_train_score': array([ 0.10638112,  0.19403539,  0.26653521,  0.32706105,  0.11606856,
        0.21201062,  0.29280153,  0.36032852,  0.12397619,  0.22652108,
        0.31147816,  0.38200891,  0.13080368,  0.23819104,  0.32809909,
        0.40331918,  0.53692188,  0.64906386,  0.68648927,  0.70701346,
        0.58796214,  0.70844077,  0.75295998,  0.77681322,  0.62630401,
        0.75306675,  0.80079418,  0.82430903,  0.66345689,  0.79889309,
        0.84542536,  0.86534107,  0.76047384,  0.79640913,  0.82486907,
        0.84948171,  0.81761893,  0.85234058,  0.8888008 ,  0.91184121,
        0.86362955,  0.89932757,  0.9311396 ,  0.9516617 ,  0.90043477,
        0.93733062,  0.96016706,  0.97436413,  0.80292337,  0.85990957,
        0.89480871,  0.92091288,  0.85505383,  0.91683895,  0.94883079,
        0.96651298,  0.90528706,  0.95606872,  0.97737173,  0.98779906,
        0.94021936,  0.97998544,  0.99229216,  0.9970522 ]), 'split1_train_score': array([ 0.10858205,  0.19806742,  0.27193096,  0.33380879,  0.12031002,
        0.21877244,  0.29982759,  0.36693091,  0.12812647,  0.23340034,
        0.32020381,  0.39191389,  0.13677974,  0.24916319,  0.34151125,
        0.41807243,  0.54415409,  0.65629515,  0.69559417,  0.71744649,
        0.6009625 ,  0.72302893,  0.76362688,  0.78532923,  0.63923069,
        0.77259175,  0.81869783,  0.83923001,  0.67650243,  0.81565606,
        0.86111322,  0.87966922,  0.76872441,  0.80858857,  0.83808444,
        0.8621111 ,  0.83487858,  0.87115199,  0.89554651,  0.91789039,
        0.87838263,  0.91195204,  0.93827308,  0.9538308 ,  0.91293209,
        0.94431502,  0.96493532,  0.97777824,  0.81001089,  0.8671138 ,
        0.90242218,  0.92405387,  0.87424825,  0.9245563 ,  0.95291138,
        0.96906709,  0.91905726,  0.95989463,  0.97913811,  0.98853238,
        0.94451518,  0.97910282,  0.99207946,  0.99663081]), 'std_score_time': array([  9.51829055e-04,   1.14956483e-03,   1.81797611e-03,
         7.45027131e-04,   6.89314590e-04,   1.36032495e-03,
         1.13705752e-03,   3.66894061e-04,   2.54547056e-04,
         2.32721021e-04,   4.15772587e-04,   2.42160502e-03,
         5.76095280e-04,   5.14526890e-04,   4.76086633e-04,
         1.78618608e-02,   4.49914795e-05,   7.71929627e-05,
         2.38570344e-04,   1.52110586e-04,   1.38262324e-04,
         1.05682784e-04,   9.62793995e-05,   5.97203693e-04,
         3.50068568e-04,   2.37061475e-04,   4.01572359e-04,
         4.89261803e-04,   1.43588802e-04,   3.58236803e-04,
         3.86179243e-04,   5.89266808e-04,   1.38095653e-04,
         1.66131511e-04,   6.86100986e-05,   1.37283045e-04,
         1.22227997e-04,   2.65863784e-04,   1.51367307e-04,
         6.66678418e-05,   1.99891079e-04,   6.84789668e-05,
         2.38343525e-04,   3.28538202e-03,   1.03954123e-04,
         6.55545963e-05,   9.74833738e-05,   2.79519628e-04,
         9.57406275e-05,   7.59415338e-05,   1.23368253e-04,
         3.83555380e-04,   1.67245524e-04,   1.05491129e-04,
         5.13183184e-05,   1.09866398e-04,   8.67576676e-05,
         1.38637623e-04,   3.48204009e-04,   4.22551364e-04,
         6.55585771e-04,   4.04704648e-04,   1.11423259e-04,
         4.59929369e-04]), 'mean_fit_time': array([  3.48283511,   7.14547092,  11.34150422,  13.74870896,
         4.88210148,  10.48228621,  15.84481061,  19.97098535,
         6.95286393,  13.21136409,  20.53292048,  27.04392022,
         9.37010425,  16.36941731,  25.53503227,  27.87305498,
         1.63546985,   3.19891238,   4.69981408,   6.36215234,
         2.66646284,   5.18335193,   7.45375699,   9.68044734,
         3.80256331,   7.36687911,  10.68090761,  13.46673751,
         4.98601466,   9.73461509,  14.22343707,  17.75888932,
         1.44842929,   2.82780153,   4.04779524,   5.48182774,
         2.17293167,   4.07332093,   5.86318886,   7.75812644,
         2.9845292 ,   5.53768557,   8.14977199,  10.8951298 ,
         3.74249429,   7.01604837,  10.48989278,  13.76995695,
         1.46687245,   2.86952329,   4.29996276,   5.78859711,
         2.06524426,   3.95981556,   6.04373038,   8.07841998,
         2.64731348,   5.21513361,   7.96998328,  10.83363307,
         3.39361727,   6.59841925,  10.13760036,  13.41184843]), 'split3_train_score': array([ 0.10493865,  0.19159476,  0.26318455,  0.32269364,  0.11536194,
        0.21060965,  0.29058565,  0.3564397 ,  0.1264306 ,  0.23043747,
        0.31581745,  0.38682866,  0.1336181 ,  0.24420569,  0.33618896,
        0.41250787,  0.5279109 ,  0.63507002,  0.67692628,  0.6989561 ,
        0.5794993 ,  0.70121487,  0.74835755,  0.77219074,  0.62614532,
        0.75622488,  0.80568922,  0.82577034,  0.66768597,  0.80083972,
        0.84643825,  0.86645054,  0.74538036,  0.7896612 ,  0.82226749,
        0.84828853,  0.81784753,  0.86042028,  0.88641497,  0.91148407,
        0.86944678,  0.90710578,  0.93118354,  0.95360325,  0.90619479,
        0.94054248,  0.96034481,  0.9749006 ,  0.8030806 ,  0.85198821,
        0.89405093,  0.91916125,  0.86976064,  0.92080173,  0.95116511,
        0.96896536,  0.91478351,  0.95707402,  0.97795746,  0.98808163,
        0.94407515,  0.97838336,  0.99227878,  0.99650672]), 'param_model__n_estimators': masked_array(data = [100 200 300 400 100 200 300 400 100 200 300 400 100 200 300 400 100 200
 300 400 100 200 300 400 100 200 300 400 100 200 300 400 100 200 300 400
 100 200 300 400 100 200 300 400 100 200 300 400 100 200 300 400 100 200
 300 400 100 200 300 400 100 200 300 400],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'mean_test_score': array([ 0.09369809,  0.17385935,  0.23891004,  0.29297634,  0.09826912,
        0.18024683,  0.2487185 ,  0.30507907,  0.10177273,  0.18515955,
        0.25398888,  0.31041734,  0.10373522,  0.18987519,  0.25997416,
        0.31676208,  0.47388024,  0.55136467,  0.56761394,  0.5750348 ,
        0.48702925,  0.56424424,  0.57759627,  0.58309202,  0.49248037,
        0.56955534,  0.58582249,  0.59152056,  0.49762167,  0.57676148,
        0.5886958 ,  0.59093727,  0.58487843,  0.58993847,  0.58755015,
        0.58490572,  0.59004962,  0.58894272,  0.58761648,  0.58693462,
        0.58738596,  0.58924902,  0.58191539,  0.58381545,  0.5923162 ,
        0.58729471,  0.5851932 ,  0.58305112,  0.58968719,  0.58368606,
        0.58075555,  0.57536812,  0.56703586,  0.562614  ,  0.55109383,
        0.54873034,  0.5879686 ,  0.58124987,  0.57693507,  0.56960063,
        0.56799005,  0.56527222,  0.56348039,  0.55739884]), 'split1_test_score': array([ 0.09567543,  0.17320867,  0.23605868,  0.28777956,  0.0979495 ,
        0.17753693,  0.24321699,  0.2968955 ,  0.10316795,  0.18590047,
        0.25344796,  0.3086971 ,  0.10471486,  0.19100913,  0.26000785,
        0.31565203,  0.4672241 ,  0.54389679,  0.55588718,  0.55851696,
        0.47618865,  0.54991228,  0.5560999 ,  0.55678004,  0.47729236,
        0.54268616,  0.54940623,  0.55287317,  0.48648779,  0.55060194,
        0.55012921,  0.54931372,  0.56119742,  0.56254307,  0.55339002,
        0.54797809,  0.56575813,  0.56342715,  0.55786596,  0.55232954,
        0.5520799 ,  0.55731062,  0.5417227 ,  0.53234678,  0.53504778,
        0.52622654,  0.51586122,  0.51755239,  0.5601983 ,  0.55036465,
        0.53863108,  0.53010178,  0.54466115,  0.5310126 ,  0.51501995,
        0.50383496,  0.55335947,  0.53918499,  0.52093754,  0.51900795,
        0.53638591,  0.52620525,  0.52596315,  0.52340427])}
GREP_ME***Best params of [GradientBoostingRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__learning_rate': 0.1, 'model__max_depth': 6, 'model__n_estimators': 100}
GREP_ME***Best score of [GradientBoostingRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.59231620236
####################################################################################
################# Running the iteration 5  of the GridSearchCV ####################
####################################################################################
***Starting [RandomForestRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__max_depth': [1, 2, 3, 4, 5], 'model__n_estimators': [50, 100, 150, 200]}
Fitting 4 folds for each of 20 candidates, totalling 80 fits
GREP_ME***Results of [RandomForestRegressor] estimatorrun are
{'std_fit_time': array([ 0.02734238,  0.04248829,  0.03167407,  0.09187773,  0.00712855,
        0.0098404 ,  0.01220241,  0.00975386,  0.00390028,  0.00359963,
        0.01196809,  0.01250321,  0.00605803,  0.0139591 ,  0.02491453,
        0.01700265,  0.01006032,  0.00775468,  0.01452195,  0.02787049]), 'params': ({'model__max_depth': 1, 'model__n_estimators': 50}, {'model__max_depth': 1, 'model__n_estimators': 100}, {'model__max_depth': 1, 'model__n_estimators': 150}, {'model__max_depth': 1, 'model__n_estimators': 200}, {'model__max_depth': 2, 'model__n_estimators': 50}, {'model__max_depth': 2, 'model__n_estimators': 100}, {'model__max_depth': 2, 'model__n_estimators': 150}, {'model__max_depth': 2, 'model__n_estimators': 200}, {'model__max_depth': 3, 'model__n_estimators': 50}, {'model__max_depth': 3, 'model__n_estimators': 100}, {'model__max_depth': 3, 'model__n_estimators': 150}, {'model__max_depth': 3, 'model__n_estimators': 200}, {'model__max_depth': 4, 'model__n_estimators': 50}, {'model__max_depth': 4, 'model__n_estimators': 100}, {'model__max_depth': 4, 'model__n_estimators': 150}, {'model__max_depth': 4, 'model__n_estimators': 200}, {'model__max_depth': 5, 'model__n_estimators': 50}, {'model__max_depth': 5, 'model__n_estimators': 100}, {'model__max_depth': 5, 'model__n_estimators': 150}, {'model__max_depth': 5, 'model__n_estimators': 200}), 'rank_test_score': array([20, 18, 17, 19, 16, 13, 15, 14, 12, 10, 11,  9,  5,  7,  6,  8,  1,
        3,  4,  2], dtype=int32), 'param_model__max_depth': masked_array(data = [1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5],
             mask = [False False False False False False False False False False False False
 False False False False False False False False],
       fill_value = ?)
, 'mean_score_time': array([ 0.00974655,  0.01303542,  0.01962417,  0.02319521,  0.0068208 ,
        0.0125851 ,  0.01883596,  0.02365071,  0.00721604,  0.01348394,
        0.01989877,  0.02603865,  0.00792879,  0.01510131,  0.02176183,
        0.02857482,  0.00835752,  0.01564521,  0.02315098,  0.03052068]), 'split0_test_score': array([ 0.45149016,  0.45502761,  0.45228544,  0.45247024,  0.56290469,
        0.55399144,  0.55478738,  0.55388929,  0.58162209,  0.57782896,
        0.57701295,  0.58350192,  0.59485927,  0.58359632,  0.59146009,
        0.59052174,  0.59725857,  0.59347448,  0.58838716,  0.59130968]), 'split3_test_score': array([ 0.3726552 ,  0.3803718 ,  0.38282976,  0.38209442,  0.49976575,
        0.51782241,  0.50967561,  0.51389504,  0.5525693 ,  0.55191484,
        0.55367972,  0.55315484,  0.57295514,  0.57195531,  0.57318342,
        0.57718528,  0.5897633 ,  0.58558892,  0.58391105,  0.58888217]), 'split2_train_score': array([ 0.42436629,  0.42513151,  0.42567278,  0.42348598,  0.57251935,
        0.57218926,  0.57244855,  0.57115441,  0.62946249,  0.629544  ,
        0.62755396,  0.62886749,  0.67534677,  0.6744256 ,  0.67546971,
        0.6757046 ,  0.71842446,  0.71697695,  0.71796989,  0.71645787]), 'split2_test_score': array([ 0.42351174,  0.42384483,  0.4278067 ,  0.42627862,  0.5108619 ,
        0.50902657,  0.50468495,  0.50554386,  0.52736421,  0.53865033,
        0.53325838,  0.53520323,  0.55806001,  0.55557722,  0.55695346,
        0.55056437,  0.5740077 ,  0.56929694,  0.56964982,  0.56929969]), 'std_test_score': array([ 0.02826847,  0.02657547,  0.02509217,  0.02536929,  0.02615021,
        0.02076034,  0.0211403 ,  0.02018339,  0.02309165,  0.02034079,
        0.0200863 ,  0.02233722,  0.01832979,  0.01342326,  0.0171513 ,
        0.01963997,  0.02027063,  0.01744557,  0.01559096,  0.01517734]), 'std_train_score': array([ 0.00696389,  0.00752565,  0.00866721,  0.00865461,  0.00834835,
        0.00893745,  0.00790731,  0.00768105,  0.00867445,  0.00694108,
        0.00790229,  0.00773751,  0.0084035 ,  0.0078275 ,  0.00673434,
        0.00610024,  0.00822721,  0.00702251,  0.00781417,  0.00726421]), 'mean_train_score': array([ 0.42608021,  0.42811589,  0.42852556,  0.42761364,  0.56322548,
        0.56295403,  0.56277402,  0.56256684,  0.62339041,  0.62458102,
        0.62492935,  0.62437521,  0.67267995,  0.67418576,  0.67312165,
        0.67423468,  0.71669905,  0.71566972,  0.71745356,  0.71689169]), 'split0_train_score': array([ 0.41616221,  0.41740698,  0.41582265,  0.41574274,  0.55374897,
        0.55453794,  0.55511872,  0.55445465,  0.61865986,  0.62233777,
        0.62372242,  0.62295275,  0.66831135,  0.66935943,  0.66890783,
        0.67164774,  0.70918418,  0.70969964,  0.71124187,  0.70965706]), 'split1_train_score': array([ 0.43543368,  0.43281764,  0.43406842,  0.43299796,  0.5704786 ,
        0.57157375,  0.56868769,  0.56926916,  0.63369317,  0.6321473 ,
        0.63518487,  0.63314953,  0.68481868,  0.68675543,  0.68289747,
        0.68314108,  0.72945631,  0.72663366,  0.73002685,  0.7287616 ]), 'std_score_time': array([  2.52395372e-03,   1.12857822e-03,   3.61754929e-03,
         7.13438196e-04,   1.58980728e-04,   3.62556838e-04,
         4.16486324e-04,   3.48275581e-04,   4.74316296e-05,
         1.84609923e-04,   3.74794556e-04,   2.81720633e-04,
         2.02625243e-04,   4.34792004e-04,   5.76579717e-04,
         5.63140255e-04,   1.04688292e-04,   3.16951447e-04,
         2.03341654e-04,   4.99953727e-04]), 'mean_fit_time': array([ 0.28920627,  0.51867312,  0.71783787,  0.97933078,  0.41437894,
        0.78627706,  1.15598196,  1.53484929,  0.55220699,  1.06835109,
        1.6105209 ,  2.14235079,  0.70586169,  1.38632756,  2.05849481,
        2.71482402,  0.85062534,  1.66214651,  2.47170913,  3.28578186]), 'split3_train_score': array([ 0.42835866,  0.43710744,  0.43853837,  0.43822789,  0.556155  ,
        0.55351516,  0.55484112,  0.55538915,  0.61174613,  0.614295  ,
        0.61325614,  0.61253107,  0.662243  ,  0.66620257,  0.66521159,
        0.66644529,  0.70973127,  0.70936862,  0.71057564,  0.71269022]), 'param_model__n_estimators': masked_array(data = [50 100 150 200 50 100 150 200 50 100 150 200 50 100 150 200 50 100 150 200],
             mask = [False False False False False False False False False False False False
 False False False False False False False False],
       fill_value = ?)
, 'mean_test_score': array([ 0.41626384,  0.41870319,  0.41923247,  0.4183647 ,  0.5183017 ,
        0.51994582,  0.51835679,  0.51949336,  0.54644427,  0.54766163,
        0.54726121,  0.54910224,  0.56788289,  0.56517644,  0.56690975,
        0.565037  ,  0.57635653,  0.57406259,  0.5725829 ,  0.57591736]), 'split1_test_score': array([ 0.41739825,  0.41556854,  0.41400799,  0.41261551,  0.49967446,
        0.49894287,  0.5042792 ,  0.50464525,  0.52422147,  0.52225238,
        0.52509379,  0.52454898,  0.54565716,  0.54957692,  0.54604201,
        0.54187661,  0.54439656,  0.54789003,  0.54838357,  0.55417791])}
GREP_ME***Best params of [RandomForestRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__max_depth': 5, 'model__n_estimators': 50}
GREP_ME***Best score of [RandomForestRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.576356533699
####################################################################################
################# Running the iteration 6  of the GridSearchCV ####################
####################################################################################
***Starting [KNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__n_neighbors': [3, 4, 5, 6], 'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__weights': ['uniform', 'distance']}
Fitting 4 folds for each of 32 candidates, totalling 128 fits
[CV] model__n_neighbors=3, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=3, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=brute, model__weights=distance, total=   0.3s
[CV] model__n_neighbors=4, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=4, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=brute, model__weights=distance, total=   0.3s
[CV] model__n_neighbors=5, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=5, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=brute, model__weights=distance, total=   0.3s
[CV] model__n_neighbors=6, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=6, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=brute, model__weights=distance, total=   0.2s
[CV] model__n_neighbors=3, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=auto, model__weights=distance, total=   0.2s
[CV] model__n_neighbors=3, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=3, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=brute, model__weights=distance, total=   0.3s
[CV] model__n_neighbors=4, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=4, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=brute, model__weights=distance, total=   0.3s
[CV] model__n_neighbors=5, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=5, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=brute, model__weights=distance, total=   0.4s
[CV] model__n_neighbors=6, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=6, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=brute, model__weights=distance, total=   0.2s
[CV] model__n_neighbors=3, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=auto, model__weights=uniform, total=   0.2s
[CV] model__n_neighbors=3, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=auto, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=auto, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=auto, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=auto, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=auto, model__weights=distance, total=   0.2s
[CV] model__n_neighbors=3, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=ball_tree, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=ball_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=ball_tree, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=ball_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=3, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=4, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=5, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=kd_tree, model__weights=distance, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=kd_tree, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=kd_tree, model__weights=uniform, total=   0.1s
[CV] model__n_neighbors=6, model__algorithm=kd_tree, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=kd_tree, model__weights=distance, total=   0.2s
[CV] model__n_neighbors=3, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=3, model__algorithm=brute, model__weights=uniform, total=   0.4s
[CV] model__n_neighbors=3, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=3, model__algorithm=brute, model__weights=distance, total=   0.2s
[CV] model__n_neighbors=4, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=4, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=4, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=4, model__algorithm=brute, model__weights=distance, total=   0.3s
[CV] model__n_neighbors=5, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=5, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=5, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=5, model__algorithm=brute, model__weights=distance, total=   0.3s
[CV] model__n_neighbors=6, model__algorithm=brute, model__weights=uniform 
[CV]  model__n_neighbors=6, model__algorithm=brute, model__weights=uniform, total=   0.3s
[CV] model__n_neighbors=6, model__algorithm=brute, model__weights=distance 
[CV]  model__n_neighbors=6, model__algorithm=brute, model__weights=distance, total=   0.4s
GREP_ME***Results of [KNeighborsRegressor] estimatorrun are
{'std_fit_time': array([ 0.00691589,  0.005752  ,  0.00551161,  0.00575267,  0.00564794,
        0.00556426,  0.00192717,  0.00906418,  0.0062661 ,  0.00607773,
        0.00639531,  0.00716232,  0.00663892,  0.00719626,  0.00378424,
        0.00717404,  0.00311584,  0.00661272,  0.00804354,  0.00106033,
        0.00580492,  0.00171989,  0.00739339,  0.01177807,  0.01850807,
        0.01083039,  0.01686552,  0.03418832,  0.01161208,  0.01938975,
        0.01431605,  0.01102543]), 'param_model__n_neighbors': masked_array(data = [3 3 4 4 5 5 6 6 3 3 4 4 5 5 6 6 3 3 4 4 5 5 6 6 3 3 4 4 5 5 6 6],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False],
       fill_value = ?)
, 'params': ({'model__n_neighbors': 3, 'model__algorithm': 'auto', 'model__weights': 'uniform'}, {'model__n_neighbors': 3, 'model__algorithm': 'auto', 'model__weights': 'distance'}, {'model__n_neighbors': 4, 'model__algorithm': 'auto', 'model__weights': 'uniform'}, {'model__n_neighbors': 4, 'model__algorithm': 'auto', 'model__weights': 'distance'}, {'model__n_neighbors': 5, 'model__algorithm': 'auto', 'model__weights': 'uniform'}, {'model__n_neighbors': 5, 'model__algorithm': 'auto', 'model__weights': 'distance'}, {'model__n_neighbors': 6, 'model__algorithm': 'auto', 'model__weights': 'uniform'}, {'model__n_neighbors': 6, 'model__algorithm': 'auto', 'model__weights': 'distance'}, {'model__n_neighbors': 3, 'model__algorithm': 'ball_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 3, 'model__algorithm': 'ball_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 4, 'model__algorithm': 'ball_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 4, 'model__algorithm': 'ball_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 5, 'model__algorithm': 'ball_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 5, 'model__algorithm': 'ball_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 6, 'model__algorithm': 'ball_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 6, 'model__algorithm': 'ball_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 3, 'model__algorithm': 'kd_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 3, 'model__algorithm': 'kd_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 4, 'model__algorithm': 'kd_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 4, 'model__algorithm': 'kd_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 5, 'model__algorithm': 'kd_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 5, 'model__algorithm': 'kd_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 6, 'model__algorithm': 'kd_tree', 'model__weights': 'uniform'}, {'model__n_neighbors': 6, 'model__algorithm': 'kd_tree', 'model__weights': 'distance'}, {'model__n_neighbors': 3, 'model__algorithm': 'brute', 'model__weights': 'uniform'}, {'model__n_neighbors': 3, 'model__algorithm': 'brute', 'model__weights': 'distance'}, {'model__n_neighbors': 4, 'model__algorithm': 'brute', 'model__weights': 'uniform'}, {'model__n_neighbors': 4, 'model__algorithm': 'brute', 'model__weights': 'distance'}, {'model__n_neighbors': 5, 'model__algorithm': 'brute', 'model__weights': 'uniform'}, {'model__n_neighbors': 5, 'model__algorithm': 'brute', 'model__weights': 'distance'}, {'model__n_neighbors': 6, 'model__algorithm': 'brute', 'model__weights': 'uniform'}, {'model__n_neighbors': 6, 'model__algorithm': 'brute', 'model__weights': 'distance'}), 'rank_test_score': array([21, 30,  9, 26,  5, 18,  1, 14, 21, 30,  9, 26,  5, 18,  1, 14, 21,
       30,  9, 26,  5, 18,  1, 14, 21, 29,  9, 25,  5, 17,  1, 13], dtype=int32), 'param_model__algorithm': masked_array(data = ['auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'auto' 'ball_tree'
 'ball_tree' 'ball_tree' 'ball_tree' 'ball_tree' 'ball_tree' 'ball_tree'
 'ball_tree' 'kd_tree' 'kd_tree' 'kd_tree' 'kd_tree' 'kd_tree' 'kd_tree'
 'kd_tree' 'kd_tree' 'brute' 'brute' 'brute' 'brute' 'brute' 'brute'
 'brute' 'brute'],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False],
       fill_value = ?)
, 'mean_score_time': array([ 0.08729935,  0.08584726,  0.08923304,  0.08631855,  0.08624524,
        0.08734894,  0.08728254,  0.09157187,  0.04983258,  0.05053836,
        0.05028421,  0.05122238,  0.05116218,  0.05108291,  0.05321395,
        0.05119455,  0.08723277,  0.08670855,  0.08700854,  0.08636719,
        0.08798403,  0.08748621,  0.08669943,  0.08730495,  0.25065267,
        0.22078526,  0.27403176,  0.27980971,  0.25720233,  0.30736321,
        0.25125402,  0.23000097]), 'split0_test_score': array([ 0.48015743,  0.42033563,  0.52302392,  0.4417138 ,  0.5239725 ,
        0.45011959,  0.53674537,  0.45757664,  0.48015743,  0.42033563,
        0.52302392,  0.4417138 ,  0.5239725 ,  0.45011959,  0.53674537,
        0.45757664,  0.48015743,  0.42033563,  0.52302392,  0.4417138 ,
        0.5239725 ,  0.45011959,  0.53674537,  0.45757664,  0.48015743,
        0.42033558,  0.52302392,  0.44171376,  0.5239725 ,  0.45011955,
        0.53674537,  0.45757661]), 'split3_test_score': array([ 0.35577062,  0.30847881,  0.44562809,  0.35688534,  0.44680109,
        0.35350677,  0.47195888,  0.37420594,  0.35577062,  0.30847881,
        0.44562809,  0.35688534,  0.44680109,  0.35350677,  0.47195888,
        0.37420594,  0.35577062,  0.30847881,  0.44562809,  0.35688534,
        0.44680109,  0.35350677,  0.47195888,  0.37420594,  0.35577062,
        0.30847961,  0.44562809,  0.35688614,  0.44680109,  0.35350756,
        0.47195888,  0.37420674]), 'param_model__weights': masked_array(data = ['uniform' 'distance' 'uniform' 'distance' 'uniform' 'distance' 'uniform'
 'distance' 'uniform' 'distance' 'uniform' 'distance' 'uniform' 'distance'
 'uniform' 'distance' 'uniform' 'distance' 'uniform' 'distance' 'uniform'
 'distance' 'uniform' 'distance' 'uniform' 'distance' 'uniform' 'distance'
 'uniform' 'distance' 'uniform' 'distance'],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False
 False False False False False False False False],
       fill_value = ?)
, 'split2_train_score': array([ 0.74216697,  1.        ,  0.69128963,  1.        ,  0.67385072,
        1.        ,  0.65066048,  1.        ,  0.74216697,  1.        ,
        0.69128963,  1.        ,  0.67385072,  1.        ,  0.65066048,
        1.        ,  0.74216697,  1.        ,  0.69128963,  1.        ,
        0.67385072,  1.        ,  0.65066048,  1.        ,  0.74216697,
        0.99999751,  0.69128963,  0.99999681,  0.67385072,  0.99999628,
        0.65066048,  0.99999572]), 'split2_test_score': array([ 0.48603611,  0.46957757,  0.51284634,  0.49349188,  0.5063885 ,
        0.49622461,  0.48792375,  0.49401688,  0.48603611,  0.46957757,
        0.51284634,  0.49349188,  0.5063885 ,  0.49622461,  0.48792375,
        0.49401688,  0.48603611,  0.46957757,  0.51284634,  0.49349188,
        0.5063885 ,  0.49622461,  0.48792375,  0.49401688,  0.48603611,
        0.46957751,  0.51284634,  0.49349182,  0.5063885 ,  0.49622455,
        0.48792375,  0.49401682]), 'std_test_score': array([ 0.05709613,  0.06057541,  0.04228066,  0.05160642,  0.03193204,
        0.05234503,  0.02638281,  0.0439837 ,  0.05709613,  0.06057541,
        0.04228066,  0.05160642,  0.03193204,  0.05234503,  0.02638281,
        0.0439837 ,  0.05709613,  0.06057541,  0.04228066,  0.05160642,
        0.03193204,  0.05234503,  0.02638281,  0.0439837 ,  0.05709613,
        0.06057512,  0.04228066,  0.05160615,  0.03193204,  0.05234472,
        0.02638281,  0.04398339]), 'std_train_score': array([  6.54998681e-03,   0.00000000e+00,   5.81367519e-03,
         0.00000000e+00,   8.49868488e-03,   0.00000000e+00,
         8.45700770e-03,   0.00000000e+00,   6.54998681e-03,
         0.00000000e+00,   5.81367519e-03,   0.00000000e+00,
         8.49868488e-03,   0.00000000e+00,   8.45700770e-03,
         0.00000000e+00,   6.54998681e-03,   0.00000000e+00,
         5.81367519e-03,   0.00000000e+00,   8.49868488e-03,
         0.00000000e+00,   8.45700770e-03,   0.00000000e+00,
         6.54998681e-03,   6.03838679e-07,   5.81367519e-03,
         6.94331604e-07,   8.49868488e-03,   7.25968989e-07,
         8.45700770e-03,   7.96794327e-07]), 'mean_train_score': array([ 0.73138704,  1.        ,  0.68590186,  1.        ,  0.66361196,
        1.        ,  0.64216795,  1.        ,  0.73138704,  1.        ,
        0.68590186,  1.        ,  0.66361196,  1.        ,  0.64216795,
        1.        ,  0.73138704,  1.        ,  0.68590186,  1.        ,
        0.66361196,  1.        ,  0.64216795,  1.        ,  0.73138704,
        0.99999833,  0.68590186,  0.99999782,  0.66361196,  0.9999974 ,
        0.64216795,  0.99999701]), 'split0_train_score': array([ 0.7253761 ,  1.        ,  0.67635753,  1.        ,  0.65485645,
        1.        ,  0.62999239,  1.        ,  0.7253761 ,  1.        ,
        0.67635753,  1.        ,  0.65485645,  1.        ,  0.62999239,
        1.        ,  0.7253761 ,  1.        ,  0.67635753,  1.        ,
        0.65485645,  1.        ,  0.62999239,  1.        ,  0.7253761 ,
        0.99999902,  0.67635753,  0.99999864,  0.65485645,  0.99999818,
        0.62999239,  0.99999775]), 'split1_train_score': array([ 0.73098994,  1.        ,  0.6897738 ,  1.        ,  0.6701614 ,
        1.        ,  0.64943781,  1.        ,  0.73098994,  1.        ,
        0.6897738 ,  1.        ,  0.6701614 ,  1.        ,  0.64943781,
        1.        ,  0.73098994,  1.        ,  0.6897738 ,  1.        ,
        0.6701614 ,  1.        ,  0.64943781,  1.        ,  0.73098994,
        0.99999802,  0.6897738 ,  0.99999756,  0.6701614 ,  0.99999725,
        0.64943781,  0.999997  ]), 'std_score_time': array([ 0.00143675,  0.0009723 ,  0.00587238,  0.0014051 ,  0.00069461,
        0.00120637,  0.00134942,  0.00606187,  0.00487619,  0.00553738,
        0.00498373,  0.00536236,  0.005002  ,  0.00501385,  0.0074695 ,
        0.00506646,  0.00116738,  0.00132261,  0.00170671,  0.00059639,
        0.00209237,  0.00147541,  0.00074633,  0.00073577,  0.06270763,
        0.05319313,  0.0332146 ,  0.02613175,  0.02235102,  0.04889834,
        0.0153588 ,  0.05690814]), 'mean_fit_time': array([ 0.05275667,  0.05351949,  0.0483191 ,  0.05028313,  0.05025524,
        0.05057138,  0.04675186,  0.05247349,  0.04995531,  0.04955351,
        0.04913992,  0.05011535,  0.04956031,  0.05005586,  0.04886442,
        0.05108416,  0.04499865,  0.05100358,  0.05195385,  0.04528797,
        0.04847455,  0.04757351,  0.04991376,  0.0514136 ,  0.04395473,
        0.0390749 ,  0.05204266,  0.05581105,  0.03995061,  0.0533998 ,
        0.03881115,  0.03335035]), 'split3_train_score': array([ 0.72701516,  1.        ,  0.68618646,  1.        ,  0.65557926,
        1.        ,  0.6385811 ,  1.        ,  0.72701516,  1.        ,
        0.68618646,  1.        ,  0.65557926,  1.        ,  0.6385811 ,
        1.        ,  0.72701516,  1.        ,  0.68618646,  1.        ,
        0.65557926,  1.        ,  0.6385811 ,  1.        ,  0.72701516,
        0.99999879,  0.68618646,  0.99999824,  0.65557926,  0.99999788,
        0.6385811 ,  0.99999759]), 'mean_test_score': array([ 0.42706972,  0.3901202 ,  0.47648035,  0.42094951,  0.48418746,
        0.42787808,  0.49238473,  0.43791387,  0.42706972,  0.3901202 ,
        0.47648035,  0.42094951,  0.48418746,  0.42787808,  0.49238473,
        0.43791387,  0.42706972,  0.3901202 ,  0.47648035,  0.42094951,
        0.48418746,  0.42787808,  0.49238473,  0.43791387,  0.42706972,
        0.39012037,  0.47648035,  0.42094969,  0.48418746,  0.42787826,
        0.49238473,  0.43791405]), 'split1_test_score': array([ 0.38631473,  0.36208878,  0.42442303,  0.39170702,  0.45958775,
        0.41166136,  0.47291094,  0.42585601,  0.38631473,  0.36208878,
        0.42442303,  0.39170702,  0.45958775,  0.41166136,  0.47291094,
        0.42585601,  0.38631473,  0.36208878,  0.42442303,  0.39170702,
        0.45958775,  0.41166136,  0.47291094,  0.42585601,  0.38631473,
        0.36208879,  0.42442303,  0.39170704,  0.45958775,  0.41166138,
        0.47291094,  0.42585603])}
GREP_ME***Best params of [KNeighborsRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__n_neighbors': 6, 'model__algorithm': 'auto', 'model__weights': 'uniform'}
GREP_ME***Best score of [KNeighborsRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.492384734143
####################################################################################
################# Running the iteration 7  of the GridSearchCV ####################
####################################################################################
***Starting [RadiusNeighborsRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__radius': [1.0, 1.5, 2.0, 2.5], 'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__weights': ['uniform', 'distance']}
Fitting 4 folds for each of 32 candidates, totalling 128 fits
[CV] model__radius=1.0, model__algorithm=auto, model__weights=uniform 
[CV] model__radius=1.0, model__algorithm=auto, model__weights=distance 
[CV] model__radius=1.0, model__algorithm=auto, model__weights=uniform 
[CV] model__radius=1.0, model__algorithm=auto, model__weights=distance 
GREP_ME***Error caught for  [RadiusNeighborsRegressor] , pipeline: [| preprocessor:dummy | transfomer: dummy | reducer: dummy] 
JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/user/Modules/DataMining/dm-predictive-ml/random_forests/Trees_KNN_GridSearch.py in <module>()
    461     # reassign the org stdout for some reason
    462     sys.stdout = orig_stdout
    463 
    464 
    465 if __name__ == "__main__":
--> 466     simple_experiment()
    467 
    468 
    469 
    470 

...........................................................................
/home/user/Modules/DataMining/dm-predictive-ml/random_forests/Trees_KNN_GridSearch.py in simple_experiment()
    454             new_file = open(trg, "w")
    455             sys.stdout = new_file
    456             # set the itterator run to start from
    457             global itter_start
    458             itter_start = 0
--> 459             run_for_many(x_crr, y_crr, dsc, models, models_cfg)
        x_crr =       actor_1_facebook_likes  actor_2_facebook_l...0.0              0.0  

[4812 rows x 183 columns]
        y_crr = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        dsc = 'all_samples'
        models = [BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), DecisionTreeRegressor(criterion='mse', max_depth...e, random_state=None,
           splitter='best'), ExtraTreeRegressor(criterion='mse', max_depth=No..., random_state=None,
          splitter='random')]
        models_cfg = {'BaggingRegressor': {'model__max_features': [0.5, 1.0], 'model__max_samples': [0.5, 1.0], 'model__n_estimators': [10, 20, 30, 40]}, 'DecisionTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__splitter': ['best', 'random']}, 'ExtraTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__min_samples_split': [2, 3, 4, 5]}, 'ExtraTreesRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__n_estimators': [100, 200, 300, 400]}, 'GradientBoostingRegressor': {'model__learning_rate': [0.001, 0.01, 0.1, 0.2], 'model__max_depth': [3, 4, 5, 6], 'model__n_estimators': [100, 200, 300, 400]}, 'KNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__n_neighbors': [3, 4, 5, 6], 'model__weights': ['uniform', 'distance']}, 'RadiusNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__radius': [1.0, 1.5, 2.0, 2.5], 'model__weights': ['uniform', 'distance']}, 'RandomForestRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__n_estimators': [50, 100, 150, 200]}}
    460             new_file.close()
    461     # reassign the org stdout for some reason
    462     sys.stdout = orig_stdout
    463 

...........................................................................
/home/user/Modules/DataMining/dm-predictive-ml/random_forests/Trees_KNN_GridSearch.py in run_for_many(x=      actor_1_facebook_likes  actor_2_facebook_l...0.0              0.0  

[4812 rows x 183 columns], y=0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64, cl_n='all_samples', models=[BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), DecisionTreeRegressor(criterion='mse', max_depth...e, random_state=None,
           splitter='best'), ExtraTreeRegressor(criterion='mse', max_depth=No..., random_state=None,
          splitter='random')], models_cfg={'BaggingRegressor': {'model__max_features': [0.5, 1.0], 'model__max_samples': [0.5, 1.0], 'model__n_estimators': [10, 20, 30, 40]}, 'DecisionTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__splitter': ['best', 'random']}, 'ExtraTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__min_samples_split': [2, 3, 4, 5]}, 'ExtraTreesRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__n_estimators': [100, 200, 300, 400]}, 'GradientBoostingRegressor': {'model__learning_rate': [0.001, 0.01, 0.1, 0.2], 'model__max_depth': [3, 4, 5, 6], 'model__n_estimators': [100, 200, 300, 400]}, 'KNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__n_neighbors': [3, 4, 5, 6], 'model__weights': ['uniform', 'distance']}, 'RadiusNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__radius': [1.0, 1.5, 2.0, 2.5], 'model__weights': ['uniform', 'distance']}, 'RandomForestRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__n_estimators': [50, 100, 150, 200]}})
    324     errors = []
    325     errors_ind = []
    326     print("#########################################")
    327     print("###Starting all estimators for cl: " + str(cl_n))
    328     print("#########################################")
--> 329     run_solver(x, y, models, models_cfg, results, errors, errors_ind, precomp_pipe)
        x =       actor_1_facebook_likes  actor_2_facebook_l...0.0              0.0  

[4812 rows x 183 columns]
        y = 0       2783918982
1       2207615668
2       16...            0
Name: worldwide_gross, dtype: int64
        models = [BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), DecisionTreeRegressor(criterion='mse', max_depth...e, random_state=None,
           splitter='best'), ExtraTreeRegressor(criterion='mse', max_depth=No..., random_state=None,
          splitter='random')]
        models_cfg = {'BaggingRegressor': {'model__max_features': [0.5, 1.0], 'model__max_samples': [0.5, 1.0], 'model__n_estimators': [10, 20, 30, 40]}, 'DecisionTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__splitter': ['best', 'random']}, 'ExtraTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__min_samples_split': [2, 3, 4, 5]}, 'ExtraTreesRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__n_estimators': [100, 200, 300, 400]}, 'GradientBoostingRegressor': {'model__learning_rate': [0.001, 0.01, 0.1, 0.2], 'model__max_depth': [3, 4, 5, 6], 'model__n_estimators': [100, 200, 300, 400]}, 'KNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__n_neighbors': [3, 4, 5, 6], 'model__weights': ['uniform', 'distance']}, 'RadiusNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__radius': [1.0, 1.5, 2.0, 2.5], 'model__weights': ['uniform', 'distance']}, 'RandomForestRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__n_estimators': [50, 100, 150, 200]}}
        errors = []
        errors_ind = []
        precomp_pipe = []
    330     print("#########################################")
    331     print("###Finished all estimators for cl: " + str(cl_n))
    332     print("#########################################")
    333 

...........................................................................
/home/user/Modules/DataMining/dm-predictive-ml/random_forests/Trees_KNN_GridSearch.py in run_solver(x=      actor_1_facebook_likes  actor_2_facebook_l...0.0              0.0  

[4812 rows x 183 columns], y=4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64, models=[BaggingRegressor(base_estimator=None, bootstrap=...state=None,
         verbose=0, warm_start=False), ExtraTreesRegressor(bootstrap=False, criterion='...tate=None,
          verbose=0, warm_start=False), GradientBoostingRegressor(alpha=0.9, criterion='...le=1.0, verbose=0,
             warm_start=False), RandomForestRegressor(bootstrap=True, criterion=...ate=None,
           verbose=0, warm_start=False), KNeighborsRegressor(algorithm='auto', leaf_size=... n_neighbors=5, p=2,
          weights='uniform'), RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), DecisionTreeRegressor(criterion='mse', max_depth...e, random_state=None,
           splitter='best'), ExtraTreeRegressor(criterion='mse', max_depth=No..., random_state=None,
          splitter='random')], models_cfg={'BaggingRegressor': {'model__max_features': [0.5, 1.0], 'model__max_samples': [0.5, 1.0], 'model__n_estimators': [10, 20, 30, 40]}, 'DecisionTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__splitter': ['best', 'random']}, 'ExtraTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__min_samples_split': [2, 3, 4, 5]}, 'ExtraTreesRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__n_estimators': [100, 200, 300, 400]}, 'GradientBoostingRegressor': {'model__learning_rate': [0.001, 0.01, 0.1, 0.2], 'model__max_depth': [3, 4, 5, 6], 'model__n_estimators': [100, 200, 300, 400]}, 'KNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__n_neighbors': [3, 4, 5, 6], 'model__weights': ['uniform', 'distance']}, 'RadiusNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__radius': [1.0, 1.5, 2.0, 2.5], 'model__weights': ['uniform', 'distance']}, 'RandomForestRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__n_estimators': [50, 100, 150, 200]}}, results={'BaggingRegressor': {'best_cfg': {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 40}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.58466104806928287}, 'ExtraTreesRegressor': {'best_cfg': {'model__max_depth': 5, 'model__max_features': 'auto', 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55953513126873233}, 'GradientBoostingRegressor': {'best_cfg': {'model__learning_rate': 0.1, 'model__max_depth': 6, 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59231620236033233}, 'KNeighborsRegressor': {'best_cfg': {'model__algorithm': 'auto', 'model__n_neighbors': 6, 'model__weights': 'uniform'}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.49238473414266698}, 'RandomForestRegressor': {'best_cfg': {'model__max_depth': 5, 'model__n_estimators': 50}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5763565336989982}}, errors=[], errors_ind=[], precomp_pipe=[])
    313     for filename in os.listdir("./tmp"):
    314         pipe_dict = pickle.loads(open("./tmp/" + filename, 'rb').read())
    315         # for model in models:
    316         for model in models:
    317             run_grid_search(pipe_dict['precomp_transform'], y, model, models_cfg, pipe_dict['cfg_dict'], pipe_dict['pipeline_cfg'],
--> 318                             results, errors, errors_ind)
        results = {'BaggingRegressor': {'best_cfg': {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 40}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.58466104806928287}, 'ExtraTreesRegressor': {'best_cfg': {'model__max_depth': 5, 'model__max_features': 'auto', 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55953513126873233}, 'GradientBoostingRegressor': {'best_cfg': {'model__learning_rate': 0.1, 'model__max_depth': 6, 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59231620236033233}, 'KNeighborsRegressor': {'best_cfg': {'model__algorithm': 'auto', 'model__n_neighbors': 6, 'model__weights': 'uniform'}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.49238473414266698}, 'RandomForestRegressor': {'best_cfg': {'model__max_depth': 5, 'model__n_estimators': 50}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5763565336989982}}
        errors = []
        errors_ind = []
    319 
    320 ## Function for trigrering gridserach and priting results
    321 def run_for_many(x, y, cl_n, models, models_cfg):
    322     results = {}

...........................................................................
/home/user/Modules/DataMining/dm-predictive-ml/random_forests/Trees_KNN_GridSearch.py in run_grid_search(x=array([[   15.,     9.,     9., ...,     0.,    ....,   229.,   207., ...,     0.,     0.,     0.]]), y=4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64, model=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), model_cfg={'BaggingRegressor': {'model__max_features': [0.5, 1.0], 'model__max_samples': [0.5, 1.0], 'model__n_estimators': [10, 20, 30, 40]}, 'DecisionTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__splitter': ['best', 'random']}, 'ExtraTreeRegressor': {'model__max_depth': [3, 4, 5, 6], 'model__min_samples_split': [2, 3, 4, 5]}, 'ExtraTreesRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__max_features': ['auto', 'sqrt', 'log2'], 'model__n_estimators': [100, 200, 300, 400]}, 'GradientBoostingRegressor': {'model__learning_rate': [0.001, 0.01, 0.1, 0.2], 'model__max_depth': [3, 4, 5, 6], 'model__n_estimators': [100, 200, 300, 400]}, 'KNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__n_neighbors': [3, 4, 5, 6], 'model__weights': ['uniform', 'distance']}, 'RadiusNeighborsRegressor': {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__radius': [1.0, 1.5, 2.0, 2.5], 'model__weights': ['uniform', 'distance']}, 'RandomForestRegressor': {'model__max_depth': [1, 2, 3, 4, 5], 'model__n_estimators': [50, 100, 150, 200]}}, cfg_dict={}, pipeline_cfg='| preprocessor:dummy | transfomer: dummy | reducer: dummy', results={'BaggingRegressor': {'best_cfg': {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 40}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.58466104806928287}, 'ExtraTreesRegressor': {'best_cfg': {'model__max_depth': 5, 'model__max_features': 'auto', 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55953513126873233}, 'GradientBoostingRegressor': {'best_cfg': {'model__learning_rate': 0.1, 'model__max_depth': 6, 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59231620236033233}, 'KNeighborsRegressor': {'best_cfg': {'model__algorithm': 'auto', 'model__n_neighbors': 6, 'model__weights': 'uniform'}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.49238473414266698}, 'RandomForestRegressor': {'best_cfg': {'model__max_depth': 5, 'model__n_estimators': 50}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5763565336989982}}, errors=[], errors_ind=[])
    248     print("##param_grid##")
    249     print(param_grid)
    250     estimator = GridSearchCV(pipe, param_grid, verbose=2, cv=cv, n_jobs=-1)
    251     # run the estimator, except exceptions, sape errors
    252     try:
--> 253         estimator.fit(x, y)
        estimator.fit = <bound method GridSearchCV.fit of GridSearchCV(c...rain_score=True,
       scoring=None, verbose=2)>
        x = array([[   15.,     9.,     9., ...,     0.,    ....,   229.,   207., ...,     0.,     0.,     0.]])
        y = 4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64
    254         print("GREP_ME***Results of [" + name + "] estimatorrun are")
    255         print(estimator.cv_results_)
    256         print("GREP_ME***Best params of [" + name + "] estimator,pipeline:" + pipeline_cfg + "  run are")
    257         best_param = dict(estimator.best_params_, **cfg_dict)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[   15.,     9.,     9., ...,     0.,    ....,   229.,   207., ...,     0.,     0.,     0.]]), y=4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64, groups=None)
    940 
    941         groups : array-like, with shape (n_samples,), optional
    942             Group labels for the samples used while splitting the dataset into
    943             train/test set.
    944         """
--> 945         return self._fit(X, y, groups, ParameterGrid(self.param_grid))
        self._fit = <bound method GridSearchCV._fit of GridSearchCV(...rain_score=True,
       scoring=None, verbose=2)>
        X = array([[   15.,     9.,     9., ...,     0.,    ....,   229.,   207., ...,     0.,     0.,     0.]])
        y = 4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64
        groups = None
        self.param_grid = {'model__algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'], 'model__radius': [1.0, 1.5, 2.0, 2.5], 'model__weights': ['uniform', 'distance']}
    946 
    947 
    948 class RandomizedSearchCV(BaseSearchCV):
    949     """Randomized search on hyper parameters.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_search.py in _fit(self=GridSearchCV(cv=4, error_score='raise',
       e...train_score=True,
       scoring=None, verbose=2), X=array([[   15.,     9.,     9., ...,     0.,    ....,   229.,   207., ...,     0.,     0.,     0.]]), y=4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterGrid object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterGrid object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Sun Apr 23 19:43:31 2017
PID: 21522                                   Python 3.4.3: /usr/bin/python3
...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[   15.,     9.,     9., ...,     0.,   ....,   229.,   207., ...,     0.,     0.,     0.]]), 4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {'model__algorithm': 'auto', 'model__radius': 1.0, 'model__weights': 'uniform'}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), memmap([[   15.,     9.,     9., ...,     0.,   ....,   229.,   207., ...,     0.,     0.,     0.]]), 4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64, <function _passthrough_scorer>, array([1203, 1204, 1205, ..., 4809, 4810, 4811]), array([   0,    1,    2, ..., 1200, 1201, 1202]), 2, {'model__algorithm': 'auto', 'model__radius': 1.0, 'model__weights': 'uniform'})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': True}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[   15.,     9.,     9., ...,     0.,   ....,   229.,   207., ...,     0.,     0.,     0.]]), y=4475         4134
422     266824291
3475      61...     46309644
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>, train=array([1203, 1204, 1205, ..., 4809, 4810, 4811]), test=array([   0,    1,    2, ..., 1200, 1201, 1202]), verbose=2, parameters={'model__algorithm': 'auto', 'model__radius': 1.0, 'model__weights': 'uniform'}, fit_params={}, return_train_score=True, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    255                              " numeric value. (Hint: if using 'raise', please"
    256                              " make sure that it has been spelled correctly.)")
    257 
    258     else:
    259         fit_time = time.time() - start_time
--> 260         test_score = _score(estimator, X_test, y_test, scorer)
        test_score = undefined
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y_test = 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64
        scorer = <function _passthrough_scorer>
    261         score_time = time.time() - start_time - fit_time
    262         if return_train_score:
    263             train_score = _score(estimator, X_train, y_train, scorer)
    264 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/model_selection/_validation.py in _score(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X_test=memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y_test=4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64, scorer=<function _passthrough_scorer>)
    283 def _score(estimator, X_test, y_test, scorer):
    284     """Compute the score of an estimator on a given test set."""
    285     if y_test is None:
    286         score = scorer(estimator, X_test)
    287     else:
--> 288         score = scorer(estimator, X_test, y_test)
        score = undefined
        scorer = <function _passthrough_scorer>
        estimator = Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))])
        X_test = memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y_test = 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64
    289     if hasattr(score, 'item'):
    290         try:
    291             # e.g. unwrap memmapped scalars
    292             score = score.item()

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/scorer.py in _passthrough_scorer(estimator=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), *args=(memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64), **kwargs={})
    214     return scorer
    215 
    216 
    217 def _passthrough_scorer(estimator, *args, **kwargs):
    218     """Function that wraps estimator.score"""
--> 219     return estimator.score(*args, **kwargs)
        estimator.score = <function Pipeline.score>
        args = (memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64)
        kwargs = {}
    220 
    221 
    222 def check_scoring(estimator, scoring=None, allow_none=False):
    223     """Determine scorer from user options.

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/metaestimators.py in <lambda>(*args=(memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64), **kwargs={})
     49                     break
     50             else:
     51                 attrgetter(self.delegate_names[-1])(obj)
     52 
     53         # lambda, but not partial, allows help() to work with update_wrapper
---> 54         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)
        args = (memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]]), 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64)
        kwargs = {}
     55         # update the docstring of the returned function
     56         update_wrapper(out, self.fn)
     57         return out
     58 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/pipeline.py in score(self=Pipeline(steps=[('model', RadiusNeighborsRegress...rams=None, p=2, radius=1.0, weights='uniform'))]), X=memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64)
    500         """
    501         Xt = X
    502         for name, transform in self.steps[:-1]:
    503             if transform is not None:
    504                 Xt = transform.transform(Xt)
--> 505         return self.steps[-1][-1].score(Xt, y)
        self.steps.score = undefined
        Xt = memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]])
        y = 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64
    506 
    507     @property
    508     def classes_(self):
    509         return self.steps[-1][-1].classes_

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/base.py in score(self=RadiusNeighborsRegressor(algorithm='auto', leaf_..._params=None, p=2, radius=1.0, weights='uniform'), X=memmap([[  1.50000000e+01,   9.00000000e+00,   9...000000e+00,   0.00000000e+00,   0.00000000e+00]]), y=4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64, sample_weight=None)
    382             R^2 of self.predict(X) wrt. y.
    383         """
    384 
    385         from .metrics import r2_score
    386         return r2_score(y, self.predict(X), sample_weight=sample_weight,
--> 387                         multioutput='variance_weighted')
    388 
    389 
    390 ###############################################################################
    391 class ClusterMixin(object):

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in r2_score(y_true=4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64, y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), sample_weight=None, multioutput='variance_weighted')
    450     >>> y_pred = [3,2,1]
    451     >>> r2_score(y_true, y_pred)
    452     -3.0
    453     """
    454     y_type, y_true, y_pred, multioutput = _check_reg_targets(
--> 455         y_true, y_pred, multioutput)
        y_true = 4475         4134
422     266824291
3475      61...       413802
Name: worldwide_gross, dtype: int64
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
        multioutput = 'variance_weighted'
    456 
    457     if sample_weight is not None:
    458         sample_weight = column_or_1d(sample_weight)
    459         weight = sample_weight[:, np.newaxis]

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/metrics/regression.py in _check_reg_targets(y_true=array([     4134, 266824291,   6121582, ...,   4333569,  28972187,
          413802]), y_pred=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), multioutput='variance_weighted')
     71         correct keyword.
     72 
     73     """
     74     check_consistent_length(y_true, y_pred)
     75     y_true = check_array(y_true, ensure_2d=False)
---> 76     y_pred = check_array(y_pred, ensure_2d=False)
        y_pred = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
     77 
     78     if y_true.ndim == 1:
     79         y_true = y_true.reshape((-1, 1))
     80 

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in check_array(array=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]), accept_sparse=None, dtype=None, order=None, copy=False, force_all_finite=True, ensure_2d=False, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=False, estimator=None)
    402             array = array.astype(np.float64)
    403         if not allow_nd and array.ndim >= 3:
    404             raise ValueError("Found array with dim %d. %s expected <= 2."
    405                              % (array.ndim, estimator_name))
    406         if force_all_finite:
--> 407             _assert_all_finite(array)
        array = array([ nan,  nan,  nan, ...,  nan,  nan,  nan])
    408 
    409     shape_repr = _shape_repr(array.shape)
    410     if ensure_min_samples > 0:
    411         n_samples = _num_samples(array)

...........................................................................
/usr/local/lib/python3.4/dist-packages/sklearn/utils/validation.py in _assert_all_finite(X=array([ nan,  nan,  nan, ...,  nan,  nan,  nan]))
     53     # everything is finite; fall back to O(n) space np.isfinite to prevent
     54     # false positives from overflow in sum method.
     55     if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())
     56             and not np.isfinite(X).all()):
     57         raise ValueError("Input contains NaN, infinity"
---> 58                          " or a value too large for %r." % X.dtype)
        X.dtype = dtype('float64')
     59 
     60 
     61 def assert_all_finite(X):
     62     """Throw a ValueError if X contains NaN or infinity.

ValueError: Input contains NaN, infinity or a value too large for dtype('float64').
___________________________________________________________________________
####################################################################################
################# Running the iteration 8  of the GridSearchCV ####################
####################################################################################
***Starting [DecisionTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__max_features': ['auto', 'sqrt', 'log2'], 'model__splitter': ['best', 'random'], 'model__max_depth': [3, 4, 5, 6]}
Fitting 4 folds for each of 24 candidates, totalling 96 fits
GREP_ME***Results of [DecisionTreeRegressor] estimatorrun are
{'std_fit_time': array([ 0.00058208,  0.00143813,  0.00150948,  0.00290155,  0.00103903,
        0.00098309,  0.00214766,  0.00107579,  0.00503516,  0.00653449,
        0.00184311,  0.00066643,  0.00039325,  0.00612597,  0.00070334,
        0.0058965 ,  0.00043295,  0.00046362,  0.00106597,  0.00641921,
        0.0016746 ,  0.00568555,  0.00101063,  0.00065342]), 'param_model__max_features': masked_array(data = ['auto' 'auto' 'sqrt' 'sqrt' 'log2' 'log2' 'auto' 'auto' 'sqrt' 'sqrt'
 'log2' 'log2' 'auto' 'auto' 'sqrt' 'sqrt' 'log2' 'log2' 'auto' 'auto'
 'sqrt' 'sqrt' 'log2' 'log2'],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False],
       fill_value = ?)
, 'params': ({'model__max_features': 'auto', 'model__splitter': 'best', 'model__max_depth': 3}, {'model__max_features': 'auto', 'model__splitter': 'random', 'model__max_depth': 3}, {'model__max_features': 'sqrt', 'model__splitter': 'best', 'model__max_depth': 3}, {'model__max_features': 'sqrt', 'model__splitter': 'random', 'model__max_depth': 3}, {'model__max_features': 'log2', 'model__splitter': 'best', 'model__max_depth': 3}, {'model__max_features': 'log2', 'model__splitter': 'random', 'model__max_depth': 3}, {'model__max_features': 'auto', 'model__splitter': 'best', 'model__max_depth': 4}, {'model__max_features': 'auto', 'model__splitter': 'random', 'model__max_depth': 4}, {'model__max_features': 'sqrt', 'model__splitter': 'best', 'model__max_depth': 4}, {'model__max_features': 'sqrt', 'model__splitter': 'random', 'model__max_depth': 4}, {'model__max_features': 'log2', 'model__splitter': 'best', 'model__max_depth': 4}, {'model__max_features': 'log2', 'model__splitter': 'random', 'model__max_depth': 4}, {'model__max_features': 'auto', 'model__splitter': 'best', 'model__max_depth': 5}, {'model__max_features': 'auto', 'model__splitter': 'random', 'model__max_depth': 5}, {'model__max_features': 'sqrt', 'model__splitter': 'best', 'model__max_depth': 5}, {'model__max_features': 'sqrt', 'model__splitter': 'random', 'model__max_depth': 5}, {'model__max_features': 'log2', 'model__splitter': 'best', 'model__max_depth': 5}, {'model__max_features': 'log2', 'model__splitter': 'random', 'model__max_depth': 5}, {'model__max_features': 'auto', 'model__splitter': 'best', 'model__max_depth': 6}, {'model__max_features': 'auto', 'model__splitter': 'random', 'model__max_depth': 6}, {'model__max_features': 'sqrt', 'model__splitter': 'best', 'model__max_depth': 6}, {'model__max_features': 'sqrt', 'model__splitter': 'random', 'model__max_depth': 6}, {'model__max_features': 'log2', 'model__splitter': 'best', 'model__max_depth': 6}, {'model__max_features': 'log2', 'model__splitter': 'random', 'model__max_depth': 6}), 'rank_test_score': array([ 1,  7, 10, 17, 21, 24,  3,  4,  9, 13, 18, 19,  2,  5, 11, 23, 20,
       14,  6,  8, 15, 22, 16, 12], dtype=int32), 'param_model__max_depth': masked_array(data = [3 3 3 3 3 3 4 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 6],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False],
       fill_value = ?)
, 'mean_score_time': array([ 0.0019263 ,  0.00101453,  0.00096548,  0.00095725,  0.00091511,
        0.00102526,  0.00103241,  0.0010078 ,  0.00107127,  0.00100541,
        0.00094521,  0.00097984,  0.00103152,  0.00102854,  0.0009703 ,
        0.00096726,  0.00101888,  0.00089586,  0.00104499,  0.00104767,
        0.00103867,  0.00095004,  0.00093001,  0.00088024]), 'split0_test_score': array([ 0.53997285,  0.51263239,  0.2834219 ,  0.03409859,  0.05155125,
        0.01894759,  0.51438801,  0.47395458,  0.35632608,  0.01143443,
        0.02246029,  0.03445843,  0.50652885,  0.44399693,  0.09932691,
        0.08586634,  0.01920451,  0.05685038,  0.45931823,  0.40444948,
        0.13179679, -0.0818971 ,  0.10182228,  0.08046619]), 'split3_test_score': array([ 0.51998703,  0.36817442,  0.10042941,  0.07895881,  0.10682454,
        0.01779858,  0.4523172 ,  0.44373962,  0.08082094,  0.0345085 ,
        0.11699878,  0.11490264,  0.49596305,  0.51752309,  0.15268285,
       -0.01288976,  0.08044452,  0.25204622,  0.47100681,  0.49577215,
        0.16392534, -0.09997302,  0.05237743,  0.27615015]), 'split2_train_score': array([ 0.59946857,  0.57211509,  0.09010272,  0.10475655,  0.0763055 ,
        0.02430614,  0.64709093,  0.55877182,  0.4729534 ,  0.31421297,
        0.04826995,  0.05044312,  0.69530905,  0.66482812,  0.15404888,
        0.07236047,  0.11566925,  0.06742613,  0.73271469,  0.61980205,
        0.22271296,  0.2994178 ,  0.20456942,  0.08751297]), 'split2_test_score': array([ 0.52488212,  0.46361   ,  0.07739402,  0.08861756,  0.06365159,
        0.07523461,  0.49225679,  0.4731551 ,  0.40004155,  0.34351766,
        0.01778001,  0.03189111,  0.51397883,  0.45909025,  0.05169038,
        0.03385408,  0.03226239,  0.05475501,  0.5292378 ,  0.48507436,
        0.08374054,  0.17088004,  0.09180469,  0.08802604]), 'param_model__splitter': masked_array(data = ['best' 'random' 'best' 'random' 'best' 'random' 'best' 'random' 'best'
 'random' 'best' 'random' 'best' 'random' 'best' 'random' 'best' 'random'
 'best' 'random' 'best' 'random' 'best' 'random'],
             mask = [False False False False False False False False False False False False
 False False False False False False False False False False False False],
       fill_value = ?)
, 'std_test_score': array([ 0.02104272,  0.05688586,  0.13683435,  0.04292198,  0.03934766,
        0.06492249,  0.0224435 ,  0.02994431,  0.13366256,  0.13245704,
        0.0474577 ,  0.03356161,  0.00651393,  0.02880682,  0.13666194,
        0.03811363,  0.03174475,  0.08976272,  0.03004971,  0.04605339,
        0.06696344,  0.12610605,  0.02302375,  0.08976661]), 'std_train_score': array([ 0.00890526,  0.01441544,  0.13196898,  0.04690613,  0.0424774 ,
        0.02353879,  0.01143876,  0.05397273,  0.1534173 ,  0.08505102,
        0.03160789,  0.02859503,  0.00855155,  0.02893678,  0.17523592,
        0.02601361,  0.0335408 ,  0.10542313,  0.01128535,  0.02216279,
        0.05653612,  0.08062354,  0.07095953,  0.09713577]), 'mean_train_score': array([ 0.59061898,  0.56068068,  0.23578202,  0.11388356,  0.07898921,
        0.03420409,  0.64571214,  0.53813408,  0.29220679,  0.1756615 ,
        0.0991078 ,  0.04413284,  0.69542257,  0.63000715,  0.26002645,
        0.11018541,  0.09066725,  0.11686619,  0.73638789,  0.63972503,
        0.25805792,  0.18240402,  0.20625551,  0.13404843]), 'split0_train_score': array([ 0.5864246 ,  0.56889858,  0.30604673,  0.09085118,  0.1009047 ,
        0.01768273,  0.63849225,  0.51161445,  0.41467636,  0.09728659,
        0.10300611,  0.01001999,  0.68244129,  0.59054234,  0.1469877 ,
        0.14587274,  0.03488118,  0.06563919,  0.72333597,  0.65440364,
        0.35315906,  0.21268239,  0.18512533,  0.10841564]), 'split1_train_score': array([ 0.59854981,  0.56568412,  0.41607259,  0.19188996,  0.01216799,
        0.07476684,  0.66367087,  0.61355163,  0.15655664,  0.17544758,
        0.11043486,  0.02904529,  0.70634333,  0.6491902 ,  0.56297379,
        0.11091175,  0.11807858,  0.03620221,  0.75438701,  0.66821823,
        0.24697398,  0.12525235,  0.31623191,  0.04302095]), 'std_score_time': array([  3.68217794e-05,   1.41295699e-05,   1.07193547e-04,
         2.85401081e-05,   3.06840057e-05,   6.63181699e-05,
         3.67491034e-05,   3.70320929e-05,   1.28212833e-04,
         7.52921569e-05,   6.12296093e-05,   6.00112813e-05,
         3.92607791e-05,   1.17676296e-04,   3.38568549e-05,
         9.50741729e-05,   1.06257346e-04,   2.05126594e-05,
         2.00810162e-05,   1.23626126e-05,   7.81455765e-05,
         2.90417783e-05,   2.01378154e-05,   6.89990123e-05]), 'mean_fit_time': array([ 0.04349542,  0.03302258,  0.02505517,  0.02675509,  0.02393198,
        0.02533901,  0.04491341,  0.03610998,  0.026564  ,  0.02934349,
        0.02556729,  0.02392644,  0.04870862,  0.04172224,  0.02562749,
        0.02786362,  0.02373368,  0.02398247,  0.05325454,  0.04606968,
        0.02592331,  0.02826566,  0.02443892,  0.02399474]), 'split3_train_score': array([ 0.57803294,  0.53602494,  0.13090605,  0.06803653,  0.12657864,
        0.02006064,  0.6335945 ,  0.46859842,  0.12464074,  0.11569884,
        0.13472027,  0.08702296,  0.69759662,  0.61546793,  0.17609544,
        0.11159666,  0.09404   ,  0.29819722,  0.73511387,  0.6164762 ,
        0.20938568,  0.09226354,  0.1190954 ,  0.29724415]), 'mean_test_score': array([ 0.51690034,  0.46152712,  0.21791388,  0.08897451,  0.0546346 ,
        0.00232267,  0.48804291,  0.4794112 ,  0.24802873,  0.11896756,
        0.06752649,  0.06244362,  0.50618685,  0.4785636 ,  0.17739152,
        0.02680878,  0.05671844,  0.09784906,  0.4783227 ,  0.44469006,
        0.09151218,  0.034796  ,  0.08992728,  0.1229618 ]), 'split1_test_score': array([  4.82759350e-01,   5.01691650e-01,   4.10410184e-01,
         1.54223094e-01,  -3.48896897e-03,  -1.02690086e-01,
         4.93209650e-01,   5.26795510e-01,   1.54926336e-01,
         8.64096593e-02,   1.12866882e-01,   6.85222989e-02,
         5.08276663e-01,   4.93644145e-01,   4.05865957e-01,
         4.04444620e-04,   9.49623429e-02,   2.77446278e-02,
         4.53727974e-01,   3.93464254e-01,  -1.34139531e-02,
         1.50174091e-01,   1.13704716e-01,   4.72048074e-02])}
GREP_ME***Best params of [DecisionTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__max_features': 'auto', 'model__splitter': 'best', 'model__max_depth': 3}
GREP_ME***Best score of [DecisionTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.516900340625
####################################################################################
################# Running the iteration 9  of the GridSearchCV ####################
####################################################################################
***Starting [ExtraTreeRegressor] estimator run, pipeline: | preprocessor:dummy | transfomer: dummy | reducer: dummy 
##param_grid##
{'model__min_samples_split': [2, 3, 4, 5], 'model__max_depth': [3, 4, 5, 6]}
Fitting 4 folds for each of 16 candidates, totalling 64 fits
[CV] model__max_depth=3, model__min_samples_split=2 ..................
[CV] ... model__max_depth=3, model__min_samples_split=2, total=   0.0s
[CV] model__max_depth=3, model__min_samples_split=3 ..................
[CV] ... model__max_depth=3, model__min_samples_split=3, total=   0.0s
[CV] model__max_depth=3, model__min_samples_split=4 ..................
[CV] ... model__max_depth=3, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=3, model__min_samples_split=4 ..................
[CV] ... model__max_depth=3, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=3, model__min_samples_split=4 ..................
[CV] ... model__max_depth=3, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=3, model__min_samples_split=4 ..................
[CV] ... model__max_depth=3, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=4, model__min_samples_split=4 ..................
[CV] ... model__max_depth=4, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=4, model__min_samples_split=4 ..................
[CV] ... model__max_depth=4, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=4, model__min_samples_split=4 ..................
[CV] ... model__max_depth=4, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=4, model__min_samples_split=4 ..................
[CV] ... model__max_depth=4, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=5, model__min_samples_split=4 ..................
[CV] ... model__max_depth=5, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=5, model__min_samples_split=4 ..................
[CV] ... model__max_depth=5, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=5, model__min_samples_split=4 ..................
[CV] ... model__max_depth=5, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=5, model__min_samples_split=4 ..................
[CV] ... model__max_depth=5, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=6, model__min_samples_split=4 ..................
[CV] ... model__max_depth=6, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=6, model__min_samples_split=4 ..................
[CV] ... model__max_depth=6, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=6, model__min_samples_split=4 ..................
[CV] ... model__max_depth=6, model__min_samples_split=4, total=   0.0s
[CV] model__max_depth=6, model__min_samples_split=4 ..................
[CV] ... model__max_depth=6, model__min_samples_split=4, total=   0.0s
GREP_ME***Results of [ExtraTreeRegressor] estimatorrun are
{'std_fit_time': array([ 0.0011478 ,  0.00121667,  0.00110118,  0.00044751,  0.00081044,
        0.0016436 ,  0.00188864,  0.00216987,  0.00303376,  0.00640427,
        0.00240465,  0.00778892,  0.00178489,  0.00326277,  0.0027386 ,
        0.0034772 ]), 'params': ({'model__max_depth': 3, 'model__min_samples_split': 2}, {'model__max_depth': 3, 'model__min_samples_split': 3}, {'model__max_depth': 3, 'model__min_samples_split': 4}, {'model__max_depth': 3, 'model__min_samples_split': 5}, {'model__max_depth': 4, 'model__min_samples_split': 2}, {'model__max_depth': 4, 'model__min_samples_split': 3}, {'model__max_depth': 4, 'model__min_samples_split': 4}, {'model__max_depth': 4, 'model__min_samples_split': 5}, {'model__max_depth': 5, 'model__min_samples_split': 2}, {'model__max_depth': 5, 'model__min_samples_split': 3}, {'model__max_depth': 5, 'model__min_samples_split': 4}, {'model__max_depth': 5, 'model__min_samples_split': 5}, {'model__max_depth': 6, 'model__min_samples_split': 2}, {'model__max_depth': 6, 'model__min_samples_split': 3}, {'model__max_depth': 6, 'model__min_samples_split': 4}, {'model__max_depth': 6, 'model__min_samples_split': 5}), 'rank_test_score': array([12,  5, 13, 13, 16, 15,  7,  7,  9,  6,  2,  1, 11, 10,  4,  3], dtype=int32), 'param_model__max_depth': masked_array(data = [3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6],
             mask = [False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'param_model__min_samples_split': masked_array(data = [2 3 4 5 2 3 4 5 2 3 4 5 2 3 4 5],
             mask = [False False False False False False False False False False False False
 False False False False],
       fill_value = ?)
, 'mean_score_time': array([ 0.00201547,  0.00105995,  0.00098777,  0.00106037,  0.00122309,
        0.00102854,  0.00110912,  0.00129753,  0.0010559 ,  0.00107551,
        0.0010004 ,  0.00118673,  0.00099438,  0.00097895,  0.00102305,
        0.00093418]), 'split0_test_score': array([ 0.51263239,  0.49472389,  0.30591331,  0.30591331,  0.25461446,
        0.34024601,  0.53705436,  0.53705436,  0.51068693,  0.51068693,
        0.51914953,  0.52395553,  0.5163344 ,  0.53945071,  0.54494928,
        0.54494928]), 'split3_test_score': array([ 0.36817442,  0.45526068,  0.47665801,  0.47665801,  0.34549367,
        0.34549367,  0.51652866,  0.51652866,  0.39025493,  0.39814243,
        0.52538562,  0.52538562,  0.39091444,  0.38704973,  0.40962003,
        0.40962003]), 'split2_train_score': array([ 0.57211509,  0.54405837,  0.57080804,  0.57080804,  0.62208434,
        0.62208434,  0.46886921,  0.46886921,  0.56914204,  0.56880196,
        0.59095444,  0.59095444,  0.65097655,  0.64171151,  0.68394368,
        0.682207  ]), 'split2_test_score': array([ 0.46361   ,  0.47875028,  0.46983774,  0.46983774,  0.40080929,
        0.40080929,  0.36903272,  0.36903272,  0.46934093,  0.46934093,
        0.49963201,  0.49963201,  0.52513603,  0.50807662,  0.47779817,
        0.47779817]), 'std_test_score': array([ 0.05688586,  0.01405659,  0.07724108,  0.07724108,  0.08781002,
        0.05386147,  0.065014  ,  0.065014  ,  0.04805445,  0.04836083,
        0.01225693,  0.01326446,  0.0560233 ,  0.05974613,  0.04949896,
        0.05571434]), 'std_train_score': array([ 0.01441544,  0.04261323,  0.07012733,  0.07012733,  0.04888186,
        0.05977536,  0.05764454,  0.05764454,  0.02968483,  0.02984763,
        0.02590547,  0.0233306 ,  0.01291662,  0.02182398,  0.02581258,
        0.02301535]), 'mean_train_score': array([ 0.56068068,  0.50526364,  0.51251871,  0.51251871,  0.55988687,
        0.56166806,  0.56228801,  0.56228801,  0.61532568,  0.61515846,
        0.63009454,  0.62515354,  0.64781814,  0.65658721,  0.65682698,
        0.66094724]), 'split0_train_score': array([ 0.56889858,  0.48585771,  0.39369928,  0.39369928,  0.49401624,
        0.47594689,  0.62110603,  0.62110603,  0.6428013 ,  0.6428013 ,
        0.65251044,  0.63594173,  0.66602878,  0.68536313,  0.68064232,
        0.68064232]), 'split1_train_score': array([ 0.56568412,  0.54652983,  0.55550623,  0.55550623,  0.58764191,
        0.61288188,  0.5954996 ,  0.5954996 ,  0.63987712,  0.63993234,
        0.654427  ,  0.654427  ,  0.63015383,  0.63015383,  0.63708959,
        0.65530731]), 'std_score_time': array([  5.91317731e-05,   5.02532907e-05,   2.95422652e-05,
         4.52086202e-05,   1.85461995e-04,   1.12551121e-04,
         1.12303123e-04,   2.53664560e-04,   6.01179846e-05,
         9.14129292e-05,   3.73925928e-05,   1.99479890e-04,
         6.42108586e-05,   2.38000981e-05,   7.99740643e-05,
         4.07132012e-05]), 'mean_fit_time': array([ 0.03869039,  0.03351939,  0.03402913,  0.03484541,  0.0363341 ,
        0.03745532,  0.03781664,  0.03815573,  0.04013133,  0.04271966,
        0.04055381,  0.04706109,  0.04342604,  0.04262161,  0.04246962,
        0.04291981]), 'split3_train_score': array([ 0.53602494,  0.44460865,  0.5300613 ,  0.5300613 ,  0.53580499,
        0.53575914,  0.56367719,  0.56367719,  0.60948225,  0.60909824,
        0.62248628,  0.61929101,  0.64411341,  0.66912036,  0.62563233,
        0.62563233]), 'mean_test_score': array([ 0.46152712,  0.47667927,  0.43823472,  0.43823472,  0.37440794,
        0.39010024,  0.47125094,  0.47125094,  0.4688288 ,  0.47486432,
        0.51025113,  0.51145263,  0.46713333,  0.46768138,  0.48477822,
        0.49393604]), 'split1_test_score': array([ 0.50169165,  0.47798222,  0.50052981,  0.50052981,  0.49671433,
        0.47385199,  0.462388  ,  0.462388  ,  0.50503241,  0.52128699,
        0.49683737,  0.49683737,  0.43614847,  0.43614847,  0.50674538,
        0.54337669])}
GREP_ME***Best params of [ExtraTreeRegressor] estimator,pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy  run are
{'model__max_depth': 5, 'model__min_samples_split': 5}
GREP_ME***Best score of [ExtraTreeRegressor] estimator, pipeline:| preprocessor:dummy | transfomer: dummy | reducer: dummy run are
0.511452633005
#########################################
###Finished all estimators for cl: all_samples
#########################################
#########################################
#######Printing results for cl: all_samples
#########################################
{'ExtraTreeRegressor': {'best_cfg': {'model__max_depth': 5, 'model__min_samples_split': 5}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.51145263300502952}, 'KNeighborsRegressor': {'best_cfg': {'model__n_neighbors': 6, 'model__algorithm': 'auto', 'model__weights': 'uniform'}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.49238473414266698}, 'BaggingRegressor': {'best_cfg': {'model__max_features': 1.0, 'model__max_samples': 1.0, 'model__n_estimators': 40}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.58466104806928287}, 'DecisionTreeRegressor': {'best_cfg': {'model__max_features': 'auto', 'model__splitter': 'best', 'model__max_depth': 3}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.51690034062481194}, 'GradientBoostingRegressor': {'best_cfg': {'model__learning_rate': 0.1, 'model__max_depth': 6, 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.59231620236033233}, 'ExtraTreesRegressor': {'best_cfg': {'model__max_features': 'auto', 'model__max_depth': 5, 'model__n_estimators': 100}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.55953513126873233}, 'RandomForestRegressor': {'best_cfg': {'model__max_depth': 5, 'model__n_estimators': 50}, 'pipe': '| preprocessor:dummy | transfomer: dummy | reducer: dummy', 'score': 0.5763565336989982}}
priting simply sorted numbers, grep them to find the best cfg or cl: all_samples
[0.49238473414266698, 0.51145263300502952, 0.51690034062481194, 0.55953513126873233, 0.5763565336989982, 0.58466104806928287, 0.59231620236033233]
